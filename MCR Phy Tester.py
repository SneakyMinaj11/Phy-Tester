from header import *


class Logger:
    def __init__(self):
        currNow = datetime.datetime.now()
        currDate = currNow.strftime("%d-%m-%y")
        currTime = currNow.strftime("%H-%M-%S")

        self.nameOfLogger = "logs/[" + str(currDate) + "] Logger.txt"

        if not os.path.exists(os.path.dirname(self.nameOfLogger)):
            try:
                os.makedirs(os.path.dirname(self.nameOfLogger))
            except Exception as error:
                self.write("Error in logger.write: " + str('{err}'.format(err=error)), status=False)

    def write(self, msg, status=True):
        try:
            file = open(str(self.nameOfLogger), 'a')

            currNow = datetime.datetime.now()
            currDate = currNow.strftime("%d/%m/%y")
            currTime = currNow.strftime("%H:%M:%S")

            print(msg)
            file.write("[" + str(currDate) + " " + str(currTime) + "] " + str(msg) + "\n")
            file.close()
            WriteStream.write(["textBrowser_logger.append", "<img src=\":/pictures/pictures/" + ("good" if status else "bad") + ".png\" /><span style=\"color:" + "#ffffff" + ";\"> [" + str(currTime) + "]: " + str(msg) + "\n" + "</span>"])
            WriteStream.write(["textBrowser_Logger_Expand.append", "<img src=\":/pictures/pictures/" + ("good" if status else "bad") + ".png\" /><span style=\"color:" + "#ffffff" + ";\"> [" + str(currTime) + "]: " + str(msg) + "\n" + "</span>"])

            # WriteStream.write(["textBrowser_logger.append", "[" + str(currDate) + " " + str(currTime) + "] " + str(msg)])
            # WriteStream.write(["textBrowser_Logger_Expand.append", "[" + str(currDate) + " " + str(currTime) + "] " + str(msg)])

        except Exception as error:
            self.write("[write] error: " + str('{err}'.format(err=error)), status=False)


class Action:
    def status_side_menu(self, condition):
        try:
            if gui.ex.pushButton_Home_Welcome_spi.isChecked():
                WriteStream.write(["registers_btn.setHidden", condition])
                WriteStream.write(["registers_scripts_btn.setHidden", condition])
                WriteStream.write(["load_file_btn.setHidden", condition])
            else:
                WriteStream.write(["registers_btn.setHidden", condition])
                WriteStream.write(["registers_scripts_btn.setHidden", condition])
                WriteStream.write(["load_file_btn.setHidden", condition])
                WriteStream.write(["test_points_btn.setHidden", condition])
                WriteStream.write(["hw_tests_btn.setHidden", condition])
                WriteStream.write(["automation_btn.setHidden", condition])
        except Exception as error:
            logger.write("[status_side_menu]" + str(error), status=False)

    def __init__(self):
        self.status_side_menu(True)
        WriteStream.write(["protocol_index_btn.setHidden", True])
        WriteStream.write(["label_first_arrow.setHidden", True])
        WriteStream.write(["device_index_btn.setHidden", True])
        WriteStream.write(["label_second_arrow.setHidden", True])
        WriteStream.write(["component_index_btn.setHidden", True])
        WriteStream.write(["label_third_arrow.setHidden", True])
        WriteStream.write(["card_index_btn.setHidden", True])

        self.sizeOfTable = 0
        self.CounterAddRow = 0
        self.countOfFullTable = 0
        self.indexesOfAddRows = []
        self.indexesOfDeleteRows = []
        self.version_app = "22.02.2023"
        self.last_version = ""
        self.old_results = {}

        gui.ex.home_btn.clicked.connect(lambda: threading.Thread(target=self.Home_Button).start())
        gui.ex.config_btn.clicked.connect(lambda: threading.Thread(gui.ex.main_tab_widget.setCurrentIndex(1)).start())
        gui.ex.registers_btn.clicked.connect(lambda: threading.Thread(gui.ex.main_tab_widget.setCurrentIndex(2)).start())
        gui.ex.test_points_btn.clicked.connect(lambda: threading.Thread(gui.ex.main_tab_widget.setCurrentIndex(3)).start())
        gui.ex.load_file_btn.clicked.connect(lambda: threading.Thread(gui.ex.main_tab_widget.setCurrentIndex(4)).start())
        gui.ex.hw_tests_btn.clicked.connect(lambda: threading.Thread(gui.ex.main_tab_widget.setCurrentIndex(5)).start())
        gui.ex.automation_btn.clicked.connect(lambda: threading.Thread(gui.ex.main_tab_widget.setCurrentIndex(6)).start())
        gui.ex.registers_scripts_btn.clicked.connect(lambda: threading.Thread(gui.ex.main_tab_widget.setCurrentIndex(7)).start())
        gui.ex.event_log_btn.clicked.connect(lambda: threading.Thread(gui.ex.main_tab_widget.setCurrentIndex(8)).start())
        gui.ex.pushButton_about.clicked.connect(lambda: threading.Thread(gui.ex.main_tab_widget.setCurrentIndex(9)).start())
        gui.ex.software_guide_btn.clicked.connect(lambda: threading.Thread(target=self.open_requirements).start())
        gui.ex.open_logger_file_btn.clicked.connect(lambda: threading.Thread(target=self.OpenCurrLogFile).start())
        gui.ex.protocol_index_btn.clicked.connect(lambda: threading.Thread(target=self.Home_Button()).start())
        gui.ex.device_index_btn.clicked.connect(lambda: threading.Thread(target=home.select_platform(connection="LAN" if gui.ex.pushButton_Home_Welcome_lan.isChecked() else "SPI")).start())
        gui.ex.component_index_btn.clicked.connect(lambda: threading.Thread(target=wbn.hide_card_frame() if "WBN" in gui.ex.component_index_btn.text() else va.hide_card_frame()).start())  # TODO: Need to general it for all Components
        gui.ex.card_index_btn.clicked.connect(lambda: threading.Thread(target=wbn.show_card() if "WBN" in gui.ex.component_index_btn.text() else va.show_card()).start())  # TODO: Need to general it for all Components
        gui.ex.clear_logger_btn.clicked.connect(lambda: threading.Thread(target=action.ClearLogger).start())
        gui.ex.pushButton_about.clicked.connect(lambda: threading.Thread(target=gui.show_version).start())
        gui.ex.pushButton_open_last_version_folder.clicked.connect(lambda: threading.Thread(target=self.open_path_update_version).start())
        threading.Thread(target=self.check_last_version).start()

    def Home_Button(self):
        try:
            if gui.ex.comboBox_Configuration_fullscreen_status.currentText() == "Yes":
                WriteStream.write(["showNormal()"])
            WriteStream.write(["pushButton_checkConnection_SPI_Lptr1.setHidden", True])
            WriteStream.write(["protocol_index_btn.setHidden", True])
            WriteStream.write(["label_first_arrow.setHidden", True])
            WriteStream.write(["device_index_btn.setHidden", True])
            WriteStream.write(["label_second_arrow.setHidden", True])
            WriteStream.write(["component_index_btn.setHidden", True])
            WriteStream.write(["label_third_arrow.setHidden", True])
            WriteStream.write(["card_index_btn.setHidden", True])
            WriteStream.write(["main_tab_widget.setCurrentIndex", 0])
            WriteStream.write(["home_tab_widget.setCurrentIndex", 0])
            self.status_side_menu(True)
            WriteStream.write(["pushButton_Home_Welcome_lan.setChecked", False])
            WriteStream.write(["pushButton_Home_Welcome_spi.setChecked", False])
        except Exception as error:
            logger.write("[Home_Button]" + str(error), status=False)

    def popen(self, cmd):
        try:
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
            # process = subprocess.Popen(cmd, startupinfo=startupinfo, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
            process = subprocess.check_output(cmd, timeout=2)
            # return process.stdout.read()
            return process
        except Exception as error:
            logger.write("[popen] [" + str(cmd) + "] Error: " + str('{err}'.format(err=error)), status=False)

    def open_requirements(self):
        try:
            os.startfile("Files\\PHY_TESTER_ex.docx", 'open')
        except Exception as error:
            logger.write("[Failed open_requirements] Error: " + str('{err}'.format(err=error)), status=False)

    def OpenCurrLogFile(self):
        try:
            currNow = datetime.datetime.now()
            LogCurrDate = currNow.strftime("%d-%m-%y")
            LogCurrDate = "[" + LogCurrDate + "] Logger" + str(".txt")
            os.startfile("logs\\" + str(LogCurrDate), 'open')
        except Exception as error:
            logger.write("[Failed OpenCurrLogFile] Error: " + str('{err}'.format(err=error)), status=False)

    def ClearLogger(self):
        try:
            WriteStream.write(["textBrowser_logger.clear()"])
        except Exception as error:
            logger.write("[ClearLogger]" + str(error), status=False)

    def delete_Row(self):
        try:
            print(self.sizeOfTable)
            self.CounterAddRow -= 1
            currRows = sorted(registers.updateCurrRow())

            for i in currRows:
                self.indexesOfDeleteRows.append(int(gui.ex.tableWidget_Registers_registers.item(i, 0).text()) - 1)
                if gui.ex.tableWidget_Registers_registers.item(i, 2).text() == "" or gui.ex.tableWidget_Registers_registers.item(i, 2).text()[:2] != "0x" or gui.ex.tableWidget_Registers_registers.item(i, 5).text() == "" or gui.ex.tableWidget_Registers_registers.cellWidget(i, 6).currentText() == "":
                    gui.ex.pushButton_Registers_save.setStyleSheet("QPushButton:hover{\n"
                                                                   "        background: qlineargradient(x1 : 0, y1 : 0, x2 : 0, y2 :   1, stop :   0.0 #ffd9aa,\n"
                                                                   "                stop :   0.5 #ffbb6e, stop :   0.55 #feae42, stop :   1.0 #fedb74);\n"
                                                                   "        \n"
                                                                   "    background: rgb(60, 68, 83);\n"
                                                                   "}\n"
                                                                   "\n"
                                                                   "QPushButton {\n"
                                                                   "font: bold 10pt \"MS Shell Dlg 2\";\n"
                                                                   "        padding-left: 10px;\n"
                                                                   "        text-align: left;\n"
                                                                   "        border: 1px solid #6593cf;\n"
                                                                   "        border-radius: 20px;\n"
                                                                   "    \n"
                                                                   "         background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:1 rgba(0, 0, 0, 0));\n"
                                                                   "        color: rgb(255, 255, 255);\n"
                                                                   "        height: 30px;\n"
                                                                   "}\n"
                                                                   "\n"
                                                                   "\n"
                                                                   "\n"
                                                                   "\n"
                                                                   "QPushButton:pressed {\n"
                                                                   "           color: rgb(148, 155, 162);\n"
                                                                   "        padding-top: 0px;\n"
                                                                   "        padding-left: 0px;\n"
                                                                   "\n"
                                                                   "}\n"
                                                                   "\n"
                                                                   "\n"
                                                                   "QPushButton:on {\n"
                                                                   "        background: qlineargradient(x1 : 0, y1 : 0, x2 : 0, y2 :   1, stop :   0.0 #00557f,\n"
                                                                   "        stop :   0.5 #00557f, stop :   0.55 #00557f, stop :   1.0 #f5f9ff);\n"
                                                                   "        padding-top: 2px;\n"
                                                                   "        padding-left: 3px;\n"
                                                                   "}\n"
                                                                   "\n"
                                                                   "QPushButton:disabled {\n"
                                                                   "        background: transparent #e5e9ee;\n"
                                                                   "        padding-top: 2px;        \n"
                                                                   "        padding-left: 3px;\n"
                                                                   "        color: black;\n"
                                                                   "}")

            print("self.indexesOfDeleteRows = " + str(self.indexesOfDeleteRows))

            index = 0
            for i in self.indexesOfAddRows:
                if currRows[0] > self.indexesOfAddRows[index]:
                    self.indexesOfAddRows[index] -= len(currRows)
                index += 1

            print("self.indexesOfAddRows = " + str(self.indexesOfAddRows))
            print("self.indexesOfDeleteRows = " + str(self.indexesOfDeleteRows))

            for i in range(len(currRows) - 1, -1, -1):
                WriteStream.write(["tableWidget_Registers_registers.removeRow", int(currRows[i])])
                registers.listOf_index.remove(int(currRows[i]))
                self.sizeOfTable -= 1
                self.countOfFullTable -= 1

            print(self.sizeOfTable)
        except Exception as error:
            logger.write("[delete_Row]" + str(error), status=False)

    def AddRow(self):
        try:
            self.CounterAddRow += 1
            print(self.CounterAddRow)
            WriteStream.write(["tableWidget_Registers_registers.blockSignals", True])

            WriteStream.write(["tableWidget_Registers_registers.insertRow", self.sizeOfTable])

            self.indexesOfAddRows.append(gui.ex.tableWidget_Registers_registers.rowCount())

            chkBoxItem = QtWidgets.QTableWidgetItem(str(self.countOfFullTable + 1))
            chkBoxItem.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
            chkBoxItem.setCheckState(QtCore.Qt.CheckState(0))
            WriteStream.write(["tableWidget_Registers_registers.setItem", action.sizeOfTable, 0, chkBoxItem])
            chkBoxItem.setForeground(QBrush(QColor(255, 255, 255)))

            item = QtWidgets.QTableWidgetItem()
            item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
            WriteStream.write(["tableWidget_Registers_registers.setItem", self.sizeOfTable, 1, item])
            item.setForeground(QBrush(QColor(255, 255, 255)))

            item = QtWidgets.QTableWidgetItem()
            item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
            WriteStream.write(["tableWidget_Registers_registers.setItem", self.sizeOfTable, 2, item])
            item.setForeground(QBrush(QColor(255, 255, 255)))
            # item.setBackground(QtGui.QColor(255, 0, 0))
            # WriteStream.write(["tableWidget_Registers_registers.addSignal", "tableWidget_Registers_registers.itemChanged.connect((lambda: threading.Thread(target=table_functions.Print_Error_Values, args=[" + str(self.sizeOfTable) + "]).start()))", ""])

            item = QtWidgets.QTableWidgetItem()
            item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
            WriteStream.write(["tableWidget_Registers_registers.setItem", self.sizeOfTable, 3, item])
            item.setForeground(QBrush(QColor(255, 255, 255)))

            combo = QtWidgets.QComboBox()
            combo.setStyleSheet("background-color: rgb(255, 255, 255);")
            combo.addItems(["Bin", "Oct", "Dec", "Hex"])
            combo.setCurrentIndex(3)
            registers.listOf_prev.append("Hex")

            gui.ex.tableWidget_Registers_registers.setCellWidget(self.sizeOfTable, 4, combo)
            WriteStream.write(["tableWidget_Registers_registers.setCellWidget", self.sizeOfTable, 4, combo])
            WriteStream.write(["tableWidget_Registers_registers.addSignal", "tableWidget_Registers_registers.cellWidget(" + str(self.sizeOfTable) + ", 4).currentIndexChanged.connect((lambda: threading.Thread(target=table_functions.convertNumber, args=[str(" + str(self.sizeOfTable) + ")]).start()))", ""])
            combo.setEnabled(False)

            item = QtWidgets.QTableWidgetItem()
            item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
            WriteStream.write(["tableWidget_Registers_registers.setItem", self.sizeOfTable, 5, item])
            item.setForeground(QBrush(QColor(255, 255, 255)))
            # item.setBackground(QtGui.QColor(255, 0, 0))
            # WriteStream.write(["tableWidget_Registers_registers.addSignal", "tableWidget_Registers_registers.itemChanged.connect((lambda: threading.Thread(target=table_functions.Print_Error_Values, args=[" + str(self.sizeOfTable) + "]).start()))", ""])

            combo2 = QtWidgets.QComboBox()
            combo2.setStyleSheet("background-color: rgb(255, 255, 255);")
            board_file = json.load(open("Config\\Board_id_config.json", "r"))
            keys = list(board_file.keys())
            for i in range(len(keys)):
                combo2.addItem(str(keys[i]))
            combo2.setCurrentIndex(-1)

            gui.ex.tableWidget_Registers_registers.setCellWidget(self.sizeOfTable, 6, combo2)
            WriteStream.write(["tableWidget_Registers_registers.setCellWidget", self.sizeOfTable, 6, combo2])
            # combo2.setStyleSheet("background-color: rgb(255, 0, 0);")
            # WriteStream.write(["tableWidget_Registers_registers.addSignal", "tableWidget_Registers_registers.cellWidget(" + str(self.sizeOfTable) + ", 6).currentIndexChanged.connect((lambda: threading.Thread(target=table_functions.Print_Error_Values, args=[" + str(self.sizeOfTable) + "]).start()))", ""])

            self.sizeOfTable += 1

            self.countOfFullTable += 1

            WriteStream.write(["tableWidget_Registers_registers.blockSignals", False])

        except Exception as error:
            logger.write("Error AddRow: " + str('{err}'.format(err=error)), status=False)

    def RemoveDuplicateFromList(self, x):
        return list(dict.fromkeys(x))

    def open_path_update_version(self):
        try:
            os.startfile(os.path.realpath("J:/Manpack SDR/Netanel/Programs/MCR PHY Tester Analog"))
        except Exception as error:
            logger.write("[open_path_update_version] error:" + str('{err}'.format(err=error)), status=False)

    def check_last_version(self):
        try:
            path = "J:/Manpack SDR/Netanel/Programs/MCR PHY Tester Analog/Last Version.txt"

            file = open(path, "r")
            self.last_version = str(file.readline())
            if self.version_app != self.last_version:
                WriteStream.write(["main_tab_widget.setCurrentIndex", 9])
                WriteStream.write(["label_update_your_app.setText", "Update your app!\n\nThe last version is: " + str(self.last_version) + "\n(your version is " + str(self.version_app) + ")"])
                logger.write("Your version app is " + str(self.version_app) + ", but the last version is " + str(self.last_version))

            WriteStream.write(["label_About_date.setText", "Date: " + str(self.version_app)])

        except Exception as error:
            logger.write("[check_last_version] error:" + str('{err}'.format(err=error)), status=False)

    def write_component(self, cardName):
        try:
            if (cardName == "LPTR1"):
                if (lptr1.pre_run() == False):
                    return False

                component_hsid = {**json.load(open("Files/LPTR1_Components_Registers.json", "r"))["LPTR1"]["UHF_RX"],
                                  **json.load(open("Files/LPTR1_Components_Registers.json", "r"))["LPTR1"]["LBAND_RX"],
                                  **json.load(open("Files/LPTR1_Components_Registers.json", "r"))["LPTR1"]["TX"],
                                  **json.load(open("Files/" +"Module_Filter_Bank" + "_Components_Registers.json", "r"))["Module_Filter_Bank"]}
            elif (cardName == "Module_Filter_Bank"):
                if (module_filter_bank.pre_run_module_filter_bank() == False):
                    return False
                component_hsid = json.load(open("Files/Module_Filter_Bank_Components_Registers.json", "r"))[cardName]

            else:
                component_hsid = json.load(open("Files/" + cardName + "_Components_Registers.json", "r"))[cardName]

            for add in component_hsid:
                curr_values = "________________"
                for gui_comp in component_hsid[add]:
                    status = True
                    if component_hsid[add][gui_comp]["configurations"]["exception"] == True:
                        if str(cardName) == "HPTR":
                            status = hptr.exceptions_comp(component_hsid=component_hsid, add=add, gui_comp=gui_comp, curr_values=curr_values)
                        elif str(cardName) == "WBN":
                            status = wbn.exceptions_comp(component_hsid=component_hsid, add=add, gui_comp=gui_comp, curr_values=curr_values)
                        elif str(cardName) == "LPTR1":
                            status = lptr1.exceptions_comp(component_hsid=component_hsid, add=add, gui_comp=gui_comp, curr_values=curr_values)
                        elif str(cardName) == "Module_Filter_Bank":
                            status = module_filter_bank.exceptions_comp(component_hsid=component_hsid, add=add, gui_comp=gui_comp, curr_values=curr_values)
                        curr_values = status
                    elif status is None:
                        return False
                    elif component_hsid[add][gui_comp]["configurations"]["default_value"] != False:
                        curr_values = component_hsid[str(add)][gui_comp]["configurations"]["default_value"]

                    else:
                        type_obj = component_hsid[str(add)][gui_comp]["configurations"]["obj_name"].split("_")[0]
                        if type_obj == "comboBox":
                            msg_in_bits = component_hsid[str(add)][gui_comp][eval("gui.ex." + str(component_hsid[str(add)][str(gui_comp)]["configurations"]["obj_name"]) + ".currentText()")]
                        elif type_obj == "pushButton":
                            msg_in_bits = component_hsid[str(add)][gui_comp][str(eval("gui.ex." + str(component_hsid[str(add)][str(gui_comp)]["configurations"]["obj_name"]) + ".isChecked()"))]
                        elif type_obj == "lineEdit":
                            msg_in_bits = component_hsid[str(add)][gui_comp][str(eval("gui.ex." + str(component_hsid[str(add)][str(gui_comp)]["configurations"]["obj_name"]) + ".text()"))]
                        elif type_obj == str("spinBox") or type_obj == str("doubleSpinBox"):
                            msg_in_bits = component_hsid[str(add)][gui_comp][str(eval("gui.ex." + str(component_hsid[str(add)][str(gui_comp)]["configurations"]["obj_name"]) + ".value()"))]
                        else:
                            logger.write("error: obj_name = " + str(component_hsid[str(add)][gui_comp]["configurations"]["obj_name"]), status=False)
                            continue
                        curr_values = list(curr_values)
                        for bit in range(len(msg_in_bits)):
                            if msg_in_bits[bit] != "_":
                                curr_values[bit] = msg_in_bits[bit]

                if(curr_values == None):
                    continue

                curr_values = ''.join(curr_values).replace('_', '0')

                if add == "0x0136_ioExpenderU188_P1":
                    timeSleep = 1
                else:
                    timeSleep = 0.01

                if gui.ex.pushButton_Home_Welcome_lan.isChecked():
                    script_page.WriteRegister(Board_ID="LPTR", Address=add, Value=(str(hex(int(str(curr_values), 2)))[2:]), Timeout=timeSleep)
                elif (gui.ex.pushButton_Home_Welcome_spi.isChecked()):
                    spi.write(address=add, value=curr_values, Timeout=timeSleep)

            logger.write(str(cardName) + " Done.", True)

            return True

        except Exception as error:
            logger.write("[write_component] error: " + str(error), status=False)
            return False

    def save_component_script(self, NameOfCard):
        try:
            currNow = datetime.datetime.now()
            currDate = currNow.strftime("%d.%m.%y")
            currTime = currNow.strftime("%H-%M-%S")
            if (NameOfCard == "VA/LPTR1"):
                golden_script_file = {**json.load(open("Files/LPTR1_Components_Registers.json", "r"))["LPTR1"]["UHF_RX"],
                                      **json.load(open("Files/LPTR1_Components_Registers.json", "r"))["LPTR1"]["LBAND_RX"],
                                      **json.load(open("Files/LPTR1_Components_Registers.json", "r"))["LPTR1"]["TX"],
                                      **json.load(open("Files/" + "Module_Filter_Bank" + "_Components_Registers.json", "r"))["Module_Filter_Bank"]}
            else:
                golden_script_file = json.load(open("Files\\"+str(NameOfCard)+"_Components_Registers.json", "r"))[str(NameOfCard)]

            for add in golden_script_file:
                for gui_comp in golden_script_file[add]:
                    type_obj = golden_script_file[str(add)][gui_comp]["configurations"]["obj_name"].split("_")[0]
                    if type_obj == str("comboBox"):
                        golden_script_file[str(add)][gui_comp]["configurations"]["current_text"] = str(eval("gui.ex." + str(golden_script_file[str(add)][str(gui_comp)]["configurations"]["obj_name"]) + ".currentText()"))
                    elif type_obj == str("pushButton"):
                        golden_script_file[str(add)][gui_comp]["configurations"]["current_text"] = str(eval("gui.ex." + str(golden_script_file[str(add)][str(gui_comp)]["configurations"]["obj_name"]) + ".isChecked()"))
                    elif type_obj == str("lineEdit"):
                        golden_script_file[str(add)][gui_comp]["configurations"]["current_text"] = str(eval("gui.ex." + str(golden_script_file[str(add)][str(gui_comp)]["configurations"]["obj_name"]) + ".text()"))
                    elif type_obj == str("spinBox") or type_obj == str("doubleSpinBox"):
                        golden_script_file[str(add)][gui_comp]["configurations"]["current_text"] = str(eval("gui.ex." + str(golden_script_file[str(add)][str(gui_comp)]["configurations"]["obj_name"]) + ".value()"))
                    else:
                        break
            with open("Files/"+str(NameOfCard)+"/Configuration Scripts/[" + str(currDate) + " " + str(currTime) + "] -"+str(NameOfCard).replace("VA/", "") +"_Components_Registers.json", "w") as fp:
                json.dump(golden_script_file, fp, indent=1)
            logger.write("Configuration for " + str(NameOfCard)+" script saved !")
        except Exception as error:
            logger.write("[save_componenet_script] error: " + str(error), status=False)

    def load_file_to_component(self,NameOfCard):
        try:
            gui.file_is_loaded_compenet = False
            WriteStream.write(["load_file_componenet"])
            while not gui.file_is_loaded_compenet:
                time.sleep(0.1)

            configuration_script = json.load(open(str(gui.load_file_componenet[0]), "r"))

            for add in configuration_script:
                for gui_comp in configuration_script[add]:
                    type_obj = configuration_script[str(add)][gui_comp]["configurations"]["obj_name"].split("_")[0]
                    if type_obj == str("comboBox"):
                        WriteStream.write([str(configuration_script[str(add)][str(gui_comp)]["configurations"]["obj_name"]) + ".setCurrentText", configuration_script[str(add)][gui_comp]["configurations"]["current_text"]])
                    elif type_obj == str("pushButton"):
                        WriteStream.write([str(configuration_script[str(add)][str(gui_comp)]["configurations"]["obj_name"]) + ".setChecked", eval(configuration_script[str(add)][gui_comp]["configurations"]["current_text"].capitalize())])
                    elif type_obj == str("lineEdit"):
                        WriteStream.write([str(configuration_script[str(add)][str(gui_comp)]["configurations"]["obj_name"]) + ".setText", configuration_script[str(add)][gui_comp]["configurations"]["current_text"]])
                    elif type_obj == str("spinBox") or type_obj == str("doubleSpinBox"):
                        WriteStream.write([str(configuration_script[str(add)][str(gui_comp)]["configurations"]["obj_name"]) + ".setValue", float(configuration_script[str(add)][gui_comp]["configurations"]["current_text"])])
                    else:
                        break
            logger.write("Script configuration for"+str(NameOfCard)+" loaded successfully !")
        except Exception as error:
            logger.write("[load_file_to_componenet] error: " + str('{err}'.format(err=error)), status=False)

    def set_vertical_header_item(self, obj, text, index, curr_params, icon=False, show_toolTip=True):
        try:
            item = QtWidgets.QTableWidgetItem(str(text))
            if (icon):
                _icon = QtGui.QIcon()
                _icon.addPixmap(QtGui.QPixmap("./Files/Automation/Pictures/" + str(icon)), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                item.setIcon(_icon)
            WriteStream.write([str(obj) + ".setVerticalHeaderItem", index, item])

            if (show_toolTip):
                curr_toolTip = ""
                # curr_params = runningView.get_test_params(index)
                for curr_key in curr_params:
                    curr_toolTip += "<span style=\" font-size:10pt; font-weight:600; color:#00007f;\">" + str(curr_key) + ": </span>"
                    curr_toolTip += "<span style=\" font-size:10pt; text-decoration: underline; color:#00007f;\">" + str(curr_params[str(curr_key)]) + "</span>,<br>"
                WriteStream.write([str(obj) + ".verticalHeaderItem(" + str(index) + ").setToolTip", curr_toolTip[:-5]])  # -5 because remove ",<br>"

        except Exception as error:
            logger.write("[set_vertical_header_item] error: " + str(error), status=False)

    def table_set_cell(self, text, row, col, obj, color_text=None, color_background=None, center=True, enabled=True, icon=None):
        try:
            item = QtWidgets.QTableWidgetItem(str(text))

            if color_text is not None:
                brush_foreground = eval("QtGui.QBrush(QtGui.QColor" + str(color_text) + ")")
                brush_foreground.setStyle(QtCore.Qt.SolidPattern)
                item.setForeground(brush_foreground)

            if color_background is not None:
                brush_background = eval("QtGui.QBrush(QtGui.QColor" + str(color_background) + ")")
                brush_background.setStyle(QtCore.Qt.SolidPattern)
                item.setBackground(brush_background)

            if icon is not None:
                ico = QtGui.QIcon()
                # eval("icon.addPixmap(QtGui.QPixmap(\"" + str(icon) + "\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)")
                # item.setIcon(ico)
                ico.addPixmap(QtGui.QPixmap(":/img/img/detail.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                item.setIcon(ico)

            if center:
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)

            if not enabled:
                item.setFlags(QtCore.Qt.ItemIsEnabled)

            WriteStream.write([obj + ".setItem", row, col, item])

        except Exception as error:
            logger.write("table_result_set_cell] error: " + str('{err}'.format(err=error)), status=False)


class Script_Page:
    def __init__(self):
        gui.ex.buttonForGolden.setHidden(True)

        self.sock = None
        self.ListOfIndexGoldenScript = []
        self.WantToStop = False
        self.sizeOfGoldenScriptTable = 0
        self.golden_script_paths = []
        self.List_of_files_golden_script = []

        gui.ex.buttonForGolden.clicked.connect(self.funcforthread_load)

        gui.ex.reg_script_golden_script_add_btn.clicked.connect(lambda: threading.Thread(target=self.Add_File_To_GoldenScript).start())
        gui.ex.reg_script_script1_load_btn.clicked.connect(lambda: threading.Thread(target=self.loadFileToScript, args=[1]).start())
        gui.ex.reg_script_script1_run_btn.clicked.connect(lambda: threading.Thread(target=self.Run, args=[1]).start())
        gui.ex.reg_script_golden_script_table.itemClicked.connect(lambda: threading.Thread(target=self.UpdateIndex_Golden_Script).start())
        gui.ex.reg_script_script2_load_btn.clicked.connect(lambda: threading.Thread(target=self.loadFileToScript, args=[2]).start())
        gui.ex.reg_script_script2_run_btn.clicked.connect(lambda: threading.Thread(target=self.Run, args=[2]).start())
        gui.ex.reg_script_ping_pong_run_btn.clicked.connect(lambda: threading.Thread(target=self.Run_PingPong).start())
        gui.ex.reg_script_ping_pong_stop_btn.clicked.connect(lambda: threading.Thread(target=self.Stop_PingPong).start())
        gui.ex.reg_script_script1_refresh_btn.clicked.connect(lambda: threading.Thread(target=self.RefreshScript, args=[1]).start())
        gui.ex.reg_script_script2_refresh_btn.clicked.connect(lambda: threading.Thread(target=self.RefreshScript, args=[2]).start())
        gui.ex.reg_script_script1_remove_btn.clicked.connect(lambda: threading.Thread(target=self.Remove_Script, args=[1]).start())
        gui.ex.reg_script_script2_remove_btn.clicked.connect(lambda: threading.Thread(target=self.Remove_Script, args=[2]).start())
        gui.ex.reg_script_golden_script_run_btn.clicked.connect(lambda: threading.Thread(target=self.Run_Golden_Script).start())
        gui.ex.reg_script_golden_script_select_all_btn.clicked.connect(lambda: threading.Thread(target=self.Select_All_Golden_Script).start())
        gui.ex.reg_script_golden_script_remove_all_btn.clicked.connect(lambda: threading.Thread(target=self.Remove_All_Golden_Script).start())
        gui.ex.reg_script_golden_script_delete_btn.clicked.connect(lambda: threading.Thread(target=self.Delete_Golden_Script).start())
        gui.ex.reg_script_golden_script_refresh_btn.clicked.connect(lambda: threading.Thread(target=self.RefreshGoldenScript).start())
        gui.ex.reg_script_script1_open_file_btn.clicked.connect(lambda: threading.Thread(target=self.OpenFilesForScripts, args=["Script 1"]).start())
        gui.ex.reg_script_script2_open_file_btn.clicked.connect(lambda: threading.Thread(target=self.OpenFilesForScripts, args=["Script 2"]).start())

    def funcforthread_load(self):
        try:
            nb_row = self.sizeOfGoldenScriptTable
            nb_col = 1
            path = gui.load_Golden_Script[0].split("/")
            name_of_file = path[len(path) - 1]
            gui.ex.reg_script_golden_script_table.insertRow(nb_row)
            gui.ex.reg_script_golden_script_table.setColumnCount(nb_col)

            chkBoxItem = QtWidgets.QTableWidgetItem(name_of_file)

            chkBoxItem.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
            chkBoxItem.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
            chkBoxItem.setCheckState(QtCore.Qt.Unchecked)
            gui.ex.reg_script_golden_script_table.setItem(nb_row, 0, chkBoxItem)
            header = gui.ex.reg_script_golden_script_table.horizontalHeader()
            header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
            font = QFont()
            font.setBold(True)
            gui.ex.reg_script_golden_script_table.item(nb_row, 0).setFont(font)

            self.sizeOfGoldenScriptTable += 1

        except Exception as error:
            logger.write("[funcforthread_load]" + str(error), status=False)

    def OpenFilesForScripts(self, filter):
        try:
            if filter == "Script 1":
                webbrowser.open(str(gui.load_script[0]))
            else:
                webbrowser.open(str(gui.load_script_2[0]))
        except Exception as error:
            logger.write("[OpenFilesForScripts]" + str(error), status=False)

    def Remove_Script(self, filter):
        try:
            if filter == 1:
                WriteStream.write(["reg_script_script1_plain_rext_edit.clear()"])
                gui.ex.reg_script_script1_plain_rext_edit.clear()
                gui.script_isLoaded = False
                gui.load_script = ""
            else:
                WriteStream.write(["reg_script_script2_plain_rext_edit.clear()"])
                gui.script_isLoaded_2 = False
                gui.load_script_2 = ""
        except Exception as error:
            logger.write("[Remove_Script]" + str(error), status=False)

    def RefreshScript(self, filter):
        try:
            if filter == 1:
                file = open(str(gui.load_script[0]), "r")
                # get the file data into string
                contentFile = ""
                for currLine in file:
                    contentFile += currLine
                    # put the data in the plainText

                file.close()
                WriteStream.write(["reg_script_script1_plain_rext_edit.blockSignals", True])
                WriteStream.write(["reg_script_script1_plain_rext_edit.clear()"])
                WriteStream.write(["reg_script_script1_plain_rext_edit.setStyleSheet", "color: rgb(255, 255, 255);\n""font: 75 12pt \"MS Shell Dlg 2\";"])
                contentFile = contentFile.split("\n")
                counter = 1
                for i in contentFile:
                    WriteStream.write(["reg_script_script1_plain_rext_edit.insertPlainText", str(counter) + ". " + str(i) + "\n"])
                    counter += 1
                WriteStream.write(["reg_script_script1_plain_rext_edit.blockSignals", False])
            else:
                file = open(str(gui.load_script_2[0]), "r")
                # get the file data into string
                contentFile = ""
                for currLine in file:
                    contentFile += currLine
                    # put the data in the plainText
                file.close()
                WriteStream.write(["reg_script_script2_plain_rext_edit.blockSignals", True])
                WriteStream.write(["reg_script_script2_plain_rext_edit.clear()"])
                WriteStream.write(["reg_script_script2_plain_rext_edit.setStyleSheet", "color: rgb(255, 255, 255);\n""font: 75 12pt \"MS Shell Dlg 2\";"])
                contentFile = contentFile.split("\n")
                counter = 1
                for i in contentFile:
                    WriteStream.write(["reg_script_script2_plain_rext_edit.insertPlainText", str(counter) + ". " + str(i) + "\n"])
                    counter += 1
                WriteStream.write(["reg_script_script2_plain_rext_edit.blockSignals", False])
        except Exception as error:
            logger.write("[RefreshScript]" + str(error), status=False)

    def Run(self, filter):
        try:
            if filter == 1:
                if not gui.script_isLoaded:
                    time.sleep(0.1)
                else:
                    WriteStream.write(["reg_script_script1_run_btn.setEnabled", False])
                    WriteStream.write(["reg_script_script1_progressbar.setValue", 0])
                    # WriteStream.write(["plainTextEdit_Log.insertPlainText", " ***** Script 1 Started ***** \n"])
                    logger.write(" ***** Script 1 Started *****\n")
                    try:
                        with open(str(gui.load_script[0])) as reader, open(str(gui.load_script[0]), 'r+') as writer:
                            for line in reader:
                                if line.strip():
                                    writer.write(line)
                            writer.truncate()
                        exec(compile(open(str(gui.load_script[0]), "rb").read(), str(gui.load_script[0]), 'exec'))

                        WriteStream.write(["reg_script_script1_stop_btn.setChecked", False])
                        WriteStream.write(["reg_script_script2_stop_btn.setChecked", False])

                        print(str(gui.load_script[0]))
                    except Exception as error:
                        logger.write("Error RunFromScript: " + str('{err}'.format(err=error)), status=False)

                    logger.write(" ***** Script 1 Done ***** \n")
                    WriteStream.write(["reg_script_script1_run_btn.setEnabled", True])
                    WriteStream.write(["reg_script_script1_progressbar.setValue", 100])
            else:
                if not gui.script_isLoaded_2:
                    time.sleep(0.1)
                else:
                    # return the text on the plain text
                    WriteStream.write(["reg_script_script2_run_btn.setEnabled", False])
                    WriteStream.write(["reg_script_script2_progressbar.setValue", 0])
                    logger.write(" ***** Script 2 Started ***** \n")

                    try:
                        with open(str(gui.load_script_2[0])) as reader, open(str(gui.load_script_2[0]), 'r+') as writer:
                            for line in reader:
                                if line.strip():
                                    writer.write(line)
                            writer.truncate()
                        exec(compile(open(str(gui.load_script_2[0]), "rb").read(), str(gui.load_script_2[0]), 'exec'))

                        WriteStream.write(["reg_script_script1_stop_btn.setChecked", False])
                        WriteStream.write(["reg_script_script2_stop_btn.setChecked", False])

                    except Exception as error:
                        logger.write("Error Run_2_FromScript: " + str('{err}'.format(err=error)), status=False)
                    logger.write(" ***** Script 2 Done ***** \n")
                    WriteStream.write(["reg_script_script2_run_btn.setEnabled", True])
                    WriteStream.write(["reg_script_script2_progressbar.setValue", 100])
        except Exception as error:
            logger.write("[Run]" + str(error), status=False)

    def WriteRegister(self, Board_ID: str, Address: str, Value, Timeout: int):
        try:
            if gui.ex.reg_script_script1_stop_btn.isChecked() or gui.ex.reg_script_script2_stop_btn.isChecked():
                return

            if gui.ex.pushButton_Home_Welcome_lan.isChecked():

                try:
                    if self.sock is None:
                        self.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()),
                                         ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                         port=int(gui.ex.lineEdit_Configuration_computer_port.text()))

                    configurations = json.load(open("Files\\Messages\\GP_Set_REG.json", "r"))

                    Board_ID = Board_ID

                    board_file = json.load(open("Config\\Board_id_config.json", "r"))
                    keys = board_file.keys()
                    keys = list(keys)
                    for i in range(len(keys)):
                        key = str(keys[i])
                        if Board_ID == key:
                            value = (board_file[key]["Value"])
                            configurations["payload"]["Board_ID"] = value

                    Reg_Address = Address[2:].zfill(8)  # 0x80000004
                    # Reg_Address[2:] -> 80000004
                    configurations["payload"]["Reg_Address_Low"] = Reg_Address[4:8]
                    configurations["payload"]["Reg_Address_High"] = Reg_Address[:4]

                    currValue = Value
                    currValue = str(currValue).zfill(8)

                    configurations["payload"]["Register_Value_1"] = currValue[4:8]
                    configurations["payload"]["Register_Value_2"] = currValue[:4]

                    packet = Packet(packet=configurations)
                    self.sock.send(packet=packet.packetBuilded)
                    packetRecive = self.sock.receive()

                    time.sleep(float(Timeout))

                except Exception as error:
                    logger.write("[WriteRegister]" + "LAN" + str(error), status=False)

            if gui.ex.pushButton_Home_Welcome_spi.isChecked():
                try:
                    spi.write(address="0x" + Address[-4:], value=str(bin(int(Value, 16)))[2:].zfill(16))
                    time.sleep(float(Timeout))

                except Exception as error:
                    logger.write("[WriteRegister]" + "SPI" + str(error))
        except Exception as error:
            logger.write("[WriteRegister] error: " + str(error), status=False)

    def ReadRegister(self, Board_ID: str, Address: str, Timeout: int):
        try:
            if gui.ex.reg_script_script1_stop_btn.isChecked() or gui.ex.reg_script_script2_stop_btn.isChecked():
                return

            if gui.ex.pushButton_Home_Welcome_lan.isChecked():

                try:
                    if self.sock is None:
                        self.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()),
                                         ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                         port=int(gui.ex.lineEdit_Configuration_computer_port.text()))

                    configurations = json.load(open("Files\\Messages\\Packet_GP_Get_REG.json", "r"))

                    Board_ID = Board_ID
                    board_file = json.load(open("Config\\Board_id_config.json", "r"))
                    keys = board_file.keys()
                    keys = list(keys)
                    for i in range(len(keys)):
                        key = str(keys[i])
                        if Board_ID == key:
                            value = (board_file[key]["Value"])
                            configurations["payload"]["Board_ID"] = value
                    Reg_Address = Address[2:].zfill(8)
                    # Reg_Address[2:] -> 80000004
                    configurations["payload"]["Reg_Address_Low"] = Reg_Address[4:8]
                    configurations["payload"]["Reg_Address_High"] = Reg_Address[:4]

                    packet = Packet(packet=configurations)

                    self.sock.send(packet=packet.packetBuilded)
                    # recive message
                    packetRecive = self.sock.receive()
                    # put the value in the GUI
                    value = packetRecive[60:68]
                    value = hex(int(value[4:8] + value[:4], 16))[2:]
                    logger.write("The value is :" + str(value))
                    time.sleep(float(Timeout))
                    return value
                except Exception as error:
                    logger.write("[ReadRegister]" + "Current index 0" + str(error), status=False)
            elif gui.ex.pushButton_Home_Welcome_spi.isChecked():

                try:
                    value = spi.read(address="0x" + Address[-4:])
                    time.sleep(float(Timeout))
                    return value
                except Exception as error:
                    logger.write("[ReadRegister]" + "[Current index 1] error: " + str(error))
        except Exception as error:
            logger.write("[Read_Register] error: " + str(error), status=False)

    def RefreshGoldenScript(self):

        # for i in range(1, 5):
        #     self.ReadRegister("LPTR", "0x8000005E", 0.1)
        #     self.ReadRegister("LPTR", "0x8000004E", 0.1)
        #     self.ReadRegister("LPTR", "0x80000004", 0.1)
        #     self.ReadRegister("LPTR", "0x80000010", 0.1)
        try:
            file = open(str(gui.load_Golden_Script[0]), "r")
            path = gui.load_Golden_Script[0].split("/")
            name_of_file = path[len(path) - 1]
            file.close()

            for i in range(len(self.ListOfIndexGoldenScript)):
                chkBoxItem = QtWidgets.QTableWidgetItem(name_of_file)

                chkBoxItem.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                chkBoxItem.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
                chkBoxItem.setCheckState(QtCore.Qt.Unchecked)
                WriteStream.write(["reg_script_golden_script_table.setItem", i, 0, chkBoxItem])
                header = gui.ex.reg_script_golden_script_table.horizontalHeader()
                header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
                font = QFont()
                font.setBold(True)
                gui.ex.reg_script_golden_script_table.item(i, 0).setFont(font)

        except Exception as error:
            logger.write("[RefreshGoldenScript]" + str(error), status=False)

    def Stop_PingPong(self):
        try:
            self.WantToStop = True
            logger.write("Script Stopped")
        except Exception as error:
            logger.write("[Stop_PingPong] error: " + str(error), status=False)

    def UpdateIndex_Golden_Script(self):
        try:
            for i in range(gui.ex.reg_script_golden_script_table.rowCount()):
                if gui.ex.reg_script_golden_script_table.item(i, 0).checkState() == 2 and i not in self.ListOfIndexGoldenScript:
                    self.ListOfIndexGoldenScript.append(i)
                elif gui.ex.reg_script_golden_script_table.item(i, 0).checkState() == 0 and i in self.ListOfIndexGoldenScript:
                    self.ListOfIndexGoldenScript.remove(i)
            print("List of index Golden script = " + str(self.ListOfIndexGoldenScript))

            return self.ListOfIndexGoldenScript

        except Exception as error:
            logger.write("[UpdateIndex_Golden_Script] error: " + str(error))

    def Delete_Golden_Script(self):
        try:
            currRows = sorted(self.UpdateIndex_Golden_Script())
            for i in range(len(currRows) - 1, -1, -1):
                text = gui.ex.reg_script_golden_script_table.item(int(currRows[i]), 0).text()
                WriteStream.write(["reg_script_golden_script_table.removeRow", int(currRows[i])])
                self.ListOfIndexGoldenScript.remove(int(currRows[i]))
                self.sizeOfGoldenScriptTable -= 1
                self.List_of_files_golden_script = [x for x in self.List_of_files_golden_script if x != text]
                self.golden_script_paths = [y for y in self.golden_script_paths if text not in y]

        except Exception as error:
            logger.write("[Delete_Golden_Script]" + str(error))

    def Remove_All_Golden_Script(self):
        try:
            for i in range(gui.ex.reg_script_golden_script_table.rowCount()):
                gui.ex.reg_script_golden_script_table.item(i, 0).setCheckState(0)

            gui.ex.reg_script_golden_script_table.insertRow(gui.ex.reg_script_golden_script_table.rowCount())
            gui.ex.reg_script_golden_script_table.setRowCount(gui.ex.reg_script_golden_script_table.rowCount() - 1)

            self.UpdateIndex_Golden_Script()

        except Exception as error:
            logger.write("[Remove_All_Golden_Script]" + str(error))

    def Select_All_Golden_Script(self):
        try:
            for i in range(gui.ex.reg_script_golden_script_table.rowCount()):
                gui.ex.reg_script_golden_script_table.item(i, 0).setCheckState(2)

            gui.ex.reg_script_golden_script_table.insertRow(gui.ex.reg_script_golden_script_table.rowCount())
            gui.ex.reg_script_golden_script_table.setRowCount(gui.ex.reg_script_golden_script_table.rowCount() - 1)
            self.UpdateIndex_Golden_Script()
        except Exception as error:
            logger.write("[Select_All_Golden_Script]" + str(error), status=False)

    def Add_File_To_GoldenScript(self):
        try:
            gui.GoldenScript_isLoaded = False
            WriteStream.write(["GoldenScript"])

            while not gui.GoldenScript_isLoaded:
                time.sleep(0.1)
            path = gui.load_Golden_Script[0].split("/")
            name_of_file = path[len(path) - 1]
            if len(self.List_of_files_golden_script) > 0:
                for i in range(len(self.List_of_files_golden_script)):
                    if self.List_of_files_golden_script[i] == str(name_of_file):
                        logger.write("File in golden script already exists.")
                        return

            self.List_of_files_golden_script.append(str(name_of_file))
            self.golden_script_paths.append(str(gui.load_Golden_Script[0]))

            print("Golden script path is " + str(gui.load_Golden_Script[0]))
            file = open(str(gui.load_Golden_Script[0]), "r")

            gui.ex.buttonForGolden.click()

        except Exception as error:
            logger.write("[Add_File_To_GoldenScript]" + str(error), status=False)

    def Run_Golden_Script(self):
        try:

            WriteStream.write(["reg_script_golden_script_progressbar.setValue", 0])
            for i in range(len(self.ListOfIndexGoldenScript)):
                file_To_Run = str(self.golden_script_paths[self.ListOfIndexGoldenScript[i]]).split("/")
                file_To_Run = file_To_Run[len(file_To_Run) - 1]
                # file_To_Run = str(self.golden_script_paths[self.ListOfIndexGoldenScript[i]]).split("/")[len(file_To_Run)-1]
                run = self.golden_script_paths[self.ListOfIndexGoldenScript[i]]
                WriteStream.write(["plainTextEdit_Log.insertPlainText", " ******* Golden Script :" + str(file_To_Run) + " Started *******"])
                WriteStream.write(["plainTextEdit_Log.setStyleSheet", "color: rgb(255, 255, 255);\n""font: 75 8pt \"MS Shell Dlg 2\";"])
                WriteStream.write(["plainTextEdit_Log.insertPlainText", "\n\n"])
                WriteStream.write(["plainTextEdit_Log.setStyleSheet", "color: rgb(255, 255, 255);\n""font: 75 8pt \"MS Shell Dlg 2\";"])
                exec(compile(open(str(run), "rb").read(), str(run), 'exec'))
                WriteStream.write(["plainTextEdit_Log.insertPlainText", " ******* Golden Script :" + str(file_To_Run) + " Done *******"])
                WriteStream.write(["plainTextEdit_Log.setStyleSheet", "color: rgb(255, 255, 255);\n""font: 75 8pt \"MS Shell Dlg 2\";"])
                WriteStream.write(["plainTextEdit_Log.insertPlainText", "\n\n"])
                WriteStream.write(["plainTextEdit_Log.setStyleSheet", "color: rgb(255, 255, 255);\n""font: 75 8pt \"MS Shell Dlg 2\";"])
                WriteStream.write(["reg_script_golden_script_progressbar.setValue", 100])

        except Exception as error:
            logger.write("[Run_Golden_Script]" + str(error), status=False)

    def Run_PingPong(self):
        try:
            gui.ex.reg_script_ping_pong_lines_script1_error_label.setText("")
            gui.ex.reg_script_ping_pong_lines_script1_error_label.setText("")
            self.WantToStop = False
            open('Files\\Messages\\FileForScript1.py', 'w').close()
            open('Files\\Messages\\FileForScript2.py', 'w').close()

            try:
                if str(gui.load_script[0]) != "":
                    file = open(str(gui.load_script[0]), "r")
                    print(str(gui.load_script[0]))
                    contentFile = ""
                    counter_Rows_Script1 = 0
                    for currLine in file:
                        contentFile += currLine
                        counter_Rows_Script1 += 1
                    print(counter_Rows_Script1)

            except Exception as error:
                logger.write("[Run_PingPong]" + "load script 1" + str(error), status=False)

            try:
                if str(gui.load_script_2[0]) != "":
                    file_2 = open(str(gui.load_script_2[0]), "r")
                    print(str(gui.load_script_2[0]))
                    contentFile_2 = ""
                    counter_Rows_Script2 = 0
                    for currLine in file_2:
                        contentFile_2 += currLine
                        counter_Rows_Script2 += 1
                    print(counter_Rows_Script2)

            except Exception as error:
                logger.write("[Run_PingPong]" + "load script 2" + str(error), status=False)

            # get the file data into string

            Lines_script1 = gui.ex.reg_script_ping_pong_lines_script1_line_edit.text().split(",")
            lenOfLines_1 = int(len(Lines_script1))
            for i in range(lenOfLines_1):
                if Lines_script1[i] == '' or Lines_script1[i] == ' ' or Lines_script1[i] == ',':
                    continue
                if "-" in Lines_script1[i] and "#" not in Lines_script1[i] and "end" not in Lines_script1[i]:
                    rng = [int(i) for i in Lines_script1[i].split("-")]
                    if rng[0] > rng[1]:
                        gui.ex.reg_script_ping_pong_lines_script1_error_label.setText("Range Error")
                        continue
                    if rng[1] > counter_Rows_Script1:
                        gui.ex.reg_script_ping_pong_lines_script1_error_label.setText("Size Error")
                        continue
                    rng[1] += 1
                    for j in range(int(rng[0]), int(rng[1])):
                        Lines_script1.append(j)
                if "1-end" in Lines_script1[i] or "1-#" in Lines_script1[i]:
                    j = 1
                    while j < int(counter_Rows_Script1) + 1:
                        Lines_script1.append(j)
                        j += 1

            index = 0
            while index < len(Lines_script1):
                if "-" in str(Lines_script1[index]):
                    Lines_script1.remove(Lines_script1[index])
                else:
                    index += 1

            for i in range(len(Lines_script1)):
                if Lines_script1[i] == '':
                    continue
                Lines_script1[i] = int(Lines_script1[i])
            # Lines_script1=list(set(Lines_script1))
            Lines_script1 = action.RemoveDuplicateFromList(Lines_script1)
            print(Lines_script1)

            Lines_script2 = gui.ex.reg_script_ping_pong_lines_script2_line_edit.text().split(",")
            lenOfLines_2 = int(len(Lines_script2))
            for i in range(lenOfLines_2):
                if Lines_script2[i] == '' or Lines_script2[i] == ' ' or Lines_script2[i] == ',':
                    continue
                if "-" in Lines_script2[i] and "#" not in Lines_script2[i] and "end" not in Lines_script2[i]:
                    rng = [int(i) for i in Lines_script2[i].split("-")]
                    if rng[0] > rng[1]:
                        gui.ex.reg_script_ping_pong_lines_script2_error_label.setText("Range Error")
                        continue
                    if rng[1] > counter_Rows_Script2:
                        gui.ex.reg_script_ping_pong_lines_script2_error_label.setText("Size Error")
                        continue
                    rng[1] += 1
                    for j in range(int(rng[0]), int(rng[1])):
                        Lines_script2.append(j)
                if "1-end" in Lines_script2[i] or "1-#" in Lines_script2[i]:
                    k = 1
                    while k < int(counter_Rows_Script2) + 1:
                        Lines_script2.append(k)
                        k += 1

            index = 0
            while index < len(Lines_script2):
                if "-" in str(Lines_script2[index]):
                    Lines_script2.remove(Lines_script2[index])
                else:
                    index += 1

            for i in range(len(Lines_script2)):
                if Lines_script2[i] == '':
                    continue
                Lines_script2[i] = int(Lines_script2[i])

            Lines_script2 = action.RemoveDuplicateFromList(Lines_script2)
            print(Lines_script2)

            # put the lines in the file in list

            ListOfLinesScript1 = []
            ListOfLinesScript2 = []

            try:  # Script 1 #############
                if str(gui.load_script[0]) != "":

                    script1 = open(str(gui.load_script[0]), "r").readlines()
                    print("script1 = " + str(script1))

                    counter = 1
                    for line in script1:
                        if counter in Lines_script1:
                            ListOfLinesScript1.append(line)
                        counter += 1

                    print("ListOfLinesScript1 = " + str(ListOfLinesScript1))

                    tempFile = open("Files\\Messages\\FileForScript1.py", "w")
                    for i in ListOfLinesScript1:
                        tempFile.write(i)
                    tempFile.close()

            except Exception as error:
                # logger.write("[Run_PingPong]" + " script 1" + str(error), status=False)
                pass

            try:  # script 2 #########
                if str(gui.load_script_2[0]) != "":
                    script2 = open(str(gui.load_script_2[0]), "r").readlines()
                    print("script2 = " + str(script2))
                    counter2 = 1
                    for line in script2:
                        if counter2 in Lines_script2:
                            ListOfLinesScript2.append(line)
                        counter2 += 1

                    print("ListOfLinesScript2 = " + str(ListOfLinesScript2))

                    tempFile2 = open("Files\\Messages\\FileForScript2.py", "w")
                    for i in ListOfLinesScript2:
                        tempFile2.write(i)
                    tempFile2.close()

            except Exception as error:
                # logger.write("[Run_PingPong]" + " script 2" + str(error), status=False)
                pass
            
            # run the files with the scripts:
            try:
                WriteStream.write(["reg_script_ping_pong_progressbar.setValue", 0])
                i = 1

                while not self.WantToStop and i <= int(gui.ex.reg_script_ping_pong_iterations_line_edit.text()):
                    WriteStream.write(["plainTextEdit_Log.insertPlainText", " ***** Lines From Script 1 Started ***** \n"])
                    exec(compile(open(str("Files\\Messages\\FileForScript1.py"), "rb").read(), str("Files\\Messages\\FileForScript1.py"), 'exec'))
                    WriteStream.write(["plainTextEdit_Log.insertPlainText", " ***** Lines From Script 1 1 Done ***** \n\n"])
                    WriteStream.write(["plainTextEdit_Log.insertPlainText", " ***** Lines From Script 2 Started ***** \n"])
                    exec(compile(open(str("Files\\Messages\\FileForScript2.py"), "rb").read(), str("Files\\Messages\\FileForScript2.py"), 'exec'))
                    WriteStream.write(["plainTextEdit_Log.insertPlainText", " ***** Lines From Script 2 Done ***** \n"])

                    if self.WantToStop:
                        sys.exit()

                    WriteStream.write(["reg_script_ping_pong_progressbar.setValue", (i / int(gui.ex.reg_script_ping_pong_iterations_line_edit.text())) * 100])
                    i += 1

                WriteStream.write(["reg_script_ping_pong_progressbar.setValue", 100])

            except Exception as error:
                # logger.write("[Run_PingPong]" + " All scripts" + str(error), status=False)
                pass
                
        except Exception as error:
            logger.write("[Run_PingPong] error: " + str(error), status=False)

    def loadFileToScript(self, filter):
        try:
            if filter == 1:
                gui.script_isLoaded = False
                WriteStream.write(["script_load"])
                while not gui.script_isLoaded:
                    time.sleep(0.1)
                print("gui.load_script= " + str(gui.load_script))
                if gui.load_script[0] != '':
                    file = open(str(gui.load_script[0]), "r")
                    # get the file data into string
                    contentFile = ""
                    for currLine in file:
                        contentFile += currLine
                        # put the data in the plainText
                    file.close()
                    print("file.close()")
                    print("contentFile = " + str(contentFile))
                    WriteStream.write(["reg_script_script1_plain_rext_edit.blockSignals", True])
                    WriteStream.write(["reg_script_script1_plain_rext_edit.clear()"])
                    WriteStream.write(["reg_script_script1_plain_rext_edit.setStyleSheet", "color: rgb(255, 255, 255);\n""font: 75 12pt \"MS Shell Dlg 2\";"])
                    contentFile = contentFile.split("\n")
                    counter = 1
                    for i in contentFile:
                        WriteStream.write(["reg_script_script1_plain_rext_edit.insertPlainText", str(counter) + ". " + str(i) + "\n"])
                        counter += 1
                    WriteStream.write(["reg_script_script1_plain_rext_edit.blockSignals", False])
            else:
                gui.script_isLoaded_2 = False
                WriteStream.write(["script_load_2"])
                while not gui.script_isLoaded_2:
                    time.sleep(0.1)
                print("gui.load_script_2= " + str(gui.load_script_2))
                file = open(str(gui.load_script_2[0]), "r")
                # get the file data into string
                contentFile = ""
                for currLine in file:
                    contentFile += currLine
                    # put the data in the plainText
                file.close()
                WriteStream.write(["reg_script_script2_plain_rext_edit.blockSignals", True])
                WriteStream.write(["reg_script_script2_plain_rext_edit.clear()"])
                WriteStream.write(["reg_script_script2_plain_rext_edit.setStyleSheet", "color: rgb(255, 255, 255);\n""font: 75 12pt \"MS Shell Dlg 2\";"])
                contentFile = contentFile.split("\n")
                counter = 1
                for i in contentFile:
                    WriteStream.write(["reg_script_script2_plain_rext_edit.insertPlainText", str(counter) + ". " + str(i) + "\n"])
                    counter += 1
                WriteStream.write(["reg_script_script2_plain_rext_edit.blockSignals", False])
        except Exception as error:
            logger.write("[loadFileToScript]" + str(error), status=False)


class Sock:

    def __init__(self, ip_computer: str, ip_device: str, port: int):
        self.mySock = None
        self.ip_computer = ip_computer
        self.ip_device = ip_device
        self.port = port
        self.timeout = 1

        self.isConnected = False
        self.error = ""

        try:
            self.mySock = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
            self.mySock.bind((self.ip_computer, self.port))
            if self.timeout != 1.1:
                self.mySock.settimeout(int(self.timeout))
            else:
                logger.write("Socket is not open")

            self.isConnected = True
            print("[Sock init] self.isConnected = " + str(self.isConnected))

        except Exception as error:
            logger.write("[Socket] open socket error:" + str('{err}'.format(err=error)), status=False)
            self.error = error

    def close(self):
        try:
            self.mySock.close()
        except Exception as error:
            logger.write("Sock [close] error: " + str(error), status=False)

    def send(self, packet):
        try:
            self.mySock.sendto(packet, (self.ip_device, self.port))
            logger.write("packet was sent successfully")
        except Exception as error:
            logger.write("[send]" + str(error), status=False)

    def receive(self, buffer_size=65536):
        try:
            data, addr = self.mySock.recvfrom(buffer_size)  # buffer size is 1024 bytes # 32768 # 65536 # 131072 # 262144
            msg = ""
            for c in data:
                msg += str(hex(c)).replace("0x", "").zfill(2)

            return self.received_stringToNetOrdered(msg)
        except Exception as error:
            print("[No Response Received] error:" + str('{err}'.format(err=error)))
            logger.write("No Response Recived", status=False)

    def receive_TP(self, numOfReceive=1, buffer_size=65536):
        try:
            packetsReceived = []
            try:
                data, addr = self.mySock.recvfrom(buffer_size)  # buffer size is 1024 bytes # 32768 # 65536 # 131072 # 262144
                packetsReceived.append(data)
            except Exception as error:
                logger.write("[Socket -> receive " + "] [ip= " + str(self.ip_device) + "] [port= " + str(self.port) + "] [timeout= " + str(self.timeout) + "] " + str('{err}'.format(err=error)), status=False)
                return []
            return self.stringToNetOrdered_packets_receive(packetsReceived)
        except Exception as error:
            logger.write("[receive] error:" + str('{err}'.format(err=error)), status=False)
            return []

    def stringToNetOrdered_packets_receive(self, listOfPackets):
        try:
            ans = []
            for packet in listOfPackets:
                msg = ""
                for c in packet:
                    msg += str(hex(c)).replace("0x", "").zfill(2)
                ans.append(self.received_stringToNetOrdered(msg))
            return ans
        except Exception as error:
            logger.write("[stringToNetOrdered_packets_receive] error: " + str(error), status=False)

    def received_stringToNetOrdered(self, s):
        try:
            return ''.join([''.join([s[i + 2], s[i + 3], s[i], s[i + 1]]) for i in range(0, len(s), 4)])
        except Exception as error:
            logger.write("[received_stringToNetOrdered] error: " + str(error), status=False)

    def received_stringToNetOrdered(self, Recive):
        try:
            logger.write("Recive = " + str(Recive))
            return ''.join([''.join([Recive[i + 2], Recive[i + 3], Recive[i], Recive[i + 1]]) for i in range(0, len(Recive), 4)])
        except Exception as error:
            logger.write("[received_stringToNetOrdered] error: " + str(error), status=False)


class Packet:  # this packet build the message
    def __init__(self, packet):
        self.header = packet["header"]  # type Dict
        self.payload = packet["payload"]  # type Dict
        self.footer = packet["footer"]  # type Dict

        self.header_appand = ""  # type STR
        self.payload_appand = ""  # type STR
        self.footer_appand = ""  # type STR

        self.packet = ""  # type STR
        self.packetBuilded = None  # type bytearray

        try:
            self.header_appand = "".join([word for word in self.header.values()])
            self.buildPayload(self.payload)
            self.footer_appand = "".join([word for word in self.footer.values()])

            print("self.header_appand= " + str(len(self.header_appand)))
            print("self.payload_appand= " + str(len(self.payload_appand)))
            print("self.footer_appand= " + str(len(self.footer_appand)))

            self.packet = str(self.header_appand) + str(self.payload_appand) + str(self.footer_appand)
            logger.write("Packet =" + str(self.packet))
            self.packetBuilded = self.stringToNetOrderedByteArray(self.packet)
            print(self.packetBuilded)

        except Exception as error:
            logger.write("[Packet] error:" + str('{err}'.format(err=error)), status=False)

    def buildPayload(self, dict):
        try:
            for word in dict.values():
                if type(word) == str:
                    self.payload_appand += str(word)
                else:
                    self.buildPayload(word)

        except Exception as error:
            logger.write("Error buildPayload: " + str('{err}'.format(err=error)), status=False)

    def printPacket(self):
        try:
            logger.write("header (" + str(int(len(self.header) * 2)) + " bytes) = " + str(self.header))
            logger.write("payload (" + str(int(len(self.payload_appand) / 2)) + " bytes) = " + str(self.payload))
            logger.write("footer (" + str(int(len(self.footer) * 2)) + " bytes) = " + str(self.footer))

            with open('shirrrrrr.json', 'w') as to:
                json.dump(self.payload, to, indent=2)

            logger.write("packet (" + str(int(len(self.packet) / 2)) + " bytes) = " + str(self.packet))
            logger.write("packetBuilded = " + str(self.packetBuilded))

        except Exception as error:
            logger.write("Error printPacket: " + str('{err}'.format(err=error)), status=False)

    def byteSize(self):
        return str(int(len(self.packetBuilded)))

    def stringToNetOrderedByteArray(self, s):
        try:
            if len(s) % 4 != 0:
                s = s[:2] + "00" + s[2:]
                byte = bytearray.fromhex(''.join([''.join([s[i + 2], s[i + 3], s[i], s[i + 1]]) for i in range(0, len(s), 4)]))[1:]
                return byte
            else:
                return bytearray.fromhex(''.join([''.join([s[i + 2], s[i + 3], s[i], s[i + 1]]) for i in range(0, len(s), 4)]))
        except Exception as error:
            logger.write("[stringToNetOrderedByteArray]" + str(error), status=False)


class SPI:
    def __init__(self):
        self.device = ""
        self.connect = False

    def check_connection(self):
        try:
            usb_list = []
            wmi = win32com.client.GetObject("winmgmts:")
            for usb in wmi.InstancesOf("Win32_USBHub"):
                usb_list.append(usb.description)
            if "FT4222H Interface B" in usb_list or "FT4222H Interface A" in usb_list:
                if(type(self.device) != str):
                    self.close()

                self.openLink()
            else:
                self.device = ""
                self.connect = False
                logger.write("Error - no device connected (SPI)",False)

            logger.write("[check_connection] usb_list = " + str(usb_list))

        except Exception as error:
            logger.write("[check_connection] error: " + str(error))

    def openLink(self):
        try:
            print(self.connect)
            if not self.connect:
                self.device = ft4222.openByDescription(gui.ex.comboBox_Configuration_spi_port.currentText())
                mode = ft4222.SPIMaster.Mode(1)  # SINGLE
                clock = ft4222.SPIMaster.Clock(gui.ex.comboBox_Configuration_spi_clock.currentIndex())  # DIV_64: 1/64 System Clock
                cpol = ft4222.SPI.Cpol(gui.ex.comboBox_Configuration_spi_active.currentIndex())  # IDLE_LOW
                cpha = ft4222.SPI.Cpha(gui.ex.comboBox_Configuration_spi_lead.currentIndex())  # CLK_LEADING
                ssoMap = ft4222.SPIMaster.SlaveSelect(gui.ex.comboBox_Configuration_spi_sso.currentIndex())  # SS1: Slave select 1

                ft4222.FT4222.spiMaster_Init(self.device, mode, clock, cpol, cpha, ssoMap)
                self.connect = True

                return self.device

        except Exception as error:
            self.connect = False
            logger.write("spi Error: " + str('{err}'.format(err=error)))
            logger.write("Please click on Reconnecting and check your ")

    def read(self, address):  # address=0xffff
        try:
            msg = {
                "Message_ID": "00",
                "Address": address[2:].split("_")[0].zfill(4),
                "Resereved_1": "0000",
                "Resereved_2": "0000"
            }

            packet = bytearray.fromhex(msg["Message_ID"] + msg["Address"] + msg["Resereved_1"] + msg["Resereved_2"])

            if not spi.connect:
                spi.openLink()

            if spi.connect:
                resp = ft4222.FT4222.spiMaster_SingleReadWrite(spi.device, packet, True)

                msg = ""
                for c in resp:
                    msg += str(hex(c)).replace("0x", "").zfill(2)

                value = hex(int(msg[10:14], 16))[2:]

                logger.write("[SPI_read] [address: " + str(address) + "] [resp: " + str(resp) + "] [value: " + str(value) + "] Packet was sent successfully")

                return value

            return False

        except Exception as error:
            logger.write("[spi read]  error: " + str(error))

    def write(self, address, value, Timeout=0.01):  # address=0xffff, value=1111111111111111
        try:

            if len(str(value)) != 16:
                logger.write("[SPI_write] [address: " + str(address) + "] [value: " + str(value) + "] value error")
                return

            msg = {
                "Message_ID": "10",
                "Address": address[2:].split("_")[0].zfill(4),
                "Value": str(hex(int(str(value), 2)))[2:].zfill(4)
            }

            packet = bytearray.fromhex(msg["Message_ID"] + msg["Address"] + msg["Value"])

            if not spi.connect:
                spi.openLink()

            if spi.connect:
                resp = ft4222.FT4222.spiMaster_SingleReadWrite(spi.device, packet, True)
                value = (str(hex(int(str(value), 2)))[2:])
                logger.write("[SPI_write] [address: " + str(address) + "] [value: " + str(value) + "] [resp: " + str(resp) + "] Packet was sent successfully")
                time.sleep(Timeout)
                return resp

            return False

        except Exception as error:
            logger.write("[spi write]  error: " + str(error))

    def close(self):
        try:
            ft4222.FT4222.close(self.device)
            self.connect = False
        except Exception as error:
            logger.write("SPI [close] error: " + str(error), status=False)


class Home_Page:
    def __init__(self):
        gui.ex.pushButton_checkConnection_SPI_Lptr1.setHidden(True)
        gui.ex.main_tab_widget.tabBar().hide()
        gui.ex.home_tab_widget.tabBar().hide()
        gui.ex.main_tab_widget.setCurrentIndex(0)
        gui.ex.home_tab_widget.setCurrentIndex(0)

        gui.ex.comboBox_Home_SelectPlatform_select_device_top_left.activated.connect(lambda: threading.Thread(target=self.Manage_Pictures_Of_Cards, args=["comboBox_Home_SelectPlatform_select_device_top_left"]).start())
        gui.ex.comboBox_Home_SelectPlatform_select_device_top_right.activated.connect(lambda: threading.Thread(target=self.Manage_Pictures_Of_Cards, args=["comboBox_Home_SelectPlatform_select_device_top_right"]).start())
        gui.ex.comboBox_Home_SelectPlatform_select_device_lower_left.activated.connect(lambda: threading.Thread(target=self.Manage_Pictures_Of_Cards, args=["comboBox_Home_SelectPlatform_select_device_lower_left"]).start())
        gui.ex.comboBox_Home_SelectPlatform_select_device_lower_right.activated.connect(lambda: threading.Thread(target=self.Manage_Pictures_Of_Cards, args=["comboBox_Home_SelectPlatform_select_device_lower_right"]).start())

        gui.ex.pushButton_Home_SelectPlaform_device_picture_top_left.clicked.connect(lambda: threading.Thread(target=self.Manage_To_component_pages, args=["pushButton_Home_SelectPlaform_device_picture_top_left"]).start())
        gui.ex.pushButton_Home_SelectPlaform_device_picture_top_right.clicked.connect(lambda: threading.Thread(target=self.Manage_To_component_pages, args=["pushButton_Home_SelectPlaform_device_picture_top_right"]).start())
        gui.ex.pushButton_Home_SelectPlaform_device_picture_lower_left.clicked.connect(lambda: threading.Thread(target=self.Manage_To_component_pages, args=["pushButton_Home_SelectPlaform_device_picture_lower_left"]).start())
        gui.ex.pushButton_Home_SelectPlaform_device_picture_lower_right.clicked.connect(lambda: threading.Thread(target=self.Manage_To_component_pages, args=["pushButton_Home_SelectPlaform_device_picture_lower_right"]).start())

        gui.ex.pushButton_Home_Welcome_lan.clicked.connect(lambda: threading.Thread(target=self.manageBar, args=["pushButton_Home_Welcome_lan"]).start())
        gui.ex.pushButton_Home_Welcome_spi.clicked.connect(lambda: threading.Thread(target=self.manageBar, args=["pushButton_Home_Welcome_spi"]).start())
        gui.ex.pushButton_Home_Welcome_connect.clicked.connect(lambda: threading.Thread(target=self.ip_to_table if gui.ex.pushButton_Home_Welcome_lan.isChecked() else self.select_platform(connection="SPI")).start())
        gui.ex.pushButton_Home_Welcome_search_ip.clicked.connect(lambda: threading.Thread(target=self.select_platform(connection="LAN")).start())
        gui.ex.pushButton_Home_Welcome_refresh_ip.clicked.connect(lambda: threading.Thread(target=self.ip_to_table).start())

    def ip_to_table(self):
        try:
            WriteStream.write(["pushButton_checkConnection_SPI_Lptr1.setHidden", True])
            WriteStream.write(["tableWidget_Home_Welcome_ip_lan.setRowCount", 0])
            self.NumOfRows = 0
            gui.ex.main_tab_widget.setCurrentIndex(0)
            gui.ex.home_tab_widget.setCurrentIndex(1)
            protocol_name = "LAN"
            WriteStream.write(["protocol_index_btn.setHidden", False])
            WriteStream.write(["protocol_index_btn.setText", protocol_name + "\nConnection Type"])

            devices = []
            list_of_ip = []
            os.popen('arp -d')
            try:
                for device in os.popen('arp -a'):
                    devices.append(device)
            except Exception as error:
                logger.write("[ip_to_table] os.popen error: " + str(error), status=False)

            devices = list(devices)
            for currIP in devices:
                currIP = str(currIP).split(" ")
                for i in range(len(currIP)):
                    if '.' in currIP[i]:
                        list_of_ip.append(currIP[i])

            for i in range(len(list_of_ip)):
                print(list_of_ip[i])
                WriteStream.write(["tableWidget_Home_Welcome_ip_lan.insertRow", self.NumOfRows])

                self.NumOfRows += 1

                chkBoxItem = QtWidgets.QTableWidgetItem(str(""))
                chkBoxItem.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                chkBoxItem.setCheckState(QtCore.Qt.CheckState(0))
                WriteStream.write(["tableWidget_Home_Welcome_ip_lan.setItem", i, 0, chkBoxItem])
                chkBoxItem.setForeground(QBrush(QColor(255, 255, 255)))

                item = QtWidgets.QTableWidgetItem(str(list_of_ip[i]))
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
                # item.setFlags(QtCore.Qt.ItemIsEnabled)
                WriteStream.write(["tableWidget_Home_Welcome_ip_lan.setItem", i, 1, item])
                item.setForeground(QBrush(QColor(255, 255, 255)))
        except Exception as error:
            logger.write("[ip_to_table] error: " + str(error), status=False)

    def select_platform(self, connection):
        try:
            counter = 0
            for i in range(gui.ex.tableWidget_Home_Welcome_ip_lan.rowCount()):
                if gui.ex.tableWidget_Home_Welcome_ip_lan.item(i, 0).checkState() == 2:
                    counter += 1
            if counter > 4:
                msg = QMessageBox()
                msg.setWindowTitle("Slection Error")
                msg.setText("Please select up to 4 IP's")
                msg.setIcon(QMessageBox.Warning)
                msg.exec_()
            else:
                if gui.ex.comboBox_Configuration_fullscreen_status.currentText() == "Yes":
                    WriteStream.write(["showNormal()"])
                WriteStream.write(["component_index_btn.setHidden", True])
                WriteStream.write(["label_second_arrow.setHidden", True])
                WriteStream.write(["label_third_arrow.setHidden", True])
                WriteStream.write(["card_index_btn.setHidden", True])
                action.status_side_menu(True)
                WriteStream.write(["select_platform_top_left_frame.setHidden", True])
                WriteStream.write(["select_platform_top_right_frame.setHidden", True])
                WriteStream.write(["select_platform_lower_left_frame.setHidden", True])
                WriteStream.write(["select_platform_lower_right_frame.setHidden", True])
                gui.ex.main_tab_widget.setCurrentIndex(0)
                gui.ex.home_tab_widget.setCurrentIndex(2)
                if connection == "LAN":
                    list_of_selected_ip = []

                    for i in range(gui.ex.tableWidget_Home_Welcome_ip_lan.rowCount()):
                        if gui.ex.tableWidget_Home_Welcome_ip_lan.item(i, 0).checkState() == 2:
                            list_of_selected_ip.append(gui.ex.tableWidget_Home_Welcome_ip_lan.item(i, 1).text())
                    print(list_of_selected_ip)
                    logger.write(list_of_selected_ip)

                    if len(list_of_selected_ip) == 1:
                        WriteStream.write(["select_platform_top_left_frame.setHidden", False])
                        WriteStream.write(["label_Home_SelectPlatform_ip_top_left.setText", str(list_of_selected_ip[0])])
                        gui.ex.label_Home_SelectPlatform_ip_top_left.setText(str(list_of_selected_ip[0]))
                    elif len(list_of_selected_ip) == 2:
                        WriteStream.write(["select_platform_top_left_frame.setHidden", False])
                        WriteStream.write(["select_platform_top_right_frame.setHidden", False])
                        gui.ex.label_Home_SelectPlatform_ip_top_left.setText(str(list_of_selected_ip[0]))
                        gui.ex.label_Home_SelectPlatform_ip_top_right.setText(str(list_of_selected_ip[1]))
                    elif len(list_of_selected_ip) == 3:
                        WriteStream.write(["select_platform_top_left_frame.setHidden", False])
                        WriteStream.write(["select_platform_top_right_frame.setHidden", False])
                        WriteStream.write(["select_platform_lower_left_frame.setHidden", False])
                        gui.ex.label_Home_SelectPlatform_ip_top_left.setText(str(list_of_selected_ip[0]))
                        gui.ex.label_Home_SelectPlatform_ip_top_right.setText(str(list_of_selected_ip[1]))
                        gui.ex.label_Home_SelectPlatform_ip_lower_left.setText(str(list_of_selected_ip[2]))

                    elif len(list_of_selected_ip) == 4:
                        WriteStream.write(["select_platform_top_left_frame.setHidden", False])
                        WriteStream.write(["select_platform_top_right_frame.setHidden", False])
                        WriteStream.write(["select_platform_lower_left_frame.setHidden", False])
                        WriteStream.write(["select_platform_lower_right_frame.setHidden", False])
                        gui.ex.label_Home_SelectPlatform_ip_top_left.setText(str(list_of_selected_ip[0]))
                        gui.ex.label_Home_SelectPlatform_ip_top_right.setText(str(list_of_selected_ip[1]))
                        gui.ex.label_Home_SelectPlatform_ip_lower_left.setText(str(list_of_selected_ip[2]))
                        gui.ex.label_Home_SelectPlatform_ip_lower_right.setText(str(list_of_selected_ip[3]))
                else:  # SPI
                    WriteStream.write(["pushButton_checkConnection_SPI_Lptr1.setHidden", False])
                    WriteStream.write(["protocol_index_btn.setHidden", False])
                    WriteStream.write(["protocol_index_btn.setText", "SPI\nConnection Type"])
                    WriteStream.write(["select_platform_top_left_frame.setHidden", False])
                    # WriteStream.write(["label_Home_SelectPlatform_ip_top_left.setText", "CHECK HOW FETCH COMM"])  # TODO: CHECK HOW TO FETCH COMM
        except Exception as error:
            logger.write("[select_platform]" + str(error), status=False)

    def Manage_Pictures_Of_Cards(self, Object):
        try:
            if Object == "comboBox_Home_SelectPlatform_select_device_top_left":
                combo = Object
                label = "label_Home_SelectPlaform_device_picture_top_left"
            elif Object == "comboBox_Home_SelectPlatform_select_device_top_right":
                combo = Object
                label = "label_Home_SelectPlaform_device_picture_top_right"
            elif Object == "comboBox_Home_SelectPlatform_select_device_lower_left":
                combo = Object
                label = "label_Home_SelectPlaform_device_picture_lower_left"
            else:  # Object == "comboBox_Home_SelectPlatform_select_device_lower_right"
                combo = Object
                label = "label_Home_SelectPlaform_device_picture_top_right"
            WriteStream.write([f"{str(label)}.setText", ""])
            name = eval("gui.ex." + str(combo) + ".currentText()")
            if name == "VA":
                WriteStream.write([f"{label}.setPixmap", QtGui.QPixmap(":/pictures/pictures/mctr-hh-vs-50-single-channel-fahrzeugstation-02-telefunken.jpg")])
            elif name == "HH":
                WriteStream.write([f"{label}.setPixmap", QtGui.QPixmap(":/pictures/pictures/e-lynx-handheld-elbit.jpg")])
            elif name == "WBN":
                WriteStream.write([f"{label}.setPixmap", QtGui.QPixmap(":/pictures/pictures/WBN_Platform.PNG")])
            elif name == "MP":
                WriteStream.write([f"{label}.setPixmap", QtGui.QPixmap(":/pictures/pictures/MP.jpg")])
        except Exception as error:
            logger.write("[Manage_Pictures_Of_Cards]" + str(error), status=False)

    def Manage_To_component_pages(self, Button_Name):
        try:
            if Button_Name == "pushButton_Home_SelectPlaform_device_picture_top_left":
                combo = "comboBox_Home_SelectPlatform_select_device_top_left"
                label = "label_Home_SelectPlatform_ip_top_left"
            elif Button_Name == "pushButton_Home_SelectPlaform_device_picture_top_right":
                combo = "comboBox_Home_SelectPlatform_select_device_top_right"
                label = "label_Home_SelectPlatform_ip_top_right"
            elif Button_Name == "pushButton_Home_SelectPlaform_device_picture_lower_left":
                combo = "comboBox_Home_SelectPlatform_select_device_lower_left"
                label = "label_Home_SelectPlatform_ip_lower_left"
            else:  # Button_Name == "pushButton_Home_SelectPlaform_device_picture_lower_right"
                combo = "comboBox_Home_SelectPlatform_select_device_lower_right"
                label = "label_Home_SelectPlatform_ip_lower_right"

            name = eval("gui.ex." + str(combo) + ".currentText()")
            WriteStream.write(["device_index_btn.setText", "Platform\nSelection"])
            WriteStream.write(["component_index_btn.setText", name + "\n" + str(eval("gui.ex." + str(label) + ".text()"))])
            WriteStream.write(["label_first_arrow.setHidden", False])
            WriteStream.write(["device_index_btn.setHidden", False])
            WriteStream.write(["lineEdit_Configuration_device_ip.setText", str(eval("gui.ex." + str(label) + ".text()"))])
            if name == "VA":
                va.hide_card_frame()
                WriteStream.write(["home_tab_widget.setCurrentIndex", 3])
                WriteStream.write(["label_ip_va.setText", str(eval("gui.ex." + str(label) + ".text()"))])
            elif name == "WBN":
                wbn.hide_card_frame()
                WriteStream.write(["home_tab_widget.setCurrentIndex", 4])
                WriteStream.write(["label_ip_wbn.setText", str(eval("gui.ex." + str(label) + ".text()"))])
            elif name == "HH":
                WriteStream.write(["home_tab_widget.setCurrentIndex", 5])
                WriteStream.write(["label_ip_HH.setText", str(eval("gui.ex." + str(label) + ".text()"))])
            elif name == "MP":
                WriteStream.write(["home_tab_widget.setCurrentIndex", 6])
                WriteStream.write(["label_ip_mp.setText", str(eval("gui.ex." + str(label) + ".text()"))])
        except Exception as error:
            logger.write("[Manage_To_component_pages]" + str(error), status=False)

    def manageBar(self, obj):
        try:
            objList = ["pushButton_Home_Welcome_lan", "pushButton_Home_Welcome_spi"]

            for currObj in objList:
                WriteStream.write([str(currObj) + ".setChecked", False])

            for currObj in objList:
                if currObj == obj:
                    WriteStream.write([str(currObj) + ".setChecked", True])
                    break
        except Exception as error:
            logger.write("[Home Page - manageBar]" + str(error), status=False)


class VA:
    def __init__(self):
        gui.ex.va_tabWidget.tabBar().hide()
        gui.ex.pushButton_Home_VA_lptr1_picture_component.clicked.connect(lambda: threading.Thread(target=lptr1.lptr1_component()).start())
        gui.ex.pushButton_Home_VA_mbtr_picture_component.clicked.connect(lambda: threading.Thread(target=mbtr.show_tab).start())
        gui.ex.pushButton_Home_VA_hptr_picture_component.clicked.connect(lambda: threading.Thread(target=hptr.hptr_component()).start())

    def hide_card_frame(self):
        try:
            if gui.ex.comboBox_Configuration_fullscreen_status.currentText() == "Yes":
                WriteStream.write(["showNormal()"])
            gui.ex.main_tab_widget.setCurrentIndex(0)
            gui.ex.home_tab_widget.setCurrentIndex(3)
            gui.ex.va_tabWidget.setCurrentIndex(0)
        except Exception as error:
            logger.write("[VA - hide_card_frame]" + str(error), status=False)

    def show_card(self):
        try:
            if gui.ex.comboBox_Configuration_fullscreen_status.currentText() == "Yes":
                WriteStream.write(["showMaximized()"])
            gui.ex.main_tab_widget.setCurrentIndex(0)
            gui.ex.home_tab_widget.setCurrentIndex(3)
            gui.ex.va_tabWidget.setCurrentIndex(1 if "LPTR1" in gui.ex.card_index_btn.text() else 2 if "MBTR" in gui.ex.card_index_btn.text() else 3)
            gui.ex.component_index_btn.setHidden(False)
            gui.ex.label_second_arrow.setHidden(False)
            gui.ex.card_index_btn.setHidden(False)
            gui.ex.label_third_arrow.setHidden(False)
            action.status_side_menu(False)
        except Exception as error:
            logger.write("[VA - show_card]" + str(error), status=False)


class LPTR1:
    def __init__(self):
        gui.ex.pushButton_Home_VA_LPTR1_Load_Componenet.clicked.connect(lambda: threading.Thread(target=action.load_file_to_component, args=["VA/LPTR1"]).start())
        gui.ex.pushButton_Home_VA_LPTR1_Save_Componenet.clicked.connect(lambda: threading.Thread(target=action.save_component_script, args=["VA/LPTR1"]).start())
        gui.ex.pushButton_LPTR1_u16_u48.setChecked(True)
        gui.ex.pushButton_LPTR1_u14_u15.setChecked(True)
        gui.ex.pushButton_LPTR1_u116_u117.setChecked(True)
        gui.ex.pushButton_LPTR1_u74_u115.setChecked(True)

        # defults ways
        gui.ex.comboBox_LPTR1_national_international_tx_filterBank.setHidden(True)
        gui.ex.national_international_rx_filterBank.setHidden(True)

        gui.ex.sw4_u39__rf2.setChecked(True)
        icon31 = QtGui.QIcon()
        icon31.addPixmap(QtGui.QPixmap("pictures\\lptr_hez_yellow.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        gui.ex.sw4_u39__rf2.setIcon(icon31)
        gui.ex.sw4_u39__rf2.setIconSize(QtCore.QSize(30, 30))

        gui.ex.sw3_u40__rf1.setChecked(True)
        icon31 = QtGui.QIcon()
        icon31.addPixmap(QtGui.QPixmap("pictures\\lptr_hez_yellow.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        gui.ex.sw3_u40__rf1.setIcon(icon31)
        gui.ex.sw3_u40__rf1.setIconSize(QtCore.QSize(34, 34))
        gui.ex.sw3_u40__rf1.setChecked(True)

        # LOAD SCRIPT INIT IO EX
        file = open(str("Files\\VA\\LPTR1\\Scripts\\IOExpenderInit_VA_LPTR1.py"), "r")
        contentFile = ""
        for currLine in file:
            contentFile += currLine

        WriteStream.write(["plainText_init_Io_expender.insertPlainText", str(contentFile)])  # UHF
        WriteStream.write(["pushButton_band1.setToolTip", "National freq range : 486-573.9[MHz] \n International freq range : 225-299.9[MHz] \n Resolution of 100KHz"])  # UHF
        WriteStream.write(["pushButton_band2.setToolTip", "National freq range : 574-661.9[MHz] \n International freq range : 300-374.9[MHz] \n Resolution of 100KHz"])  # UHF
        WriteStream.write(["pushButton_band3.setToolTip", "National freq range : 662-750[MHz] \n International freq range : 375-449.9[MHz] \n Resolution of 100KHz"])  # UHF
        WriteStream.write(["pushButton_band4.setToolTip", "International freq range : 450-512[MHz] \n Resolution of 100KHz"])  # UHF
        gui.ex.pushButton_band4.setHidden(True)  # UHF

        gui.ex.national_international_notch_fl64.setHidden(True)  # UHF
        gui.ex.SpinBox_FE_Notch_band4.setHidden(True)  # UHF
        gui.ex.onOff_band4_fl64.setHidden(True)  # UHF
        gui.ex.label_319.setHidden(True)  # UHF
        gui.ex.pushButton_checkConnection_SPI_Lptr1.clicked.connect(spi.check_connection)

        gui.ex.pushButton_Home_VA_LPTR1_Send_Componenet.clicked.connect(lambda: threading.Thread(target=action.write_component, args=["LPTR1"]).start())
        # gui.ex.pushButton_Home_VA_LPTR1_Send_Componenet.clicked.connect(lambda: threading.Thread(target=self.write_componenet_lptr1).start())

        self.op = QGraphicsOpacityEffect()
        gui.ex.freq_table_sb7a_UhfRx.setHidden(True)  # RX
        gui.ex.freq_table_sb7b_UhfRx.setHidden(True)  # RX
        gui.ex.freq_table_sb7a_txBe.setHidden(True)  # TX
        gui.ex.freq_table_sb7b_txBe.setHidden(True)  # TX
        gui.ex.national_international_rx_filterBank.setHidden(True)
        gui.ex.national_international_fl49.setHidden(True)
        gui.ex.comboBox_LPTR1_onOff_fl49.setHidden(True)
        gui.ex.label_379.setHidden(True)
        gui.ex.spinBox_Fl49.setHidden(True)
        gui.ex.national_international_notch_fl64.setHidden(True)
        gui.ex.national_international_notch_fl64.currentIndexChanged.connect(lambda: threading.Thread(target=self.freeStyle_Mood_notchFl64).start())  # UHF
        gui.ex.send_notch_fl64.clicked.connect(lambda: threading.Thread(target=self.send_notch_fl64).start())  # UHF
        gui.ex.national_international_notch_fl64.currentIndexChanged.connect(lambda: threading.Thread(target=self.national_international_comp_sel, args=[str(gui.ex.national_international_notch_fl64.currentText()), "national_international_notch_fl64"]).start())  # national international fl64 sel
        gui.ex.comboBox_LPTR1_national_international_tx_filterBank.currentIndexChanged.connect(lambda: threading.Thread(target=self.national_international_comp_sel, args=[str(gui.ex.comboBox_LPTR1_national_international_tx_filterBank.currentText()), "comboBox_LPTR1_national_international_tx_filterBank"]).start())  # national international tx filter bank sel
        gui.ex.national_international_rx_filterBank.currentIndexChanged.connect(lambda: threading.Thread(target=self.national_international_comp_sel, args=[str(gui.ex.national_international_rx_filterBank.currentText()), "national_international_rx_filterBank"]).start())  # national international rx filter bank sel
        gui.ex.national_international_fl49.currentIndexChanged.connect(lambda: threading.Thread(target=self.national_international_comp_sel, args=[str(gui.ex.national_international_fl49.currentText()), "national_international_fl49"]).start())  # national international fl49 sel
        gui.ex.getVersion_lptr1.clicked.connect(lambda: threading.Thread(target=self.GetVersion).start())
        gui.ex.Read_Tylnx_PG.clicked.connect(lambda: threading.Thread(target=self.Read_Tlynx_PG).start())
        gui.ex.read_id_ver_rx.clicked.connect(lambda: threading.Thread(target=self.Read_id_ver_ifbm_rx).start())
        gui.ex.read_id_ver_ifbm_tx.clicked.connect(lambda: threading.Thread(target=self.Read_id_ver_ifbm_tx).start())
        gui.ex.read_power_good_nav1.clicked.connect(lambda: threading.Thread(target=self.ReadPowerGood_nav1).start())
        gui.ex.read_power_good_nav2.clicked.connect(lambda: threading.Thread(target=self.ReadPowerGood_nav2).start())
        gui.ex.read_power_good_nav3.clicked.connect(lambda: threading.Thread(target=self.ReadPowerGood_nav3).start())
        gui.ex.pushButton_LPTR1_read_power_good_nav4.clicked.connect(lambda: threading.Thread(target=self.ReadPowerGood_nav4).start())
        gui.ex.lptr1_cards_tab.setCurrentIndex(1)

        # gui.ex.comboBox_general_NAT_INT.currentIndexChanged.connect(lambda: threading.Thread(target=self.national_international_controler).start())
        gui.ex.u43_read.clicked.connect(lambda: threading.Thread(target=self.address_0x166_ReadQ).start())  # LBAND
        gui.ex.u120_read_rx_be.clicked.connect(lambda: threading.Thread(target=self.address_0x162_ReadQ).start())  # LBAND
        gui.ex.u163_read_RX_FE.clicked.connect(lambda: threading.Thread(target=self.address_0x15E_ReadQ).start())  # UHF
        gui.ex.pushButton_LPTR1_u70_read_power.clicked.connect(lambda: threading.Thread(target=self.address_0x15A_ReadQ).start())  # TX
        gui.ex.pushButton_LPTR1_u69.clicked.connect(lambda: threading.Thread(target=self.address_0x156_ReadQ).start())  # TX
        # gui.ex.national_international_notch_fl64.currentIndexChanged.connect(lambda: threading.Thread(target=self.manage_Private_Fl64_Notch).start())  # UHF
        gui.ex.Zoom_in_lptr1.clicked.connect(lambda: threading.Thread(target=self.open_freq_table_pic, args=["LPTR_PIC"]).start())  # TX
        gui.ex.freq_table_sb7b_txBe.clicked.connect(lambda: threading.Thread(target=self.open_freq_table_pic, args=["SB7B"]).start())  # TX
        gui.ex.freq_table_sb7a_txBe.clicked.connect(lambda: threading.Thread(target=self.open_freq_table_pic, args=["SB7A"]).start())  # TX
        gui.ex.pushButton_LPTR1_freq_table_sb8b_txBe.clicked.connect(lambda: threading.Thread(target=self.open_freq_table_pic, args=["SB8B"]).start())  # TX
        gui.ex.pushButton_LPTR1_freq_table_sb8a_txBe.clicked.connect(lambda: threading.Thread(target=self.open_freq_table_pic, args=["SB8A"]).start())  # TX

        gui.ex.freq_table_sb8b_UhfRx.clicked.connect(lambda: threading.Thread(target=self.open_freq_table_pic, args=["SB8B"]).start())  # RX
        gui.ex.freq_table_sb8a_UhfRx.clicked.connect(lambda: threading.Thread(target=self.open_freq_table_pic, args=["SB8A"]).start())  # RX
        gui.ex.freq_table_sb7b_UhfRx.clicked.connect(lambda: threading.Thread(target=self.open_freq_table_pic, args=["SB7B"]).start())  # RX
        gui.ex.freq_table_sb7a_UhfRx.clicked.connect(lambda: threading.Thread(target=self.open_freq_table_pic, args=["SB7A"]).start())  # RX

        gui.ex.u89_part_readCurr.clicked.connect(lambda: threading.Thread(target=self.Cpld_G8_ReadCurrent).start())  # LBAND
        gui.ex.u167_readCurr.clicked.connect(lambda: threading.Thread(target=self.Cpld_G7_ReadCurrent).start())  # UHF
        gui.ex.pushButton_LPTR1_readCurrent_u79.clicked.connect(lambda: threading.Thread(target=self.Cpld_c1_ReadCurrent).start())  # TX
        gui.ex.u136_read_tx_be.clicked.connect(lambda: threading.Thread(target=self.Cpld_D1_ReadCurrent).start())  # TX
        gui.ex.pushButton_LPTR1_read_interrupt_nav_u86.clicked.connect(lambda: threading.Thread(target=self.address_01f0, args=["pushButton_LPTR1_read_interrupt_nav_u86"]).start())  # TX
        gui.ex.read_interrupt_nav_u85.clicked.connect(lambda: threading.Thread(target=self.address_01f0, args=["read_interrupt_nav_u85"]).start())  # LBAND
        gui.ex.read_interrupt_nav_u84.clicked.connect(lambda: threading.Thread(target=self.address_01f0, args=["read_interrupt_nav_u84"]).start())  # UHF
        gui.ex.read_interrupt_nav_u83.clicked.connect(lambda: threading.Thread(target=self.address_01f0, args=["read_interrupt_nav_u83"]).start())  # UHF
        gui.ex.pushButton_LPTR1_u67_readQ.clicked.connect(lambda: threading.Thread(target=self.address_01ee, args=["pushButton_LPTR1_u67_readQ"]).start())  # TX
        gui.ex.pushButton_LPTR1_ReadQ_u66.clicked.connect(lambda: threading.Thread(target=self.address_01ee, args=["pushButton_LPTR1_ReadQ_u66"]).start())  # TX
        gui.ex.u119_read_part2.clicked.connect(lambda: threading.Thread(target=self.address_01ee, args=["u119_read_part2"]).start())  # LBAND
        gui.ex.u42_ReadQ.clicked.connect(lambda: threading.Thread(target=self.address_01ee, args=["u42_ReadQ"]).start())  # LBAND
        gui.ex.u160_read_tx_be.clicked.connect(lambda: threading.Thread(target=self.address_01ee, args=["u160_read_tx_be"]).start())  # UHF
        gui.ex.enable_disable_part3.currentIndexChanged.connect(lambda: threading.Thread(target=self.Enable_Disable_Buttons).start())  # TX
        gui.ex.pushButton_LPTR1_u40.clicked.connect(lambda: threading.Thread(target=self.Manage_u40_sw3, args=["pushButton_LPTR1_u40"]).start())  # TX
        gui.ex.sw3_u40__rf1.clicked.connect(lambda: threading.Thread(target=self.Manage_u40_sw3, args=["sw3_u40__rf1"]).start())  # TX
        gui.ex.pushButton_LPTR1_u39.clicked.connect(lambda: threading.Thread(target=self.Manage_u39_sw4, args=["pushButton_LPTR1_u39"]).start())  # TX
        gui.ex.sw4_u39__rf2.clicked.connect(lambda: threading.Thread(target=self.Manage_u39_sw4, args=["sw4_u39__rf2"]).start())  # TX
        gui.ex.blue.clicked.connect(lambda: threading.Thread(target=self.Manage_Buttons_sw1_sw2, args=["blue"]).start())  # TX
        gui.ex.u158_u161_kav.clicked.connect(lambda: threading.Thread(target=self.Manage_Buttons_u158_u161, args=["u158_u161_kav"]).start())  # LBAND
        gui.ex.pushButton_LPTR1_u158_u161.clicked.connect(lambda: threading.Thread(target=self.Manage_Buttons_u158_u161, args=["pushButton_LPTR1_u158_u161"]).start())  # LBAND
        gui.ex.u116_u117_kav.clicked.connect(lambda: threading.Thread(target=self.Manage_Buttons_u116_u117, args=["u116_u117_kav"]).start())  # UHF

        gui.ex.u74_u115_kav.clicked.connect(lambda: threading.Thread(target=self.Manage_Buttons_u74_u115, args=["u74_u115_kav"]).start())  # UHF
        gui.ex.pushButton_LPTR1_u74_u115.clicked.connect(lambda: threading.Thread(target=self.Manage_Buttons_u74_u115, args=["pushButton_LPTR1_u74_u115"]).start())  # UHF
        gui.ex.u15_u14_kav.clicked.connect(lambda: threading.Thread(target=self.Manage_Buttons_u14_u15, args=["u15_u14_kav"]).start())  # UHF
        gui.ex.pushButton_LPTR1_u14_u15.clicked.connect(lambda: threading.Thread(target=self.Manage_Buttons_u14_u15, args=["pushButton_LPTR1_u14_u15"]).start())  # UHF
        gui.ex.u16_u48_kav.clicked.connect(lambda: threading.Thread(target=self.Manage_Buttons_u16_u48, args=["u16_u48_kav"]).start())  # UHF
        gui.ex.pushButton_LPTR1_u16_u48.clicked.connect(lambda: threading.Thread(target=self.Manage_Buttons_u16_u48, args=["pushButton_LPTR1_u16_u48"]).start())  # UHF
        gui.ex.u144_u157_kav.clicked.connect(lambda: threading.Thread(target=self.Manage_Buttons_u144_u157, args=["u144_u157_kav"]).start())  # LBAND
        gui.ex.pushButton_LPTR1_u144_u157.clicked.connect(lambda: threading.Thread(target=self.Manage_Buttons_u144_u157, args=["pushButton_LPTR1_u144_u157"]).start())  # LBAND

        gui.ex.navassa_2_lptr1_pushButton.clicked.connect(lambda: threading.Thread(target=navassa.navassa_config_page).start())
        # gui.ex.navassa_1_lptr1_pushButton.clicked.connect(lambda: threading.Thread(target = navassa.navassa_config_page).start())
        gui.ex.navassa_3_lptr1_pushButton.clicked.connect(lambda: threading.Thread(target=navassa.navassa_config_page).start())
        gui.ex.navassa_4_lptr1_pushButton.clicked.connect(lambda: threading.Thread(target=navassa.navassa_config_page).start())

        gui.ex.pushButton_Home_VA_LPTR1_UHF_RX.clicked.connect(lambda: threading.Thread(self.uhf_rx_card()).start())
        gui.ex.pushButton_Home_VA_LPTR1_VHF_LBAND_RX.clicked.connect(lambda: threading.Thread(self.vhf_lband_rx_card()).start())
        gui.ex.pushButton_Home_VA_LPTR1_TX.clicked.connect(lambda: threading.Thread(self.tx_card()).start())
        gui.ex.Module_Filter_Bank.clicked.connect(lambda: threading.Thread(self.Module_Filter_Bank_card()).start())

        gui.ex.comboBox_general_NAT_INT.currentIndexChanged.connect(lambda: threading.Thread(target=self.General_national_international_sel).start())

        self.list_ifbm1 = ["174", "176", "178", "180", "182", "184", "186", "188", "190", "192", "194", "196", "198", "200", "202", "204", "206", "208", "210", "212", "214", "216", "218", "220", "222", "BP"]
        self.listifbm2 = ["486", "494", "502", "510", "518", "542", "550", "574", "582", "590", "598", "606", "614", "622", "630", "638", "646", "654", "678", "686", "694", "728", "736", "744", "752", "BP"]
        self.list_ifbm1_international = ["225", "231", "237", "243", "249", "255", "261", "267", "273", "279", "285", "291", "297", "303", "309", "315", "321", "327", "333", "339", "345", "351", "357", "363", "369", "BP"]
        self.list_ifbm2_international = ["375", "381", "387", "393", "399", "405", "411", "417", "423", "429", "435", "441", "447", "453", "459", "465", "471", "477", "483", "489", "495", "501", "507", "513", "BP"]

        list_of_objects_ifbm1_tx = ["comboBox_LPTR1_ifbm1_main_tx", "comboBox_LPTR1_ifbm1_main_feedback", "comboBox_LPTR1_ifbm1_scnd_feedback", "comboBox_LPTR1_ifbm1_scnd_tx"]
        list_of_objects_ifbm2_tx = ["comboBox_LPTR1_ifbm2_main_tx", "comboBox_LPTR1_ifbm2_main_feedback", "comboBox_LPTR1_ifbm2_scnd_feedback", "comboBox_LPTR1_ifbm2_scnd_tx"]
        list_of_objects_ifbm1_rx = ["IFBM1_Rx_CH1", "IFBM1_Rx_CH2", "IFBM1_Rx_CH3", "IFBM1_Rx_CH4"]
        list_of_objects_ifbm2_rx = ["IFBM2_Rx_CH1", "IFBM2_Rx_CH2", "IFBM2_Rx_CH3", "IFBM2_Rx_CH4"]

        for currObj in list_of_objects_ifbm1_tx:
            eval("gui.ex." + str(currObj) + ".addItems(self.list_ifbm1)")
        for currObj in list_of_objects_ifbm1_rx:
            eval("gui.ex." + str(currObj) + ".addItems(self.list_ifbm1)")
        for currObj in list_of_objects_ifbm2_tx:
            eval("gui.ex." + str(currObj) + ".addItems(self.listifbm2)")
        for currObj in list_of_objects_ifbm2_rx:
            eval("gui.ex." + str(currObj) + ".addItems(self.listifbm2)")

        time.sleep(0.1)

        threading.Thread(target=self.SetCurrentIndex, args=[["comboBox_LPTR1_ifbm1_main_tx", "comboBox_LPTR1_ifbm1_main_feedback", "comboBox_LPTR1_ifbm1_scnd_feedback", "comboBox_LPTR1_ifbm1_scnd_tx"], ["174", "176", "178", "180"]]).start()
        threading.Thread(target=self.SetCurrentIndex, args=[["comboBox_LPTR1_ifbm2_main_tx", "comboBox_LPTR1_ifbm2_main_feedback", "comboBox_LPTR1_ifbm2_scnd_feedback", "comboBox_LPTR1_ifbm2_scnd_tx"], ["486", "494", "502", "510"]]).start()
        threading.Thread(target=self.SetCurrentIndex, args=[["IFBM1_Rx_CH1", "IFBM1_Rx_CH2", "IFBM1_Rx_CH3", "IFBM1_Rx_CH4"], ["174", "176", "178", "180"]]).start()
        threading.Thread(target=self.SetCurrentIndex, args=[["IFBM2_Rx_CH1", "IFBM2_Rx_CH2", "IFBM2_Rx_CH3", "IFBM2_Rx_CH4"], ["486", "494", "502", "510"]]).start()

        gui.ex.pushButton_LPTR1_nav1.clicked.connect(lambda: threading.Thread(target=gui.ex.home_tab_widget.setCurrentIndex(7)).start())
        gui.ex.pushButton_LPTR1_nav2.clicked.connect(lambda: threading.Thread(target=gui.ex.home_tab_widget.setCurrentIndex(7)).start())
        gui.ex.pushButton_LPTR1_nav3.clicked.connect(lambda: threading.Thread(target=gui.ex.home_tab_widget.setCurrentIndex(7)).start())
        gui.ex.pushButton_LPTR1_nav4.clicked.connect(lambda: threading.Thread(target=gui.ex.home_tab_widget.setCurrentIndex(7)).start())

    def Error_for_filterBank(self, listOfItems, NameOfFilter):
        try:
            list_of_dup = ([i for i, x in enumerate(listOfItems) if listOfItems.count(x) > 1])
            if (len(list_of_dup) > 1):
                logger.write(str(NameOfFilter) + " Filter Bank Error , Can't send with the same frequency. listOfItems = " + str(listOfItems))
                return False
            return True

        except Exception as error:
            logger.write("[Error_for_filterBank]" + str(error), status=False)

    def run_filterbank(self):
        try:
            # Filter Bank

            if (gui.ex.comboBox_general_NAT_INT.currentText() == "Free Style"):
                Tx_FB_Nat_Int = gui.ex.comboBox_LPTR1_national_international_tx_filterBank.currentText()
                Rx_FB_Nat_Int = gui.ex.national_international_rx_filterBank.currentText()
            else:
                Tx_FB_Nat_Int = gui.ex.comboBox_general_NAT_INT.currentText()
                Rx_FB_Nat_Int = gui.ex.comboBox_general_NAT_INT.currentText()

            # Filter Bank Tx IFBM1

            FL67_Tin_Tout_Main_Tx = self.Generic_Filter_Algorithm(Ch=(gui.ex.comboBox_LPTR1_ifbm1_main_tx.currentText()), SB_Type="A", Manufacturer=gui.ex.comboBox_LPTR1_Manufacturer_Tx_FilterBank.currentText(), NAT_or_INT=Tx_FB_Nat_Int)
            FL67_Tin_Tout_Main_FeedBack = self.Generic_Filter_Algorithm((gui.ex.comboBox_LPTR1_ifbm1_main_feedback.currentText()), "A", gui.ex.comboBox_LPTR1_Manufacturer_Tx_FilterBank.currentText(), Tx_FB_Nat_Int)
            FL67_Tin_Tout_Scnd_FeedBack = self.Generic_Filter_Algorithm((gui.ex.comboBox_LPTR1_ifbm1_scnd_feedback.currentText()), "A", gui.ex.comboBox_LPTR1_Manufacturer_Tx_FilterBank.currentText(), Tx_FB_Nat_Int)
            FL67_Tin_Tout_Scnd_Tx = self.Generic_Filter_Algorithm((gui.ex.comboBox_LPTR1_ifbm1_scnd_tx.currentText()), "A", gui.ex.comboBox_LPTR1_Manufacturer_Tx_FilterBank.currentText(), Tx_FB_Nat_Int)

            # Filter Bank Tx IFBM2

            FL62_Tin_Tout_Main_Tx = self.Generic_Filter_Algorithm((gui.ex.comboBox_LPTR1_ifbm2_main_tx.currentText()), "B", gui.ex.comboBox_LPTR1_Manufacturer_Tx_FilterBank.currentText(), Tx_FB_Nat_Int)
            FL62_Tin_Tout_Main_FeedBack = self.Generic_Filter_Algorithm((gui.ex.comboBox_LPTR1_ifbm2_main_feedback.currentText()), "B", gui.ex.comboBox_LPTR1_Manufacturer_Tx_FilterBank.currentText(), Tx_FB_Nat_Int)
            FL62_Tin_Tout_Scnd_FeedBack = self.Generic_Filter_Algorithm((gui.ex.comboBox_LPTR1_ifbm2_scnd_feedback.currentText()), "B", gui.ex.comboBox_LPTR1_Manufacturer_Tx_FilterBank.currentText(), Tx_FB_Nat_Int)
            FL62_Tin_Tout_Scnd_Tx = self.Generic_Filter_Algorithm((gui.ex.comboBox_LPTR1_ifbm2_scnd_tx.currentText()), "B", gui.ex.comboBox_LPTR1_Manufacturer_Tx_FilterBank.currentText(), Tx_FB_Nat_Int)

            # Filter Bank Rx IFBM1 ###############

            FL69_Tin_Tout_RX_CH1 = self.Generic_Filter_Algorithm((gui.ex.IFBM1_Rx_CH1.currentText()), "A", gui.ex.Manufacturer_Rx_FilterBank_Lptr1.currentText(), Rx_FB_Nat_Int)
            FL69_Tin_Tout_RX_CH2 = self.Generic_Filter_Algorithm((gui.ex.IFBM1_Rx_CH2.currentText()), "A", gui.ex.Manufacturer_Rx_FilterBank_Lptr1.currentText(), Rx_FB_Nat_Int)
            FL69_Tin_Tout_RX_CH3 = self.Generic_Filter_Algorithm((gui.ex.IFBM1_Rx_CH3.currentText()), "A", gui.ex.Manufacturer_Rx_FilterBank_Lptr1.currentText(), Rx_FB_Nat_Int)
            FL69_Tin_Tout_RX_CH4 = self.Generic_Filter_Algorithm((gui.ex.IFBM1_Rx_CH4.currentText()), "A", gui.ex.Manufacturer_Rx_FilterBank_Lptr1.currentText(), Rx_FB_Nat_Int)

            # Filter Bank Rx IFBM2

            FL63_Tin_Tout_RX_CH1 = self.Generic_Filter_Algorithm((gui.ex.IFBM2_Rx_CH1.currentText()), "B", gui.ex.Manufacturer_Rx_FilterBank_Lptr1.currentText(), Rx_FB_Nat_Int)
            FL63_Tin_Tout_RX_CH2 = self.Generic_Filter_Algorithm((gui.ex.IFBM2_Rx_CH2.currentText()), "B", gui.ex.Manufacturer_Rx_FilterBank_Lptr1.currentText(), Rx_FB_Nat_Int)
            FL63_Tin_Tout_RX_CH3 = self.Generic_Filter_Algorithm((gui.ex.IFBM2_Rx_CH3.currentText()), "B", gui.ex.Manufacturer_Rx_FilterBank_Lptr1.currentText(), Rx_FB_Nat_Int)
            FL63_Tin_Tout_RX_CH4 = self.Generic_Filter_Algorithm((gui.ex.IFBM2_Rx_CH4.currentText()), "B", gui.ex.Manufacturer_Rx_FilterBank_Lptr1.currentText(), Rx_FB_Nat_Int)

            # FPGA Register 0x01F8 (TX IFBM1)

            Register_0x01F8_TX_data1_1p = (bin(int(FL67_Tin_Tout_Main_Tx[0]))[2:]).zfill(5)  # Tin_Main_Tx
            Register_0x01F8_TX_data1_2p = (bin(int(FL67_Tin_Tout_Scnd_Tx[0]))[2:]).zfill(5)  # Tin Scnd Tx
            Register_0x01F8_TX_data1_3p = (bin(int(FL67_Tin_Tout_Main_FeedBack[0]))[2:]).zfill(5)  # Tin Main FeedBack

            Register_0x01F8_Hex = str(hex(int(str(Register_0x01F8_TX_data1_3p) + str(Register_0x01F8_TX_data1_2p) + str(Register_0x01F8_TX_data1_1p), 2)))[2:]
            script_page.WriteRegister("LPTR", "0x000001F8", str(Register_0x01F8_Hex), 0.01)

            # FPGA Register 0x01FA (TX IFBM1)

            Register_0x01FA_TX_data1_4p = (bin(int(FL67_Tin_Tout_Scnd_FeedBack[0]))[2:]).zfill(5)  # Tin_Scnd FeedBack
            Register_0x01FA_TX_data2_1p = (bin(int(FL67_Tin_Tout_Scnd_FeedBack[1]))[2:]).zfill(5)  # Tout_Scnd FeedBack
            Register_0x01FA_TX_data2_2p = (bin(int(FL67_Tin_Tout_Scnd_Tx[1]))[2:]).zfill(5)  # Tout Scnd Tx

            Register_0x01FA_Hex = (str(hex(int(str(Register_0x01FA_TX_data2_2p) + str(Register_0x01FA_TX_data2_1p) + str(Register_0x01FA_TX_data1_4p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x000001FA", str(Register_0x01FA_Hex), 0.01)

            # FPGA Register 0x01FC (TX IFBM1)

            Register_0x01FC_TX_data2_3p = (bin(int(FL67_Tin_Tout_Main_FeedBack[1]))[2:]).zfill(5)  # Tout Main FeedBack
            Register_0x01FC_TX_data2_4p = (bin(int(FL67_Tin_Tout_Main_Tx[1]))[2:]).zfill(5)  # Tout_Main_Tx

            Register_0x01FC_Hex = (str(hex(int(str(Register_0x01FC_TX_data2_4p) + str(Register_0x01FC_TX_data2_3p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x000001FC", str(Register_0x01FC_Hex), 0.01)

            # FPGA Register 0x0204 (TX IFBM2) #######################

            Register_0x0204_TX_data1_1p = (bin(int(FL62_Tin_Tout_Scnd_FeedBack[0]))[2:]).zfill(5)  # Tin_Scnd FeedBack
            Register_0x0204_TX_data1_2p = (bin(int(FL62_Tin_Tout_Main_FeedBack[0]))[2:]).zfill(5)  # Tin Main FeedBack
            Register_0x0204_TX_data1_3p = (bin(int(FL62_Tin_Tout_Main_Tx[0]))[2:]).zfill(5)  # Tin Main Tx

            Register_0x0204_Hex = (str(hex(int(str(Register_0x0204_TX_data1_3p) + str(Register_0x0204_TX_data1_2p) + str(Register_0x0204_TX_data1_1p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x00000204", str(Register_0x0204_Hex), 0.01)

            # FPGA Register 0x0206 (TX IFBM2) #######################

            Register_0x0206_TX_data1_4p = (bin(int(FL62_Tin_Tout_Scnd_Tx[0]))[2:]).zfill(5)  # Tin Scnd Tx
            Register_0x0206_TX_data2_1p = (bin(int(FL62_Tin_Tout_Scnd_Tx[1]))[2:]).zfill(5)  # Tout scnd tx
            Register_0x0206_TX_data2_2p = (bin(int(FL62_Tin_Tout_Main_Tx[1]))[2:]).zfill(5)  # Tout main tx

            Register_0x0206_Hex = (str(hex(int(str(Register_0x0206_TX_data2_2p) + str(Register_0x0206_TX_data2_1p) + str(Register_0x0206_TX_data1_4p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x00000206", str(Register_0x0206_Hex), 0.01)

            # FPGA Register 0x0208 (TX IFBM2) #######################

            Register_0x0208_TX_data2_3p = (bin(int(FL62_Tin_Tout_Main_FeedBack[1]))[2:]).zfill(5)  # Tout Main FeedBack
            Register_0x0208_TX_data2_4p = (bin(int(FL62_Tin_Tout_Scnd_FeedBack[1]))[2:]).zfill(5)  # Tout scnd FeedBack

            Register_0x0208_Hex = (str(hex(int(str(Register_0x0208_TX_data2_4p) + str(Register_0x0208_TX_data2_3p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x00000208", str(Register_0x0208_Hex), 0.01)

            # FPGA Register 0x01F2 (RX IFBM1) ####################

            Register_0x01F2_RX_data1_1p = (bin(int(FL69_Tin_Tout_RX_CH3[0]))[2:]).zfill(5)  # Tin_RX_CH3
            Register_0x01F2_RX_data1_2p = (bin(int(FL69_Tin_Tout_RX_CH4[0]))[2:]).zfill(5)  # Tin_RX_CH4
            Register_0x01F2_RX_data1_3p = (bin(int(FL69_Tin_Tout_RX_CH2[0]))[2:]).zfill(5)  # Tin_RX_CH2

            Register_0x01F2_Hex = (str(hex(int(str(Register_0x01F2_RX_data1_3p) + str(Register_0x01F2_RX_data1_2p) + str(Register_0x01F2_RX_data1_1p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x000001F2", str(Register_0x01F2_Hex), 0.01)

            # FPGA Register 0x01F4 (RX IFBM1)  ################

            Register_0x01F4_RX_data1_4p = (bin(int(FL69_Tin_Tout_RX_CH1[0]))[2:]).zfill(5)  # Tin_RX_CH1
            Register_0x01F4_RX_data2_1p = (bin(int(FL69_Tin_Tout_RX_CH4[1]))[2:]).zfill(5)  # Tout_RX_CH4
            Register_0x01F4_RX_data2_2p = (bin(int(FL69_Tin_Tout_RX_CH3[1]))[2:]).zfill(5)  # Tout_RX_CH3

            Register_0x01F4_Hex = (str(hex(int(str(Register_0x01F4_RX_data2_2p) + str(Register_0x01F4_RX_data2_1p) + str(Register_0x01F4_RX_data1_4p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x000001F4", str(Register_0x01F4_Hex), 0.01)

            # FPGA Register 0x01F6 (RX IFBM1)  ################

            Register_0x01F6_RX_data2_3p = (bin(int(FL69_Tin_Tout_RX_CH2[1]))[2:]).zfill(5)  # Tout_RX_CH2
            Register_0x01F6_RX_data2_4p = (bin(int(FL69_Tin_Tout_RX_CH1[1]))[2:]).zfill(5)  # Tout_RX_CH1

            Register_0x01F6_Hex = (str(hex(int(str(Register_0x01F6_RX_data2_4p) + str(Register_0x01F6_RX_data2_3p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x000001F6", str(Register_0x01F6_Hex), 0.01)

            # FPGA Register 0x01FE (RX IFBM2) #######################

            Register_0x01FE_RX_data1_1p = (bin(int(FL63_Tin_Tout_RX_CH3[0]))[2:]).zfill(5)  # Tin RX_CH3
            Register_0x01FE_RX_data1_2p = (bin(int(FL63_Tin_Tout_RX_CH4[0]))[2:]).zfill(5)  # Tin RX_CH4
            Register_0x01FE_RX_data1_3p = (bin(int(FL63_Tin_Tout_RX_CH2[0]))[2:]).zfill(5)  # Tin RX_CH2

            Register_0x01FE_Hex = (str(hex(int(str(Register_0x01FE_RX_data1_3p) + str(Register_0x01FE_RX_data1_2p) + str(Register_0x01FE_RX_data1_1p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x000001FE", str(Register_0x01FE_Hex), 0.01)

            # FPGA Register 0x0200 (RX IFBM2) #######################

            Register_0x0200_RX_data1_4p = (bin(int(FL63_Tin_Tout_RX_CH1[0]))[2:]).zfill(5)  # Tin RX_CH1
            Register_0x0200_RX_data2_1p = (bin(int(FL63_Tin_Tout_RX_CH4[1]))[2:]).zfill(5)  # Tout RX_CH4
            Register_0x0200_RX_data2_2p = (bin(int(FL63_Tin_Tout_RX_CH3[1]))[2:]).zfill(5)  # Tout RX_CH3

            Register_0x0200_Hex = (str(hex(int(str(Register_0x0200_RX_data2_2p) + str(Register_0x0200_RX_data2_1p) + str(Register_0x0200_RX_data1_4p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x00000200", str(Register_0x0200_Hex), 0.01)

            # FPGA Register 0x0202 (RX IFBM2) #######################

            Register_0x0202_RX_data2_3p = (bin(int(FL63_Tin_Tout_RX_CH2[1]))[2:]).zfill(5)  # Tout RX_CH2
            Register_0x0202_RX_data2_4p = (bin(int(FL63_Tin_Tout_RX_CH1[1]))[2:]).zfill(5)  # Tout RX_CH1

            Register_0x0202_Hex = (str(hex(int(str(Register_0x0202_RX_data2_4p) + str(Register_0x0202_RX_data2_3p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x00000202", str(Register_0x0202_Hex), 0.01)

            logger.write("Filter Bank Done")

            return True

        except Exception as error:
            logger.write("[run_filterbank]" + str(error), status=False)

    def run_io_expender_script(self):
        try:
            # init io expender
            if (gui.ex.checkBox_IoExpender_script.isChecked() == True):
                logger.write("IO EXPENDER Script started")
                exec(compile(open(str("Files\\VA\\LPTR1\\Scripts\\IOExpenderInit_VA_LPTR1.py"), "rb").read(), str("Files\\VA\\LPTR1\\Scripts\\IOExpenderInit_VA_LPTR1.py"), 'exec'))
                logger.write("IO EXPENDER Script done")

                return True

        except Exception as error:
            logger.write("[run_io_expender_script] error: " + str(error), False)
            return False

    def pre_run(self):
        try:
            if (lptr1.Error_for_filterBank(listOfItems=[gui.ex.comboBox_LPTR1_ifbm1_main_tx.currentText(), gui.ex.comboBox_LPTR1_ifbm1_main_feedback.currentText(), gui.ex.comboBox_LPTR1_ifbm1_scnd_feedback.currentText(), gui.ex.comboBox_LPTR1_ifbm1_scnd_tx.currentText()], NameOfFilter="IFBM1 TX") == False):
                return False
            if (lptr1.Error_for_filterBank(listOfItems=[gui.ex.comboBox_LPTR1_ifbm2_main_tx.currentText(), gui.ex.comboBox_LPTR1_ifbm2_main_feedback.currentText(), gui.ex.comboBox_LPTR1_ifbm2_scnd_feedback.currentText(), gui.ex.comboBox_LPTR1_ifbm2_scnd_tx.currentText()], NameOfFilter="IFBM2 TX") == False):
                return False
            if (lptr1.Error_for_filterBank(listOfItems=[gui.ex.IFBM1_Rx_CH1.currentText(), gui.ex.IFBM1_Rx_CH2.currentText(), gui.ex.IFBM1_Rx_CH3.currentText(), gui.ex.IFBM1_Rx_CH4.currentText()], NameOfFilter="IFBM1 RX") == False):
                return False
            if (lptr1.Error_for_filterBank(listOfItems=[gui.ex.IFBM2_Rx_CH1.currentText(), gui.ex.IFBM2_Rx_CH2.currentText(), gui.ex.IFBM2_Rx_CH3.currentText(), gui.ex.IFBM2_Rx_CH4.currentText()], NameOfFilter="IFBM2 RX") == False):
                return False

            if (self.run_io_expender_script() == False):
                return False

            if (self.run_filterbank() == False):
                return False
            if (module_filter_bank.pre_run_module_filter_bank() == False):
                return False

            logger.write("pre_run finished", True)

            return True
        except Exception as error:
            logger.write("[pre_run] error: " + str(error), False)

    def General_national_international_sel(self):
        try:
            # mode can be national or international
            if (gui.ex.comboBox_general_NAT_INT.currentText() == "National" or gui.ex.comboBox_general_NAT_INT.currentText() == "International"):
                gui.ex.national_international_rx_filterBank.setHidden(True)
                gui.ex.national_international_fl49.setHidden(True)
                gui.ex.comboBox_LPTR1_national_international_tx_filterBank.setHidden(True)
                gui.ex.national_international_notch_fl64.setHidden(True)

                nameOfMode = gui.ex.comboBox_general_NAT_INT.currentText()
                self.national_international_comp_sel(Mode=nameOfMode, Obj="comboBox_general_NAT_INT")
            elif (gui.ex.comboBox_general_NAT_INT.currentText() == "Free Style"):
                gui.ex.national_international_rx_filterBank.setHidden(False)
                gui.ex.national_international_fl49.setHidden(False)
                gui.ex.comboBox_LPTR1_national_international_tx_filterBank.setHidden(False)
                gui.ex.national_international_notch_fl64.setHidden(False)

                gui.ex.national_international_rx_filterBank.setCurrentIndex(0)
                gui.ex.national_international_fl49.setCurrentIndex(0)
                gui.ex.comboBox_LPTR1_national_international_tx_filterBank.setCurrentIndex(0)
                gui.ex.national_international_notch_fl64.setCurrentIndex(0)

                self.national_international_comp_sel(Mode="National_Defult", Obj="comboBox_general_NAT_INT")
        except Exception as error:
            logger.write("[General_national_international_sel]" + str(error), status=False)

    def national_international_comp_sel(self, Mode, Obj):
        try:
            if (Obj == "comboBox_general_NAT_INT" or Obj == "national_international_notch_fl64"):
                if (Mode == "National" or Mode == "National_Defult"):

                    gui.ex.SpinBox_FE_Notch_band1.setMaximum(573.9)
                    gui.ex.SpinBox_FE_Notch_band1.setMinimum(486.0)
                    gui.ex.SpinBox_FE_Notch_band2.setMaximum(661.9)
                    gui.ex.SpinBox_FE_Notch_band2.setMinimum(574.0)
                    gui.ex.SpinBox_FE_Notch_band3.setMaximum(750.0)
                    gui.ex.SpinBox_FE_Notch_band3.setMinimum(662.0)
                    gui.ex.pushButton_band4.setHidden(True)
                    gui.ex.label_319.setHidden(True)
                    gui.ex.SpinBox_FE_Notch_band4.setHidden(True)
                    gui.ex.onOff_band4_fl64.setHidden(True)

                elif (Mode == "International"):
                    gui.ex.SpinBox_FE_Notch_band1.setMaximum(299.9)
                    gui.ex.SpinBox_FE_Notch_band1.setMinimum(225.0)
                    gui.ex.SpinBox_FE_Notch_band2.setMaximum(374.9)
                    gui.ex.SpinBox_FE_Notch_band2.setMinimum(300.0)
                    gui.ex.SpinBox_FE_Notch_band3.setMaximum(449.9)
                    gui.ex.SpinBox_FE_Notch_band3.setMinimum(375.0)
                    gui.ex.SpinBox_FE_Notch_band4.setMaximum(512.0)
                    gui.ex.SpinBox_FE_Notch_band4.setMinimum(450.0)
                    gui.ex.pushButton_band4.setHidden(False)
                    gui.ex.label_319.setHidden(False)
                    gui.ex.SpinBox_FE_Notch_band4.setHidden(False)
                    gui.ex.onOff_band4_fl64.setHidden(False)

            if (Obj == "comboBox_general_NAT_INT" or Obj == "national_international_rx_filterBank"):
                if (Mode == "National" or Mode == "National_Defult"):
                    gui.ex.freq_table_sb7a_UhfRx.setHidden(True)
                    gui.ex.freq_table_sb7b_UhfRx.setHidden(True)
                    gui.ex.freq_table_sb8a_UhfRx.setHidden(False)
                    gui.ex.freq_table_sb8b_UhfRx.setHidden(False)
                    gui.ex.freq_table_sb8a_UhfRx.setGeometry(QtCore.QRect(920, 390, 101, 21))
                    gui.ex.freq_table_sb8b_UhfRx.setGeometry(QtCore.QRect(920, 480, 101, 21))

                    list_of_objects_ifbm1_rx = ["IFBM1_Rx_CH1", "IFBM1_Rx_CH2", "IFBM1_Rx_CH3", "IFBM1_Rx_CH4"]
                    list_of_objects_ifbm2_rx = ["IFBM2_Rx_CH1", "IFBM2_Rx_CH2", "IFBM2_Rx_CH3", "IFBM2_Rx_CH4"]

                    for currObj in list_of_objects_ifbm1_rx:
                        eval("gui.ex." + str(currObj) + ".clear()")
                    for currObj in list_of_objects_ifbm2_rx:
                        eval("gui.ex." + str(currObj) + ".clear()")

                    for currObj in list_of_objects_ifbm1_rx:
                        eval("gui.ex." + str(currObj) + ".addItems(self.list_ifbm1)")

                    for currObj in list_of_objects_ifbm2_rx:
                        eval("gui.ex." + str(currObj) + ".addItems(self.listifbm2)")




                elif (Mode == "International"):
                    gui.ex.freq_table_sb7a_UhfRx.setHidden(False)
                    gui.ex.freq_table_sb7b_UhfRx.setHidden(False)
                    gui.ex.freq_table_sb8a_UhfRx.setHidden(True)
                    gui.ex.freq_table_sb8b_UhfRx.setHidden(True)
                    gui.ex.freq_table_sb7a_UhfRx.setGeometry(QtCore.QRect(920, 390, 101, 21))
                    gui.ex.freq_table_sb7b_UhfRx.setGeometry(QtCore.QRect(920, 480, 101, 21))

                    list_of_objects_ifbm1_rx = ["IFBM1_Rx_CH1", "IFBM1_Rx_CH2", "IFBM1_Rx_CH3", "IFBM1_Rx_CH4"]
                    list_of_objects_ifbm2_rx = ["IFBM2_Rx_CH1", "IFBM2_Rx_CH2", "IFBM2_Rx_CH3", "IFBM2_Rx_CH4"]

                    for currObj in list_of_objects_ifbm1_rx:
                        eval("gui.ex." + str(currObj) + ".clear()")
                    for currObj in list_of_objects_ifbm2_rx:
                        eval("gui.ex." + str(currObj) + ".clear()")

                    for currObj in list_of_objects_ifbm1_rx:
                        eval("gui.ex." + str(currObj) + ".addItems(self.list_ifbm1_international)")

                    for currObj in list_of_objects_ifbm2_rx:
                        eval("gui.ex." + str(currObj) + ".addItems(self.list_ifbm2_international)")



            if (Obj == "comboBox_general_NAT_INT" or Obj == "comboBox_LPTR1_national_international_tx_filterBank"):
                if (Mode == "National" or Mode == "National_Defult"):
                    gui.ex.freq_table_sb7a_txBe.setHidden(True)
                    gui.ex.freq_table_sb7b_txBe.setHidden(True)
                    gui.ex.pushButton_LPTR1_freq_table_sb8a_txBe.setHidden(False)
                    gui.ex.pushButton_LPTR1_freq_table_sb8b_txBe.setHidden(False)
                    gui.ex.pushButton_LPTR1_freq_table_sb8a_txBe.setGeometry(QtCore.QRect(440, 260, 101, 21))
                    gui.ex.pushButton_LPTR1_freq_table_sb8b_txBe.setGeometry(QtCore.QRect(450, 465, 101, 21))
                    list_of_objects_ifbm1_tx = ["comboBox_LPTR1_ifbm1_main_tx", "comboBox_LPTR1_ifbm1_main_feedback", "comboBox_LPTR1_ifbm1_scnd_feedback", "comboBox_LPTR1_ifbm1_scnd_tx"]
                    list_of_objects_ifbm2_tx = ["comboBox_LPTR1_ifbm2_main_tx", "comboBox_LPTR1_ifbm2_main_feedback", "comboBox_LPTR1_ifbm2_scnd_feedback", "comboBox_LPTR1_ifbm2_scnd_tx"]
                    for currObj in list_of_objects_ifbm1_tx:
                        eval("gui.ex." + str(currObj) + ".clear()")
                    for currObj in list_of_objects_ifbm2_tx:
                        eval("gui.ex." + str(currObj) + ".clear()")

                    for currObj in list_of_objects_ifbm1_tx:
                        eval("gui.ex." + str(currObj) + ".addItems(self.list_ifbm1)")

                    for currObj in list_of_objects_ifbm2_tx:
                        eval("gui.ex." + str(currObj) + ".addItems(self.listifbm2)")




                elif (Mode == "International"):
                    gui.ex.freq_table_sb7a_txBe.setHidden(False)
                    gui.ex.freq_table_sb7b_txBe.setHidden(False)
                    gui.ex.pushButton_LPTR1_freq_table_sb8a_txBe.setHidden(True)
                    gui.ex.pushButton_LPTR1_freq_table_sb8b_txBe.setHidden(True)
                    gui.ex.freq_table_sb7a_txBe.setGeometry(QtCore.QRect(440, 260, 101, 21))
                    gui.ex.freq_table_sb7b_txBe.setGeometry(QtCore.QRect(450, 465, 101, 21))

                    list_of_objects_ifbm1_tx = ["comboBox_LPTR1_ifbm1_main_tx", "comboBox_LPTR1_ifbm1_main_feedback", "comboBox_LPTR1_ifbm1_scnd_feedback", "comboBox_LPTR1_ifbm1_scnd_tx"]
                    list_of_objects_ifbm2_tx = ["comboBox_LPTR1_ifbm2_main_tx", "comboBox_LPTR1_ifbm2_main_feedback", "comboBox_LPTR1_ifbm2_scnd_feedback", "comboBox_LPTR1_ifbm2_scnd_tx"]

                    for currObj in list_of_objects_ifbm1_tx:
                        eval("gui.ex." + str(currObj) + ".clear()")
                    for currObj in list_of_objects_ifbm2_tx:
                        eval("gui.ex." + str(currObj) + ".clear()")

                    for currObj in list_of_objects_ifbm1_tx:
                        eval("gui.ex." + str(currObj) + ".addItems(self.list_ifbm1_international)")

                    for currObj in list_of_objects_ifbm2_tx:
                        eval("gui.ex." + str(currObj) + ".addItems(self.list_ifbm2_international)")

                    gui.ex.comboBox_LPTR1_ifbm1_main_tx.setCurrentIndex(0)
                    gui.ex.comboBox_LPTR1_ifbm1_main_feedback.setCurrentIndex(1)
                    gui.ex.comboBox_LPTR1_ifbm1_scnd_feedback.setCurrentIndex(2)
                    gui.ex.comboBox_LPTR1_ifbm1_scnd_tx.setCurrentIndex(3)
                    gui.ex.comboBox_LPTR1_ifbm2_main_tx.setCurrentIndex(0)
                    gui.ex.comboBox_LPTR1_ifbm2_main_feedback.setCurrentIndex(1)
                    gui.ex.comboBox_LPTR1_ifbm2_scnd_feedback.setCurrentIndex(2)
                    gui.ex.comboBox_LPTR1_ifbm2_scnd_tx.setCurrentIndex(3)

            if (Obj == "comboBox_general_NAT_INT" or Obj == "national_international_fl49"):
                if (Mode == "National" or Mode == "National_Defult"):
                    gui.ex.comboBox_LPTR1_onOff_fl49.setHidden(True)
                    gui.ex.spinBox_Fl49.setHidden(True)
                    gui.ex.label_379.setHidden(True)

                    if (Obj == "national_international_fl49"):
                        gui.ex.national_international_fl49.setHidden(False)
                    else:
                        gui.ex.national_international_fl49.setHidden(True)

                    if (Mode == "National_Defult"):
                        gui.ex.national_international_fl49.setHidden(False)



                elif (Mode == "International"):
                    gui.ex.comboBox_LPTR1_onOff_fl49.setHidden(False)
                    gui.ex.spinBox_Fl49.setHidden(False)
                    gui.ex.label_379.setHidden(False)
                    gui.ex.national_international_fl49.setHidden(True)

                    if (Obj == "national_international_fl49"):
                        gui.ex.national_international_fl49.setHidden(False)

            gui.ex.comboBox_LPTR1_ifbm1_main_tx.setCurrentIndex(0)
            gui.ex.comboBox_LPTR1_ifbm1_main_feedback.setCurrentIndex(1)
            gui.ex.comboBox_LPTR1_ifbm1_scnd_feedback.setCurrentIndex(2)
            gui.ex.comboBox_LPTR1_ifbm1_scnd_tx.setCurrentIndex(3)
            gui.ex.comboBox_LPTR1_ifbm2_main_tx.setCurrentIndex(0)
            gui.ex.comboBox_LPTR1_ifbm2_main_feedback.setCurrentIndex(1)
            gui.ex.comboBox_LPTR1_ifbm2_scnd_feedback.setCurrentIndex(2)
            gui.ex.comboBox_LPTR1_ifbm2_scnd_tx.setCurrentIndex(3)
            gui.ex.IFBM1_Rx_CH1.setCurrentIndex(0)
            gui.ex.IFBM1_Rx_CH2.setCurrentIndex(1)
            gui.ex.IFBM1_Rx_CH3.setCurrentIndex(2)
            gui.ex.IFBM1_Rx_CH4.setCurrentIndex(3)
            gui.ex.IFBM2_Rx_CH1.setCurrentIndex(0)
            gui.ex.IFBM2_Rx_CH2.setCurrentIndex(1)
            gui.ex.IFBM2_Rx_CH3.setCurrentIndex(2)
            gui.ex.IFBM2_Rx_CH4.setCurrentIndex(3)

        except Exception as error:
            logger.write("[national_international_comp_sel]" + str(error), status=False)

    def Generic_Filter_Algorithm(self, Ch, SB_Type, Manufacturer, NAT_or_INT):
        try:
            list_T_IN = []
            list_CH = []
            list_T_OUT = []
            returned_list = []
            # International filters
            if (SB_Type == "A" and Manufacturer == "MicroChip" and NAT_or_INT == "International"):
                df = pd.read_excel("Files\\VA\\LPTR1\\Excel Files\\INT_Module_FilterBank_TABLE.xlsx", sheet_name="SB7A_MicroChip")
            if (SB_Type == "A" and Manufacturer == "RFcore" and NAT_or_INT == "International"):
                df = pd.read_excel("Files\\VA\\LPTR1\\Excel Files\\INT_Module_FilterBank_TABLE.xlsx", sheet_name="SB7A_RFCore")
            if (SB_Type == "B" and Manufacturer == "MicroChip" and NAT_or_INT == "International"):
                df = pd.read_excel("Files\\VA\\LPTR1\\Excel Files\\INT_Module_FilterBank_TABLE.xlsx", sheet_name="SB7B_MicroChip")
            if (SB_Type == "B" and Manufacturer == "RFcore" and NAT_or_INT == "International"):
                df = pd.read_excel("Files\\VA\\LPTR1\\Excel Files\\INT_Module_FilterBank_TABLE.xlsx", sheet_name="SB7B_RFCore")

            # National filters
            if (SB_Type == "A" and Manufacturer == "MicroChip" and NAT_or_INT == "National"):
                df = pd.read_excel("Files\\VA\\LPTR1\\Excel Files\\INT_Module_FilterBank_TABLE.xlsx", sheet_name="SB8A_MicroChip")
            if (SB_Type == "A" and Manufacturer == "RFcore" and NAT_or_INT == "National"):
                df = pd.read_excel("Files\\VA\\LPTR1\\Excel Files\\INT_Module_FilterBank_TABLE.xlsx", sheet_name="SB8A_RFCore")
            if (SB_Type == "B" and Manufacturer == "MicroChip" and NAT_or_INT == "National"):
                df = pd.read_excel("Files\\VA\\LPTR1\\Excel Files\\INT_Module_FilterBank_TABLE.xlsx", sheet_name="SB8B_MicroChip")
            if (SB_Type == "B" and Manufacturer == "RFcore" and NAT_or_INT == "National"):
                df = pd.read_excel("Files\\VA\\LPTR1\\Excel Files\\INT_Module_FilterBank_TABLE.xlsx", sheet_name="SB8B_RFCore")

            for i in range(len(df)):
                try:
                    if (str(df.iloc[i, 1]) == str(Ch)):
                        return [int(df.iloc[i, 0]), int(df.iloc[i, 2])]
                except Exception as error:
                    pass

            return False

        except Exception as error:
            logger.write("[Generic_Filter_Algorithm] error: " + str(error), False)

            return False

    def GetVersion(self):
        try:
            # FPGA version
            logger.write("FPGA Version")
            Fpga_version_high = script_page.ReadRegister("LPTR", "0x00000000", 0.01)
            logger.write("Fpga version High " + str(Fpga_version_high))
            Fpga_version_low = script_page.ReadRegister("LPTR", "0x00000002", 0.01)
            logger.write("Fpga version Low: " + str(Fpga_version_low))
            logger.write("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
            # CPLD version
            logger.write("CPLD Version")
            script_page.WriteRegister("LPTR", "0x0000012C", "11", 0.01)
            Cpld_version_high = script_page.ReadRegister("LPTR", "0x00000134", 0.01)
            logger.write("CPLD version High " + str(Cpld_version_high))
            script_page.WriteRegister("LPTR", "0x0000012C", "111", 0.01)
            Cpld_version_Low = script_page.ReadRegister("LPTR", "0x00000134", 0.01)
            logger.write("CPLD version Low: " + str(Cpld_version_Low))
            logger.write("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
            logger.write("Board and Assy version ")
            Init__DATA_IO_EXP_U207 = script_page.WriteRegister("LPTR", "0x0000013C", "00FF", 0.01)
            Init__CRTL_IO_EXP_U207 = script_page.WriteRegister("LPTR", "0x0000013E", "4203", 0.01)
            CRTL_IO_EXP_U207 = script_page.WriteRegister("LPTR", "0x0000013E", "4300", 0.01)
            GetData_IO_EXP_U207 = script_page.ReadRegister("LPTR", "0x00000140", 0.01)
            logger.write("Board and Assy version: " + str(GetData_IO_EXP_U207))
            logger.write("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")


        except Exception as error:
            logger.write("[GetVersion] error: " + str(error), False)

    def lptr1_component(self):
        try:

            gui.ex.component_index_btn.setHidden(False)
            gui.ex.label_second_arrow.setHidden(False)
            gui.ex.card_index_btn.setHidden(False)
            gui.ex.label_third_arrow.setHidden(False)
            gui.ex.card_index_btn.setText("LPTR1\nUHF_RX board")
            action.status_side_menu(False)
            gui.ex.va_tabWidget.setCurrentIndex(1)
            gui.ex.va_tabWidget.tabBar().hide()
            gui.ex.lptr1_cards_tab.tabBar().hide()
            gui.ex.lptr1_cards_tab.setCurrentIndex(0)
            if gui.ex.comboBox_Configuration_fullscreen_status.currentText() == "Yes":
                WriteStream.write(["showMaximized()"])

        except Exception as error:
            logger.write("[lptr1_component] error: " + str(error), False)

    def uhf_rx_card(self):
        gui.ex.lptr1_cards_tab.setCurrentIndex(0)
        gui.ex.card_index_btn.setText("LPTR1\nUHF_RX board")

    def vhf_lband_rx_card(self):
        gui.ex.lptr1_cards_tab.setCurrentIndex(1)
        gui.ex.card_index_btn.setText("LPTR1\nVHF_LBAND_RX board")

    def tx_card(self):
        gui.ex.lptr1_cards_tab.setCurrentIndex(2)
        gui.ex.card_index_btn.setText("LPTR1\nTX board")

    def Module_Filter_Bank_card(self):
        gui.ex.lptr1_cards_tab.setCurrentIndex(3)
        gui.ex.card_index_btn.setText("LPTR1\nModule Filter Bank")

    def ReadPowerGood_nav3(self):
        try:
            script_page.WriteRegister("LPTR", "0x00000138", "4700", 0.01)
            value = script_page.ReadRegister("LPTR", "0x0000013A", 0.01)
            value = (str(bin(int(str(value), 16)))[2:]).zfill(16)
            gui.ex.nav3_1P0.setText(value[9])
            gui.ex.nav3_1P3.setText(value[10])
            gui.ex.nav3_1P8.setText(value[11])

        except Exception as error:
            logger.write("[ReadPowerGood_nav3] error: " + str(error), False)

    def ReadPowerGood_nav2(self):
        try:
            script_page.WriteRegister("LPTR", "0x00000138", "4700", 0.01)
            value = script_page.ReadRegister("LPTR", "0x0000013A", 0.01)
            value = (str(bin(int(str(value), 16)))[2:]).zfill(16)
            gui.ex.nav2_1P0.setText(value[13])
            gui.ex.nav2_1P3.setText(value[14])
            gui.ex.nav2_1P8.setText(value[15])

        except Exception as error:
            logger.write("[ReadPowerGood_nav2] error: " + str(error))

    def ReadPowerGood_nav4(self):
        try:
            script_page.WriteRegister("LPTR", "0x00000138", "4701", 0.01)
            value = script_page.ReadRegister("LPTR", "0x0000013A", 0.01)
            value = (str(bin(int(str(value), 16)))[2:]).zfill(16)
            gui.ex.nav4_1P0.setText(value[13])
            gui.ex.nav4_1P3.setText(value[14])
            gui.ex.nav4_1P8.setText(value[15])

        except Exception as error:
            logger.write("[ReadPowerGood_nav4] error: " + str(error))

    def ReadPowerGood_nav1(self):
        try:
            script_page.WriteRegister("LPTR", "0x00000138", "4701", 0.01)
            value_for_p8_p3 = script_page.ReadRegister("LPTR", "0x0000013A", 0.01)
            value_for_p8_p3 = (str(bin(int(str(value_for_p8_p3), 16)))[2:]).zfill(16)
            gui.ex.nav1_1P3.setText(value_for_p8_p3[8])
            gui.ex.nav1_1P8.setText(value_for_p8_p3[9])
            script_page.WriteRegister("LPTR", "0x00000138", "4702", 0.01)
            value_for_p1 = script_page.ReadRegister("LPTR", "0x0000013A", 0.01)
            value_for_p1 = (str(bin(int(str(value_for_p1), 16)))[2:]).zfill(16)
            gui.ex.nav1_1P0.setText(value_for_p1[15])

        except Exception as error:
            logger.write("[ReadPowerGood_nav1] error: " + str(error))

    def Read_id_ver_ifbm_tx(self):
        try:
            script_page.WriteRegister("LPTR", "0x00000138", "4500", 0.01)
            value = script_page.ReadRegister("LPTR", "0x0000013A", 0.01)
            value = (str(bin(int(str(value), 16)))[2:]).zfill(16)
            gui.ex.ifbm2_d2_tx.setText(value[8])
            gui.ex.ifbm2_d1_tx.setText(value[9])
            gui.ex.ifbm2_d0_tx.setText(value[10])
            gui.ex.ifbm1_v1_tx.setText(value[11])
            gui.ex.ifbm1_v0_tx.setText(value[12])
            gui.ex.ifbm1_d2_tx.setText(value[13])
            gui.ex.ifbm1_d1_tx.setText(value[14])
            gui.ex.ifbm1_d0_tx.setText(value[15])
            script_page.WriteRegister("LPTR", "0x00000138", "4501", 0.01)
            value = script_page.ReadRegister("LPTR", "0x0000013A", 0.01)
            value = (str(bin(int(str(value), 16)))[2:]).zfill(16)
            gui.ex.ifbm2_v1_tx.setText(value[14])
            gui.ex.ifbm2_v0_tx.setText(value[15])

        except Exception as error:
            logger.write("[Read_id_ver_ifbm_tx] error: " + str(error))

    def Read_id_ver_ifbm_rx(self):
        try:
            script_page.WriteRegister("LPTR", "0x00000138", "4501", 0.01)
            value = script_page.ReadRegister("LPTR", "0x0000013A", 0.01)
            print(value)
            value = (str(bin(int(str(value), 16)))[2:]).zfill(16)
            gui.ex.ifbm2_d0_RX.setText(value[8])
            gui.ex.ifbm1_v1_RX.setText(value[9])
            gui.ex.ifbm1_v0_RX.setText(value[10])
            gui.ex.ifbm1_d2_RX.setText(value[11])
            gui.ex.ifbm1_d1_RX.setText(value[12])
            gui.ex.ifbm1_d0_RX.setText(value[13])
            gui.ex.ifbm2_v1_RX.setText(value[14])
            gui.ex.ifbm2_v0_RX.setText(value[15])
            script_page.WriteRegister("LPTR", "0x00000138", "4502", 0.01)
            value = script_page.ReadRegister("LPTR", "0x0000013A", 0.01)
            value = (str(bin(int(str(value), 16)))[2:]).zfill(16)
            gui.ex.ifbm2_v1_RX.setText(value[12])
            gui.ex.ifbm2_v0_RX.setText(value[13])
            gui.ex.ifbm2_d2_RX.setText(value[14])
            gui.ex.ifbm2_d1_RX.setText(value[15])

        except Exception as error:
            logger.write("[Read_id_ver_ifbm_rx] error: " + str(error))

    def Read_Tlynx_PG(self):
        try:
            script_page.WriteRegister("LPTR", "0x0000013E", "4100", 0.01)
            value = script_page.ReadRegister("LPTR", "0x00000140", 0.01)
            logger.write(value)
            value = (str(bin(int(str(value), 16)))[2:]).zfill(16)
            if (value[8] == "1"):
                gui.ex.Tlynx_ScndDriver_PG.setText(value[8])
                gui.ex.Tlynx_ScndDriver_PG.setStyleSheet("background-color: rgb(0, 255, 0);\n"
                                                         " border: 2px solid;")
            elif (value[8] == "0"):
                gui.ex.Tlynx_ScndDriver_PG.setText(value[8])
                gui.ex.Tlynx_ScndDriver_PG.setStyleSheet("background-color: rgb(255, 0, 0);\n"
                                                         " border: 2px solid;")
            if (value[9] == "1"):
                gui.ex.Tlynx_28V_PG.setText(value[9])
                gui.ex.Tlynx_28V_PG.setStyleSheet("background-color: rgb(0, 255, 0);\n"
                                                  " border: 2px solid;")
            elif (value[9] == "0"):
                gui.ex.Tlynx_28V_PG.setText(value[9])
                gui.ex.Tlynx_28V_PG.setStyleSheet("background-color: rgb(255, 0, 0);\n"
                                                  " border: 2px solid;")
            if (value[10] == "0"):
                gui.ex.Tlynx_3_6V_PG.setText(value[10])
                gui.ex.Tlynx_3_6V_PG.setStyleSheet("background-color: rgb(255, 0, 0);\n"
                                                   " border: 2px solid;")
            elif (value[10] == " 1"):
                gui.ex.Tlynx_3_6V_PG.setText(value[10])
                gui.ex.Tlynx_3_6V_PG.setStyleSheet("background-color: rgb(0, 255, 0);\n"
                                                   " border: 2px solid;")
            if (value[14] == "1"):
                gui.ex.Tlynx_5_5V_PG.setText(value[14])
                gui.ex.Tlynx_5_5V_PG.setStyleSheet("background-color: rgb(0, 255, 0);\n"
                                                   " border: 2px solid;")
            elif (value[14] == "0"):
                gui.ex.Tlynx_5_5V_PG.setText(value[14])
                gui.ex.Tlynx_5_5V_PG.setStyleSheet("background-color: rgb(255, 0, 0);\n"
                                                   " border: 2px solid;")
            if (value[15] == "1"):
                gui.ex.Tlynx_MainDriver_PG.setText(value[15])
                gui.ex.Tlynx_MainDriver_PG.setStyleSheet("background-color: rgb(0, 255, 0);\n"
                                                         " border: 2px solid;")
            elif (value[15] == "0"):
                gui.ex.Tlynx_MainDriver_PG.setText(value[15])
                gui.ex.Tlynx_MainDriver_PG.setStyleSheet("background-color: rgb(255, 0, 0);\n"
                                                         " border: 2px solid;")

        except Exception as error:
            logger.write("[Read_Tlynx_PG] error: " + str(error))

    def DP4T_Mipi(self, UsidSel, UserSelection):
        try:
            dict_Mipi = {"Isolation": 256,
                         "RFIN1-RFOUT1,RFOUT2-Isolation": 257,
                         "RFIN1-RFOUT1,RFIN2-RFOUT2": 275,
                         "RFIN1-RFOUT1,RFIN3-RFOUT2": 277,
                         "RFIN1-RFOUT1,RFIN4-RFOUT2": 281,
                         "RFIN2-RFOUT1,RFOUT2-isolation": 258,
                         "RFIN2-RFOUT1,RFIN1-RFOUT2": 291,
                         "RFIN2-RFOUT1,RFIN3-RFOUT2": 278,
                         "RFIN2-RFOUT1,RFIN4-RFOUT2": 282,
                         "RFIN3-RFOUT1,RFOUT2-Isolation": 260,
                         "RFIN3-RFOUT1,RFIN1-RFOUT2": 293,
                         "RFIN3-RFOUT1,RFIN2-RFOUT2": 294,
                         "RFIN3-RFOUT1,RFIN4-RFOUT2": 284,
                         "RFIN4-RFOUT1,RFOUT2-Isolation": 264,
                         "RFIN4-RFOUT1,RFIN1-RFOUT2": 297,
                         "RFIN4-RFOUT1,RFIN2-RFOUT2": 298,
                         "RFIN4-RFOUT1,RFIN3-RFOUT2": 300,
                         "RFIN1-RFOUT2,RFOUT1-Isolation": 305,
                         "RFIN2-RFOUT2,RFOUT1-Isolation": 306,
                         "RFIN3-RFOUT2,RFOUT1-Isolation": 308,
                         "RFIN4-RFOUT2,RFOUT1-Isolation": 312

                         }

            mipi_value = dict_Mipi[str(UserSelection)]
            #
            # if str(UserSelection) == "Isolation":
            #     mipi_value = "256"
            # elif str(UserSelection) == "RFIN1-RFOUT1,RFOUT2-Isolation":
            #     mipi_value = "257"
            # elif str(UserSelection) == "RFIN1-RFOUT1,RFIN2-RFOUT2":
            #     mipi_value = "275"
            # elif str(UserSelection) == "RFIN1-RFOUT1,RFIN3-RFOUT2":
            #     mipi_value = "277"
            # elif str(UserSelection) == "RFIN1-RFOUT1,RFIN4-RFOUT2":
            #     mipi_value = "281"
            # elif str(UserSelection) == "RFIN2-RFOUT1,RFOUT2-isolation":
            #     mipi_value = "258"
            # elif str(UserSelection) == "RFIN2-RFOUT1,RFIN1-RFOUT2":
            #     mipi_value = "291"
            # elif str(UserSelection) == "RFIN2-RFOUT1,RFIN3-RFOUT2":
            #     mipi_value = "278"
            # elif str(UserSelection) == "RFIN2-RFOUT1,RFIN4-RFOUT2":
            #     mipi_value = "282"
            # elif str(UserSelection) == "RFIN3-RFOUT1,RFOUT2-Isolation":
            #     mipi_value = "260"
            # elif str(UserSelection) == "RFIN3-RFOUT1,RFIN1-RFOUT2":
            #     mipi_value = "293"
            # elif str(UserSelection) == "RFIN3-RFOUT1,RFIN2-RFOUT2":
            #     mipi_value = "294"
            # elif str(UserSelection) == "RFIN3-RFOUT1,RFIN4-RFOUT2":
            #     mipi_value = "284"
            # elif str(UserSelection) == "RFIN4-RFOUT1,RFOUT2-Isolation":
            #     mipi_value = "264"
            # elif str(UserSelection) == "RFIN4-RFOUT1,RFIN1-RFOUT2":
            #     mipi_value = "297"
            # elif str(UserSelection) == "RFIN4-RFOUT1,RFIN2-RFOUT2":
            #     mipi_value = "298"
            # elif str(UserSelection) == "RFIN4-RFOUT1,RFIN3-RFOUT2":
            #     mipi_value = "300"
            # elif str(UserSelection) == "RFIN1-RFOUT2,RFOUT1-Isolation":
            #     mipi_value = "305"
            # elif str(UserSelection) == "RFIN2-RFOUT2,RFOUT1-Isolation":
            #     mipi_value = "306"
            # elif str(UserSelection) == "RFIN3-RFOUT2,RFOUT1-Isolation":
            #     mipi_value = "308"
            # elif str(UserSelection) == "RFIN4-RFOUT2,RFOUT1-Isolation":
            #     mipi_value = "312"

            if UsidSel == 0:
                mipi_value = (str(hex(int(str(mipi_value), 10)))[2:])
            else:
                mipi_value = int(mipi_value)
                mipi_value += 16384
                mipi_value = (str(hex(int(str(mipi_value), 10)))[2:])

            return str(mipi_value)

        except Exception as error:
            logger.write("[DP4T_Mipi] error: " + str(error))

    def manage_Fl64_Notch(self):
        try:

            # # shir and aviad
            # nameOfMode = gui.ex.national_international_notch_fl64.currentText()
            # self.national_international_comp_sel (Mode = nameOfMode , Obj = "national_international_notch_fl64")
            # # shir and aviad

            if gui.ex.comboBox_general_NAT_INT.currentText() == "International":
                gui.ex.pushButton_band4.setHidden(False)
                gui.ex.label_319.setHidden(False)
                gui.ex.SpinBox_FE_Notch_band4.setHidden(False)
                gui.ex.onOff_band4_fl64.setHidden(False)
                gui.ex.national_international_notch_fl64.setHidden(True)
                gui.ex.SpinBox_FE_Notch_band1.setMaximum(299.9)
                gui.ex.SpinBox_FE_Notch_band1.setMinimum(225.0)
                gui.ex.SpinBox_FE_Notch_band2.setMaximum(374.9)
                gui.ex.SpinBox_FE_Notch_band2.setMinimum(300.0)
                gui.ex.SpinBox_FE_Notch_band3.setMaximum(449.9)
                gui.ex.SpinBox_FE_Notch_band3.setMinimum(375.0)
                gui.ex.SpinBox_FE_Notch_band4.setMaximum(512.0)
                gui.ex.SpinBox_FE_Notch_band4.setMinimum(450.0)
                gui.ex.spinBox_Fl49.setHidden(False)
                gui.ex.label_379.setHidden(False)
                gui.ex.comboBox_LPTR1_onOff_fl49.setHidden(False)

            elif gui.ex.comboBox_general_NAT_INT.currentText() == "National":
                gui.ex.label_319.setHidden(True)
                gui.ex.SpinBox_FE_Notch_band4.setHidden(True)
                gui.ex.onOff_band4_fl64.setHidden(True)
                gui.ex.national_international_notch_fl64.setHidden(True)
                gui.ex.pushButton_band4.setHidden(True)

                gui.ex.SpinBox_FE_Notch_band1.setMaximum(599.9)
                gui.ex.SpinBox_FE_Notch_band1.setMinimum(486.0)
                gui.ex.SpinBox_FE_Notch_band2.setMaximum(649.9)
                gui.ex.SpinBox_FE_Notch_band2.setMinimum(600.0)
                gui.ex.SpinBox_FE_Notch_band3.setMaximum(750.0)
                gui.ex.SpinBox_FE_Notch_band3.setMinimum(650.0)
                gui.ex.spinBox_Fl49.setHidden(True)
                gui.ex.label_379.setHidden(True)
                gui.ex.comboBox_LPTR1_onOff_fl49.setHidden(True)
                gui.ex.national_international_fl49.setHidden(True)

            elif gui.ex.comboBox_general_NAT_INT.currentText() == "Free Style":
                gui.ex.national_international_notch_fl64.setHidden(False)
                gui.ex.spinBox_Fl49.setHidden(False)
                gui.ex.label_379.setHidden(False)
                gui.ex.comboBox_LPTR1_onOff_fl49.setHidden(False)
                gui.ex.national_international_fl49.setHidden(False)
                if gui.ex.national_international_notch_fl64.currentText() == "National":
                    gui.ex.label_319.setHidden(True)
                    gui.ex.SpinBox_FE_Notch_band4.setHidden(True)
                    gui.ex.onOff_band4_fl64.setHidden(True)
                    gui.ex.pushButton_band4.setHidden(True)
                    gui.ex.SpinBox_FE_Notch_band1.setMaximum(599.9)
                    gui.ex.SpinBox_FE_Notch_band1.setMinimum(486.0)
                    gui.ex.SpinBox_FE_Notch_band2.setMaximum(649.9)
                    gui.ex.SpinBox_FE_Notch_band2.setMinimum(600.0)
                    gui.ex.SpinBox_FE_Notch_band3.setMaximum(750.0)
                    gui.ex.SpinBox_FE_Notch_band3.setMinimum(650.0)

                elif gui.ex.national_international_notch_fl64.currentText() == "International":
                    gui.ex.label_319.setHidden(False)
                    gui.ex.SpinBox_FE_Notch_band4.setHidden(False)
                    gui.ex.onOff_band4_fl64.setHidden(False)
                    gui.ex.pushButton_band4.setHidden(False)
                    gui.ex.SpinBox_FE_Notch_band1.setMaximum(299.9)
                    gui.ex.SpinBox_FE_Notch_band1.setMinimum(225.0)
                    gui.ex.SpinBox_FE_Notch_band2.setMaximum(374.9)
                    gui.ex.SpinBox_FE_Notch_band2.setMinimum(300.0)
                    gui.ex.SpinBox_FE_Notch_band3.setMaximum(449.9)
                    gui.ex.SpinBox_FE_Notch_band3.setMinimum(375.0)
                    gui.ex.SpinBox_FE_Notch_band4.setMaximum(512.0)
                    gui.ex.SpinBox_FE_Notch_band4.setMinimum(450.0)






        except Exception as error:
            logger.write("[manage_Fl64_Notch] error: " + str(error))

    def freeStyle_Mood_notchFl64(self):
        try:
            if gui.ex.national_international_notch_fl64.currentText() == "National":
                gui.ex.label_319.setHidden(True)
                gui.ex.SpinBox_FE_Notch_band4.setHidden(True)
                gui.ex.onOff_band4_fl64.setHidden(True)
                gui.ex.pushButton_band4.setHidden(True)
                gui.ex.SpinBox_FE_Notch_band1.setMaximum(599.9)
                gui.ex.SpinBox_FE_Notch_band1.setMinimum(486.0)
                gui.ex.SpinBox_FE_Notch_band2.setMaximum(649.9)
                gui.ex.SpinBox_FE_Notch_band2.setMinimum(600.0)
                gui.ex.SpinBox_FE_Notch_band3.setMaximum(750.0)
                gui.ex.SpinBox_FE_Notch_band3.setMinimum(650.0)
            elif gui.ex.national_international_notch_fl64.currentText() == "International":
                gui.ex.label_319.setHidden(False)
                gui.ex.SpinBox_FE_Notch_band4.setHidden(False)
                gui.ex.onOff_band4_fl64.setHidden(False)
                gui.ex.pushButton_band4.setHidden(False)
                gui.ex.SpinBox_FE_Notch_band1.setMaximum(299.9)
                gui.ex.SpinBox_FE_Notch_band1.setMinimum(225.0)
                gui.ex.SpinBox_FE_Notch_band2.setMaximum(374.9)
                gui.ex.SpinBox_FE_Notch_band2.setMinimum(300.0)
                gui.ex.SpinBox_FE_Notch_band3.setMaximum(449.9)
                gui.ex.SpinBox_FE_Notch_band3.setMinimum(375.0)
                gui.ex.SpinBox_FE_Notch_band4.setMaximum(512.0)
                gui.ex.SpinBox_FE_Notch_band4.setMinimum(450.0)






        except Exception as error:
            logger.write("[freeStyle_Mood_notchFl64] error: " + str(error))

    def send_notch_fl64(self):
        try:
            if gui.ex.checkBox_IoExpender_script.isChecked() == True:
                lptr1.run_io_expender_script()
            else:
                pass
            fl49_bits = ""
            fl64_bits = ""
            nav4_bits = ""

            if (gui.ex.comboBox_LPTR1_onOff_fl49.currentText() == "0N"):
                fl49_bits = "1"
            elif (gui.ex.comboBox_LPTR1_onOff_fl49.currentText() == "0FF"):
                fl49_bits = "0"

            if (gui.ex.comboBox_LPTR1_onoff_fl64.currentText() == "Power ON"):
                fl64_bits = "1"
            elif (gui.ex.comboBox_LPTR1_onoff_fl64.currentText() == "Power OFF"):
                fl64_bits = "0"
            if (gui.ex.comboBox_LPTR1_resetB_nav4.currentText() == "ResetB_ON") :
                nav4_bits = "0"
            elif (gui.ex.comboBox_LPTR1_resetB_nav4.currentText() == "ResetB_OFF"):
                nav4_bits = "1"

            value_0136 = "0000000000" +str(fl49_bits)+str(fl64_bits)+str(nav4_bits)+"000"
            value_0136 = (str(hex(int(str(value_0136), 2)))[2:])
            script_page.WriteRegister("LPTR","0x00000136",value_0136,1)
            script_page.WriteRegister("LPTR", "0x00000138", "4605", 1)


            # CPLD H1
            address_0xf4 = "0x" + "F4".zfill(8)
            address_0xf6 = "0x" + "F6".zfill(8)

            # FE NOTCH FL64  Band 1

            notch_band1_fl64 = int((float(gui.ex.SpinBox_FE_Notch_band1.value())) * 10)

            if gui.ex.onOff_band1_fl64.currentText() == "BP ON":
                notch_band1_fl64 += 32768
            elif gui.ex.onOff_band1_fl64.currentText() == "BP OFF":
                notch_band1_fl64 += 0

            notch_band1_fl64 = (str(hex(int(str(notch_band1_fl64), 10)))[2:])
            script_page.WriteRegister("LPTR", address_0xf4, str(notch_band1_fl64), 0.01)  # FE NOTCH FL64  : Group H1
            script_page.WriteRegister("LPTR", address_0xf6, "101", 0.01)  # FE NOTCH FL64  : Group H1

            # FE NOTCH FL64  Band 2

            notch_band2_fl64 = int((float(gui.ex.SpinBox_FE_Notch_band2.value())) * 10)
            if gui.ex.onOff_band2_fl64.currentText() == "BP ON":
                notch_band2_fl64 += 32768
            elif gui.ex.onOff_band2_fl64.currentText() == "BP OFF":
                notch_band2_fl64 += 0
            notch_band2_fl64 = (str(hex(int(str(notch_band2_fl64), 10)))[2:])
            script_page.WriteRegister("LPTR", address_0xf4, str(notch_band2_fl64), 0.01)  # FE NOTCH FL64  : Group H1
            script_page.WriteRegister("LPTR", address_0xf6, "201", 0.01)  # FE NOTCH FL64  : Group H1

            # FE NOTCH FL64  Band 3

            notch_band3_fl64 = int((float(gui.ex.SpinBox_FE_Notch_band3.value())) * 10)
            if gui.ex.onOff_band3_fl64.currentText() == "BP ON":
                notch_band3_fl64 += 32768
            elif gui.ex.onOff_band3_fl64.currentText() == "BP OFF":
                notch_band3_fl64 += 0

            notch_band3_fl64 = (str(hex(int(str(notch_band3_fl64), 10)))[2:])
            script_page.WriteRegister("LPTR", address_0xf4, str(notch_band3_fl64), 0.01)  # FE NOTCH FL64  : Group H1
            script_page.WriteRegister("LPTR", address_0xf6, "301", 0.01)  # FE NOTCH FL64  : Group H1

            # FE NOTCH FL64  Band 4

            if gui.ex.comboBox_general_NAT_INT.currentText() == "International" or (gui.ex.comboBox_general_NAT_INT.currentText() == "Free Style" and gui.ex.national_international_notch_fl64.currentText() == "International"):
                notch_band4_fl64 = int((float(gui.ex.SpinBox_FE_Notch_band4.value())) * 10)
                if gui.ex.onOff_band4_fl64.currentText() == "BP ON":
                    notch_band4_fl64 += 32768
                elif gui.ex.onOff_band4_fl64.currentText() == "BP OFF":
                    notch_band4_fl64 += 0
                notch_band4_fl64 = (str(hex(int(str(notch_band4_fl64), 10)))[2:])
                script_page.WriteRegister("LPTR", address_0xf4, str(notch_band4_fl64), 0.01)  # FE NOTCH FL64  : Group H1
                script_page.WriteRegister("LPTR", address_0xf6, "401", 0.01)  # FE NOTCH FL64  : Group H1

        except Exception as error:
            logger.write("[send_notch_fl64] error: " + str(error))

    def SetCurrentIndex(self, listOfCombo, listOfItemsAtFirst):
        for currCombo in listOfCombo:
            eval("gui.ex." + str(currCombo) + ".blockSignals(True)")

        time.sleep(1)
        for i in range(len(listOfCombo)):
            eval("gui.ex." + str(listOfCombo[i]) + ".setCurrentText(str(listOfItemsAtFirst[i]))")
            time.sleep(2)
        for currCombo in listOfCombo:
            eval("gui.ex." + str(currCombo) + ".blockSignals(False)")

    def func_for_nihut(self, num, ans="", sum=0, list_1=[16, 8, 4, 2, 1]):
        for i in list_1:
            if i + sum <= num:
                sum += i
                ans += "0"
            else:
                ans += "1"
        return ans

    def func_for_nihut_six_bits(self, num, ans="", sum=0, list_1=[16, 8, 4, 2, 1, 0.5]):
        for i in list_1:
            if i + sum <= num:
                sum += i
                ans += "0"
            else:
                ans += "1"
        return ans

    def block_open_signals_combo(self, bool):
        # fullObjsCopy = ["comboBox_LPTR1_ifbm1_main_tx", "comboBox_LPTR1_ifbm1_main_feedback", "comboBox_LPTR1_ifbm1_scnd_feedback", "comboBox_LPTR1_ifbm1_scnd_tx", "comboBox_LPTR1_ifbm2_main_tx", "comboBox_LPTR1_ifbm2_main_feedback", "comboBox_LPTR1_ifbm2_scnd_feedback", "comboBox_LPTR1_ifbm2_scnd_tx"]
        # for curr_obj in fullObjsCopy:
        #     eval("gui.ex." + str(curr_obj) + ".blockSignals(True)")

        gui.ex.comboBox_LPTR1_ifbm1_main_tx.blockSignals(bool)
        gui.ex.comboBox_LPTR1_ifbm1_main_feedback.blockSignals(bool)
        gui.ex.comboBox_LPTR1_ifbm1_scnd_feedback.blockSignals(bool)
        gui.ex.comboBox_LPTR1_ifbm1_scnd_tx.blockSignals(bool)
        gui.ex.comboBox_LPTR1_ifbm2_main_tx.blockSignals(bool)
        gui.ex.comboBox_LPTR1_ifbm2_main_feedback.blockSignals(bool)
        gui.ex.comboBox_LPTR1_ifbm2_scnd_feedback.blockSignals(bool)
        gui.ex.comboBox_LPTR1_ifbm2_scnd_tx.blockSignals(bool)

        time.sleep(1)

    def open_freq_table_pic(self, type):
        try:
            os.startfile("Files\\VA\\LPTR1\\Pictures\\" + str(type)+".PNG", 'open')
        except Exception as error:
            logger.write("[open_freq_table_pic]" + str(error))

    def Manage_Buttons_u158_u161(self, obj):
        objList = ["u158_u161_kav", "pushButton_LPTR1_u158_u161"]

        for currObj in objList:

            WriteStream.write([str(currObj) + ".setChecked", False])
            if currObj == "u158_u161_kav":
                icon61 = QtGui.QIcon()
                icon61.addPixmap(QtGui.QPixmap("pictures\\kav.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon61)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
            else:
                icon51 = QtGui.QIcon()
                icon51.addPixmap(QtGui.QPixmap("pictures\\meshulash.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon51)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])

        for currObj in objList:
            if currObj == obj:
                WriteStream.write([str(currObj) + ".setChecked", True])
                if currObj == "u158_u161_kav":
                    icon40 = QtGui.QIcon()
                    icon40.addPixmap(QtGui.QPixmap("pictures\\kav_yellow.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon40)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
                    break
                else:
                    icon31 = QtGui.QIcon()
                    icon31.addPixmap(QtGui.QPixmap("pictures\\meshulash_green.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon31)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
                    break

    def Manage_Buttons_u144_u157(self, obj):
        objList = ["u144_u157_kav", "pushButton_LPTR1_u144_u157"]

        for currObj in objList:

            WriteStream.write([str(currObj) + ".setChecked", False])
            if currObj == "u144_u157_kav":
                icon61 = QtGui.QIcon()
                icon61.addPixmap(QtGui.QPixmap("pictures\\kav.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon61)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
            else:
                icon51 = QtGui.QIcon()
                icon51.addPixmap(QtGui.QPixmap("pictures\\meshulash.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon51)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])

        for currObj in objList:
            if currObj == obj:
                WriteStream.write([str(currObj) + ".setChecked", True])
                if currObj == "u144_u157_kav":
                    icon40 = QtGui.QIcon()
                    icon40.addPixmap(QtGui.QPixmap("pictures\\kav_yellow.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon40)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
                    break
                else:
                    icon31 = QtGui.QIcon()
                    icon31.addPixmap(QtGui.QPixmap("pictures\\meshulash_green.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon31)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
                    break

    def Manage_u39_sw4(self, obj):
        objList = ["pushButton_LPTR1_u39", "sw4_u39__rf2"]

        for currObj in objList:

            WriteStream.write([str(currObj) + ".setChecked", False])
            if currObj == "pushButton_LPTR1_u39":
                icon61 = QtGui.QIcon()
                icon61.addPixmap(QtGui.QPixmap("pictures\\lptrrrr.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon61)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(37, 37)])
            else:
                icon51 = QtGui.QIcon()
                icon51.addPixmap(QtGui.QPixmap("pictures\\lptr_hez_PNG.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon51)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(34, 34)])

        for currObj in objList:
            if currObj == obj:
                WriteStream.write([str(currObj) + ".setChecked", True])
                if currObj == "pushButton_LPTR1_u39":
                    icon40 = QtGui.QIcon()
                    icon40.addPixmap(QtGui.QPixmap("pictures\\lptrrr2.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon40)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(37, 37)])
                    break
                else:
                    icon31 = QtGui.QIcon()
                    icon31.addPixmap(QtGui.QPixmap("pictures\\lptr_hez_yellow.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon31)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(34, 34)])
                    break

    def Manage_u40_sw3(self, obj):
        objList = ["pushButton_LPTR1_u40", "sw3_u40__rf1"]

        for currObj in objList:

            WriteStream.write([str(currObj) + ".setChecked", False])
            if currObj == "pushButton_LPTR1_u40":
                icon61 = QtGui.QIcon()
                icon61.addPixmap(QtGui.QPixmap("pictures\\lptrrrr.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon61)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(37, 37)])
            else:
                icon51 = QtGui.QIcon()
                icon51.addPixmap(QtGui.QPixmap("pictures\\lptr_hez_PNG.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon51)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(34, 34)])

        for currObj in objList:
            if currObj == obj:
                WriteStream.write([str(currObj) + ".setChecked", True])
                if currObj == "pushButton_LPTR1_u40":
                    icon40 = QtGui.QIcon()
                    icon40.addPixmap(QtGui.QPixmap("pictures\\lptrrr2.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon40)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(37, 37)])
                    break
                else:
                    icon31 = QtGui.QIcon()
                    icon31.addPixmap(QtGui.QPixmap("pictures\\lptr_hez_yellow.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon31)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(34, 34)])
                    break

    def Enable_Disable_Buttons(self):
        try:
            Buttons_list = ["pushButton_LPTR1_u39", "sw4_u39__rf2", "pushButton_LPTR1_u40", "sw3_u40__rf1"]
            Groups_List = ["comboBox_LPTR1_u37", "comboBox_LPTR1_u64", "comboBox_LPTR1_u65", "comboBox_LPTR1_sw2", "comboBox_LPTR1_sw1", "comboBox_LPTR1_u172", "comboBox_LPTR1_u57", "comboBox_LPTR1_u177", "comboBox_LPTR1_u176", "comboBox_LPTR1_u139", "comboBox_LPTR1_u141"]
            for CurrButton in Buttons_list:

                if gui.ex.enable_disable_part3.currentText() == "Mode Enable":
                    eval("gui.ex." + str(CurrButton) + ".setHidden(False)")
                    for CurrGroup in Groups_List:
                        eval("gui.ex." + str(CurrGroup) + ".setHidden(True)")
                elif gui.ex.enable_disable_part3.currentText() == "Mode Disable":
                    eval("gui.ex." + str(CurrButton) + ".setHidden(True)")
                    for CurrGroup in Groups_List:
                        eval("gui.ex." + str(CurrGroup) + ".setHidden(False)")



        except Exception as error:
            logger.write("[Enable_Disable_Buttons] error: " + str(error))

    def Manage_Buttons_u16_u48(self, obj):
        objList = ["u16_u48_kav", "pushButton_LPTR1_u16_u48"]

        for currObj in objList:

            WriteStream.write([str(currObj) + ".setChecked", False])
            if currObj == "u16_u48_kav":
                icon61 = QtGui.QIcon()
                icon61.addPixmap(QtGui.QPixmap("pictures\\kav.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon61)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
            else:
                icon51 = QtGui.QIcon()
                icon51.addPixmap(QtGui.QPixmap("pictures\\meshulash.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon51)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])

        for currObj in objList:
            if currObj == obj:
                WriteStream.write([str(currObj) + ".setChecked", True])
                if currObj == "u16_u48_kav":
                    icon40 = QtGui.QIcon()
                    icon40.addPixmap(QtGui.QPixmap("pictures\\kav_yellow.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon40)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
                    break
                else:
                    icon31 = QtGui.QIcon()
                    icon31.addPixmap(QtGui.QPixmap("pictures\\meshulash_green.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon31)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
                    break

    def Manage_Buttons_u14_u15(self, obj):
        objList = ["u15_u14_kav", "pushButton_LPTR1_u14_u15"]

        for currObj in objList:

            WriteStream.write([str(currObj) + ".setChecked", False])
            if currObj == "u15_u14_kav":
                icon61 = QtGui.QIcon()
                icon61.addPixmap(QtGui.QPixmap("pictures\\kav.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon61)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
            else:
                icon51 = QtGui.QIcon()
                icon51.addPixmap(QtGui.QPixmap("pictures\\meshulash.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon51)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])

        for currObj in objList:
            if currObj == obj:
                WriteStream.write([str(currObj) + ".setChecked", True])
                if currObj == "u15_u14_kav":
                    icon40 = QtGui.QIcon()
                    icon40.addPixmap(QtGui.QPixmap("pictures\\kav_yellow.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon40)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
                    break
                else:
                    icon31 = QtGui.QIcon()
                    icon31.addPixmap(QtGui.QPixmap("pictures\\meshulash_green.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon31)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
                    break

    def Manage_Buttons_u74_u115(self, obj):
        objList = ["u74_u115_kav", "pushButton_LPTR1_u74_u115"]

        for currObj in objList:

            WriteStream.write([str(currObj) + ".setChecked", False])
            if currObj == "u74_u115_kav":
                icon61 = QtGui.QIcon()
                icon61.addPixmap(QtGui.QPixmap("pictures\\kav.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon61)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
            else:
                icon51 = QtGui.QIcon()
                icon51.addPixmap(QtGui.QPixmap("pictures\\meshulash.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon51)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])

        for currObj in objList:
            if currObj == obj:
                WriteStream.write([str(currObj) + ".setChecked", True])
                if currObj == "u74_u115_kav":
                    icon40 = QtGui.QIcon()
                    icon40.addPixmap(QtGui.QPixmap("pictures\\kav_yellow.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon40)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
                    break
                else:
                    icon31 = QtGui.QIcon()
                    icon31.addPixmap(QtGui.QPixmap("pictures\\meshulash_green.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon31)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
                    break

    def Manage_Buttons_u116_u117(self, obj):
        objList = ["u116_u117_kav", "pushButton_LPTR1_u116_u117"]

        for currObj in objList:

            WriteStream.write([str(currObj) + ".setChecked", False])
            if currObj == "u116_u117_kav":
                icon61 = QtGui.QIcon()
                icon61.addPixmap(QtGui.QPixmap("pictures\\kav.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon61)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
            else:
                icon51 = QtGui.QIcon()
                icon51.addPixmap(QtGui.QPixmap("pictures\\meshulash.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                eval("gui.ex." + str(currObj) + ".setIcon(icon51)")
                WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])

        for currObj in objList:
            if currObj == obj:
                WriteStream.write([str(currObj) + ".setChecked", True])
                if currObj == "u116_u117_kav":
                    icon40 = QtGui.QIcon()
                    icon40.addPixmap(QtGui.QPixmap("pictures\\kav_yellow.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon40)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
                    break
                else:
                    icon31 = QtGui.QIcon()
                    icon31.addPixmap(QtGui.QPixmap("pictures\\meshulash_green.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    eval("gui.ex." + str(currObj) + ".setIcon(icon31)")
                    WriteStream.write([str(currObj) + ".setIconSize", QtCore.QSize(30, 30)])
                    break

    def address_01ee(self, object):
        # address 0x01EE

        rest_01EE = "0000000000"
        address_01EE = "0x" + "01EE".zfill(8)

        value_in_hex_01EE = script_page.ReadRegister("LPTR", address_01EE, 0.1)
        value_in_hex_01EE = (str(bin(int(str(value_in_hex_01EE), 16)))[2:]).zfill(16)

        if object == "pushButton_LPTR1_u67_readQ":
            gui.ex.lineEdit_LPTR1_u67.setText(value_in_hex_01EE[11])
        elif object == "pushButton_LPTR1_ReadQ_u66":
            gui.ex.lineEdit_LPTR1_u66.setText(value_in_hex_01EE[12])
        elif object == "u119_read_part2":
            gui.ex.u119_read_part2.setText(value_in_hex_01EE[14])
        elif object == "u42_ReadQ":
            gui.ex.u42_lineEdit.setText(value_in_hex_01EE[15])
        elif object == "u160_read_tx_be":
            gui.ex.u160_line_edit.setText(value_in_hex_01EE[16])

    def address_01f0(self, object):
        try:
            # address 0x01EE

            rest_01f0 = "0000000000"
            address_01f0 = "0x" + "01F0".zfill(8)

            value_in_hex_01F0 = script_page.ReadRegister("LPTR", address_01f0, 0.1)
            print(value_in_hex_01F0)
            value_in_hex_01F0 = (str(bin(int(str(value_in_hex_01F0), 16)))[2:]).zfill(16)

            if object == "pushButton_LPTR1_read_interrupt_nav_u86":
                gui.ex.lineEdit_LPTR1_u86.setText(value_in_hex_01F0[12])
            elif object == "read_interrupt_nav_u85":
                gui.ex.u85_nav_line_edit.setText(value_in_hex_01F0[13])
            elif object == "read_interrupt_nav_u84":
                gui.ex.u84_nav_line_edit.setText(value_in_hex_01F0[14])
            elif object == "read_interrupt_nav_u83":
                gui.ex.u83_nav_line_edit.setText(value_in_hex_01F0[15])





        except Exception as error:
            logger.write("[address_01f0] error: " + str(error))

    def address_0x156_ReadQ(self):
        try:
            address_0x154 = "0x" + "154".zfill(8)
            address_0x156 = "0x" + "156".zfill(8)
            data_for_controler_0x154 = "1"
            script_page.WriteRegister("LPTR", address_0x154, data_for_controler_0x154, 0.01)
            value_0x156 = script_page.ReadRegister("LPTR", address_0x156, 0.1)
            value_0x156 = (str(bin(int(str(value_0x156), 16)))[2:]).zfill(16)  # bin
            value_0x156 = value_0x156[4:]
            value_0x156 = (str(hex(int(str(value_0x156), 2)))[2:])
            logger.write("Main TX Detector (U69) :" + str(value_0x156))
            value_0x156 = (str(int(str(value_0x156), 16)))  # dec
            value_0x156 = ((float(value_0x156) * 3.3) / (pow(2, 12) - 1))
            value_0x156 = format(value_0x156, '.2f')
            gui.ex.lineEdit_LPTR1_u69.setText(str(value_0x156))






        except Exception as error:
            logger.write("[address_0x156_ReadQ] error: " + str(error))

    def address_0x15A_ReadQ(self):
        try:
            address_0x158 = "0x" + "158".zfill(8)
            address_0x15A = "0x" + "15A".zfill(8)
            data_for_controler_0x158 = "1"
            script_page.WriteRegister("LPTR", address_0x158, data_for_controler_0x158, 0.01)
            value_0x15A = script_page.ReadRegister("LPTR", address_0x15A, 0.1)
            value_0x15A = (str(bin(int(str(value_0x15A), 16)))[2:]).zfill(16)  # bin
            value_0x15A = value_0x15A[4:]
            value_0x15A = (str(hex(int(str(value_0x15A), 2)))[2:])
            logger.write("Scnd TX Detector (U70) :" + str(value_0x15A))
            value_0x15A = (str(int(str(value_0x15A), 16)))  # dec
            value_0x15A = ((float(value_0x15A) * 3.3) / (pow(2, 12) - 1))
            value_0x15A = format(value_0x15A, '.2f')
            gui.ex.lineEdit_LPTR1_u70.setText(str(value_0x15A))






        except Exception as error:
            logger.write("[address_0x15A_ReadQ] error: " + str(error))

    def address_0x15E_ReadQ(self):
        try:
            address_0x15C = "0x" + "15C".zfill(8)
            address_0x15E = "0x" + "15E".zfill(8)
            data_for_controler_0x15C = "1"
            script_page.WriteRegister("LPTR", address_0x15C, data_for_controler_0x15C, 0.01)
            value_0x15E = script_page.ReadRegister("LPTR", address_0x15E, 0.1)
            value_0x15E = (str(bin(int(str(value_0x15E), 16)))[2:]).zfill(16)  # bin
            value_0x15E = value_0x15E[4:]
            value_0x15E = (str(hex(int(str(value_0x15E), 2)))[2:])
            logger.write("UHF Detector (U163) :" + str(value_0x15E))
            value_0x15E = (str(int(str(value_0x15E), 16)))  # dec
            value_0x15E = ((float(value_0x15E) * 3.3) / (pow(2, 12) - 1))
            value_0x15E = format(value_0x15E, '.2f')
            gui.ex.u163_line_edit_RX_FE.setText(str(value_0x15E))






        except Exception as error:
            logger.write("[address_0x15E_ReadQ] error: " + str(error))

    def address_0x162_ReadQ(self):
        try:
            address_0x160 = "0x" + "160".zfill(8)
            address_0x162 = "0x" + "162".zfill(8)
            data_for_controler_0x160 = "1"
            script_page.WriteRegister("LPTR", address_0x160, data_for_controler_0x160, 0.01)
            value_0x162 = script_page.ReadRegister("LPTR", address_0x162, 0.1)
            value_0x162 = (str(bin(int(str(value_0x162), 16)))[2:]).zfill(16)  # bin
            value_0x162 = value_0x162[4:]
            value_0x162 = (str(hex(int(str(value_0x162), 2)))[2:])
            logger.write("VHF Detector (U120):" + str(value_0x162))
            value_0x162 = (str(int(str(value_0x162), 16)))  # dec
            value_0x162 = ((float(value_0x162) * 3.3) / (pow(2, 12) - 1))
            value_0x162 = format(value_0x162, '.2f')
            gui.ex.u120_line_edit.setText(str(value_0x162))



        except Exception as error:
            logger.write("[address_0x162_ReadQ] error: " + str(error))

    def address_0x166_ReadQ(self):
        try:
            address_0x164 = "0x" + "164".zfill(8)
            address_0x166 = "0x" + "166".zfill(8)
            data_for_controler_0x164 = "1"
            script_page.WriteRegister("LPTR", address_0x164, data_for_controler_0x164, 0.01)
            value_0x166 = script_page.ReadRegister("LPTR", address_0x166, 0.1)
            value_0x166 = (str(bin(int(str(value_0x166), 16)))[2:]).zfill(16)  # bin
            value_0x166 = value_0x166[4:]
            value_0x166 = (str(hex(int(str(value_0x166), 2)))[2:])
            logger.write("LBand Detector (U43) :" + str(value_0x166))
            value_0x166 = (str(int(str(value_0x166), 16)))  # dec
            value_0x166 = ((float(value_0x166) * 3.3) / (pow(2, 12) - 1))
            value_0x166 = format(value_0x166, '.2f')
            gui.ex.u43_line_edit_read.setText(str(value_0x166))






        except Exception as error:
            logger.write("[address_0x166_ReadQ] error: " + str(error))

    def Cpld_G7_ReadCurrent(self):
        try:
            address_0xE2 = "0x" + "E2".zfill(8)
            address_0xE4 = "0x" + "E4".zfill(8)
            address_0xEC = "0x" + "EC".zfill(8)
            script_page.WriteRegister("LPTR", address_0xE2, "1", 0.01)
            script_page.WriteRegister("LPTR", address_0xE4, "701", 0.01)
            script_page.WriteRegister("LPTR", address_0xE4, "B11", 0.01)
            value_cpld_g7 = script_page.ReadRegister("LPTR", address_0xEC, 0.1)
            value_cpld_g7 = (str(bin(int(str(value_cpld_g7), 16)))[2:]).zfill(16)  # bin
            value_cpld_g7 = value_cpld_g7[4:]
            value_cpld_g7 = (str(hex(int(str(value_cpld_g7), 2)))[2:])
            logger.write("UHF LNA (doubleSpinBox_LPTR1_u167) Current sensor:" + str(value_cpld_g7))
            value_cpld_g7 = (str(int(str(value_cpld_g7), 16)))  # dec
            value_cpld_g7 = format((100 / (10000 * 0.03)) * (3.3 / (pow(2, 12) - 1)) * int(value_cpld_g7), '.4f')

            value_cpld_g7 = str(value_cpld_g7)

            gui.ex.u167_lineEdit_readCurr.setText(str(value_cpld_g7))






        except Exception as error:
            logger.write("[Cpld_G7_ReadCurrent] error: " + str(error))

    def Cpld_G8_ReadCurrent(self):
        try:
            address_0xE2 = "0x" + "E2".zfill(8)
            address_0xE4 = "0x" + "E4".zfill(8)
            address_0xEC = "0x" + "EC".zfill(8)
            script_page.WriteRegister("LPTR", address_0xE2, "1", 0.01)
            script_page.WriteRegister("LPTR", address_0xE4, "801", 0.01)
            script_page.WriteRegister("LPTR", address_0xE4, "C11", 0.01)
            value_cpld_g8 = script_page.ReadRegister("LPTR", address_0xEC, 0.1)
            value_cpld_g8 = (str(bin(int(str(value_cpld_g8), 16)))[2:]).zfill(16)  # bin
            value_cpld_g8 = value_cpld_g8[4:]
            value_cpld_g8 = (str(hex(int(str(value_cpld_g8), 2)))[2:])
            logger.write("VHF LNA (U89) Current sensor:" + str(value_cpld_g8))
            value_cpld_g8 = (str(int(str(value_cpld_g8), 16)))  # dec

            value_cpld_g8 = format((100 / (10000 * 0.03)) * (3.3 / (pow(2, 12) - 1)) * int(value_cpld_g8), '.4f')

            value_cpld_g8 = str(value_cpld_g8)

            gui.ex.u89_part2_volt.setText(str(value_cpld_g8))






        except Exception as error:
            logger.write("[Cpld_G8_ReadCurrent] error: " + str(error))

    def Cpld_c1_ReadCurrent(self):
        try:
            # cpld C1
            address_cpld_c1_controler_9A = "0x" + "9A".zfill(8)
            data_cpld_c1_9A = "1"
            address_cpld_c1_controler_9C = "0x" + "9C".zfill(8)
            data_cpld_c1_9C = "201"
            second_data_cpld_c1_9C = "11"

            script_page.WriteRegister("LPTR", address_cpld_c1_controler_9A, data_cpld_c1_9A, 0.01)
            script_page.WriteRegister("LPTR", address_cpld_c1_controler_9C, data_cpld_c1_9C, 0.01)
            script_page.WriteRegister("LPTR", address_cpld_c1_controler_9C, second_data_cpld_c1_9C, 0.01)

            address_To_Read_cpld_C1 = "0x" + "A4".zfill(8)
            value_cpld_C1 = script_page.ReadRegister("LPTR", str(address_To_Read_cpld_C1), 0.1)
            value_cpld_C1 = (str(bin(int(str(value_cpld_C1), 16)))[2:]).zfill(16)  # bin
            value_cpld_C1 = value_cpld_C1[4:]
            value_cpld_C1 = (str(hex(int(str(value_cpld_C1), 2)))[2:])  # hex
            logger.write("Scnd TX (U79) Current sensor:" + str(value_cpld_C1))
            value_cpld_C1 = (str(int(str(value_cpld_C1), 16)))  # dec
            volt_cpld_c1 = format((100 / (10000 * 0.03)) * (3.3 / (pow(2, 12) - 1)) * int(value_cpld_C1), '.4f')
            volt_cpld_c1 = str(volt_cpld_c1)
            gui.ex.lineEdit_LPTR1_U79.setText(volt_cpld_c1)

            # dbm_cpld_c1 = ((float(volt_cpld_c1) - 2.547) / 0.0293)
            #
            # logger.write("dbm U79 :" + str(dbm_cpld_c1))






        except Exception as error:
            logger.write("[DP4T_Mipi] error: " + str(error))

    def Cpld_D1_ReadCurrent(self):
        try:
            # cpld D1
            address_cpld_c1_controler_AC = "0x" + "AC".zfill(8)
            data_cpld_c1_AC = "1"
            address_cpld_c1_controler_AE = "0x" + "AE".zfill(8)
            data_cpld_c1_AE = "201"
            second_data_cpld_c1_AE = "11"

            script_page.WriteRegister("LPTR", address_cpld_c1_controler_AC, data_cpld_c1_AC, 0.01)
            script_page.WriteRegister("LPTR", address_cpld_c1_controler_AE, data_cpld_c1_AE, 0.01)
            script_page.WriteRegister("LPTR", address_cpld_c1_controler_AE, second_data_cpld_c1_AE, 0.01)

            address_To_Read_cpld_D1 = "0x" + "B6".zfill(8)
            value_cpld_D1 = script_page.ReadRegister("LPTR", str(address_To_Read_cpld_D1), 0.1)
            value_cpld_D1 = (str(bin(int(str(value_cpld_D1), 16)))[2:]).zfill(16)  # bin
            value_cpld_D1 = value_cpld_D1[4:]
            value_cpld_D1 = (str(hex(int(str(value_cpld_D1), 2)))[2:])  # hex
            logger.write("Main TX (U136) Current sensor" + str(value_cpld_D1))
            value_cpld_D1 = (str(int(str(value_cpld_D1), 16)))  # dec
            volt_cpld_D1 = format((100 / (10000 * 0.03)) * (3.3 / (pow(2, 12) - 1)) * int(value_cpld_D1), '.4f')
            volt_cpld_D1 = str(volt_cpld_D1)
            gui.ex.lineEdit_LPTR1_u136_2.setText(volt_cpld_D1)

            # dbm_cpld_c1 = ((float(volt_cpld_c1) - 2.547) / 0.0293)
            #
            # logger.write("dbm U79 :" + str(dbm_cpld_c1))






        except Exception as error:
            logger.write("[DP4T_Mipi] error: " + str(error))

    def Vgs(self, vgs):
        # vgs = float(gui.ex.doubleSpinBox_LPTR1_u163_u186.value())
        vgs_formula_G1 = (round((vgs * 4096) / (1 * 2.5)) - 1)
        vgs_formula_G1 += 12288
        vgs_formula_G1 = (str(hex(int(str(vgs_formula_G1)))))[2:]
        return ((str(bin(int(str(vgs_formula_G1), 16)))[2:]).zfill(16))

    def exceptions_comp(self, component_hsid, add, gui_comp, curr_values):
        try:
            if add == "0x009A":
                return self.Vgs(vgs=float(gui.ex.doubleSpinBox_LPTR1_u79.value()))

            elif add == "0x00AC":
                return self.Vgs(vgs=float(gui.ex.doubleSpinBox_LPTR1_u136.value()))


            elif add == "0x00E2":
                return self.Vgs(vgs=float(gui.ex.doubleSpinBox_LPTR1_u163_u186.value()))


            elif add == "0x00E2_b":
                return self.Vgs(vgs=float(gui.ex.doubleSpinBox_LPTR1_u165.value()))

            elif add == "0x00E2_c":
                return self.Vgs(vgs=float(gui.ex.doubleSpinBox_LPTR1_u82.value()))


            elif add == "0x00E2_d":
                return self.Vgs(vgs=float(gui.ex.doubleSpinBox_LPTR1_u168.value()))

            elif add == "0x00E2_e":
                return self.Vgs(vgs=float(gui.ex.doubleSpinBox_LPTR1_u167.value()))


            elif add == "0x00E2_f":
                return self.Vgs(vgs=float(gui.ex.doubleSpinBox_LPTR1_u89.value()))

            elif add == "0x00F4_band1":

                notch_band1_fl64 = int((float(gui.ex.SpinBox_FE_Notch_band1.value())) * 10)

                if (gui.ex.onOff_band1_fl64.currentText() == "BP ON"):
                    notch_band1_fl64 += 32768
                elif (gui.ex.onOff_band1_fl64.currentText() == "BP OFF"):
                    notch_band1_fl64 += 0

                notch_band1_fl64 = (str(hex(int(str(notch_band1_fl64), 10)))[2:])
                notch_band1_fl64 = (str(bin(int(str(notch_band1_fl64), 16)))[2:]).zfill(16)
                return notch_band1_fl64


            elif add == "0x00F4_band2":

                notch_band2_fl64 = int((float(gui.ex.SpinBox_FE_Notch_band2.value())) * 10)
                if (gui.ex.onOff_band2_fl64.currentText() == "BP ON"):
                    notch_band2_fl64 += 32768
                elif (gui.ex.onOff_band2_fl64.currentText() == "BP OFF"):
                    notch_band2_fl64 += 0
                notch_band2_fl64 = (str(hex(int(str(notch_band2_fl64), 10)))[2:])
                notch_band2_fl64 = (str(bin(int(str(notch_band2_fl64), 16)))[2:]).zfill(16)
                return notch_band2_fl64


            elif add == "0x00F4_band3":

                notch_band3_fl64 = int((float(gui.ex.SpinBox_FE_Notch_band3.value())) * 10)
                if (gui.ex.onOff_band3_fl64.currentText() == "BP ON"):
                    notch_band3_fl64 += 32768
                elif (gui.ex.onOff_band3_fl64.currentText() == "BP OFF"):
                    notch_band3_fl64 += 0

                notch_band3_fl64 = (str(hex(int(str(notch_band3_fl64), 10)))[2:])
                notch_band3_fl64 = (str(bin(int(str(notch_band3_fl64), 16)))[2:]).zfill(16)
                return notch_band3_fl64

            elif add == "0x00F4_band4":
                notch_band4_fl64 = int((float(gui.ex.SpinBox_FE_Notch_band4.value())) * 10)
                if (gui.ex.onOff_band4_fl64.currentText() == "BP ON"):
                    notch_band4_fl64 += 32768
                elif (gui.ex.onOff_band4_fl64.currentText() == "BP OFF"):
                    notch_band4_fl64 += 0
                notch_band4_fl64 = (str(hex(int(str(notch_band4_fl64), 10)))[2:])
                notch_band4_fl64 = (str(bin(int(str(notch_band4_fl64), 16)))[2:]).zfill(16)
                return notch_band4_fl64

            elif add == "0x021C":
                value_Fl49 = gui.ex.spinBox_Fl49.value()
                value_Fl49 = (str(hex(int(str(value_Fl49), 10)))[2:])
                value_Fl49 = (str(bin(int(str(value_Fl49), 16)))[2:]).zfill(16)
                return value_Fl49

            elif add == "0x021E":
                value_Fl79 = gui.ex.spinBox_Fl79.value()
                value_Fl79 = (str(hex(int(str(value_Fl79), 10)))[2:])
                value_Fl79 = (str(bin(int(str(value_Fl79), 16)))[2:]).zfill(16)
                return value_Fl79


            elif add == "0x021A":
                value_Fl80 = gui.ex.spinBox_Fl80.value()
                value_Fl80 = (str(hex(int(str(value_Fl80), 10)))[2:])
                value_Fl80 = (str(bin(int(str(value_Fl80), 16)))[2:]).zfill(16)
                return value_Fl80

            elif add == "0x00B2_c":
                value_for_sw44 = self.DP4T_Mipi(0, str(gui.ex.sw44_part2.currentText()))
                value_for_sw44 = (str(bin(int(str(value_for_sw44), 16)))[2:]).zfill(16)
                return value_for_sw44

            elif add == "0x00B2_g":
                value_for_sw43 = self.DP4T_Mipi(1, str(gui.ex.sw43_part2.currentText()))
                value_for_sw43 = (str(bin(int(str(value_for_sw43), 16)))[2:]).zfill(16)
                return value_for_sw43

            elif add == "0x0216_c":
                value_for_sw45 = self.DP4T_Mipi(0, str(gui.ex.sw45_part2.currentText()))
                value_for_sw45 = (str(bin(int(str(value_for_sw45), 16)))[2:]).zfill(16)
                return value_for_sw45

            elif add == "0x01A2_c":
                value_for_sw3 = self.DP4T_Mipi(0, str(gui.ex.SW3.currentText()))
                value_for_sw3 = (str(bin(int(str(value_for_sw3), 16)))[2:]).zfill(16)
                return value_for_sw3

            elif add == "0x01A2_g":
                value_for_sw4 = self.DP4T_Mipi(1, str(gui.ex.SW4_.currentText()))
                value_for_sw4 = (str(bin(int(str(value_for_sw4), 16)))[2:]).zfill(16)
                return value_for_sw4

            elif add == "0x01AE_c":
                value_for_sw8 = self.DP4T_Mipi(1, str(gui.ex.sw8_part2.currentText()))
                value_for_sw8 = (str(bin(int(str(value_for_sw8), 16)))[2:]).zfill(16)
                return value_for_sw8

            elif add == "0x01AA_c":
                value_for_sw5 = self.DP4T_Mipi(0, str(gui.ex.sw5.currentText()))
                value_for_sw5 = (str(bin(int(str(value_for_sw5), 16)))[2:]).zfill(16)
                return value_for_sw5

            elif add == "0x01AA_g":
                value_for_sw7 = self.DP4T_Mipi(1, str(gui.ex.sw7.currentText()))
                value_for_sw7 = (str(bin(int(str(value_for_sw7), 16)))[2:]).zfill(16)
                return value_for_sw7

            elif add == "0x01A6_c":
                value_for_sw62 = self.DP4T_Mipi(0, str(gui.ex.sw62_part2.currentText()))
                value_for_sw62 = (str(bin(int(str(value_for_sw62), 16)))[2:]).zfill(16)
                return value_for_sw62

            elif add == "0x01A6_h":
                value_for_sw63 = self.DP4T_Mipi(1, str(gui.ex.sw63_part2.currentText()))
                value_for_sw63 = (str(bin(int(str(value_for_sw63), 16)))[2:]).zfill(16)
                return value_for_sw63

            elif add == "0x021C":
                value_Fl49 = gui.ex.spinBox_Fl49.text()
                value_Fl49 = (str(hex(int(str(value_Fl49), 10)))[2:])
                value_Fl49 = (str(bin(int(str(value_Fl49), 16)))[2:]).zfill(16)
                return value_Fl49

            elif add == "0x021E":
                value_Fl79 = gui.ex.spinBox_Fl79.text()
                value_Fl79 = (str(hex(int(str(value_Fl79), 10)))[2:])
                value_Fl79 = (str(bin(int(str(value_Fl79), 16)))[2:]).zfill(16)
                return value_Fl79

            elif add == "0x021A":
                value_Fl80 = gui.ex.spinBox_Fl80.text()
                value_Fl80 = (str(hex(int(str(value_Fl80), 10)))[2:])
                value_Fl80 = (str(bin(int(str(value_Fl80), 16)))[2:]).zfill(16)
                return value_Fl80

            return module_filter_bank.exceptions_comp(component_hsid=component_hsid, add=add, gui_comp=gui_comp, curr_values=curr_values)

        except Exception as error:
            logger.write("[exceptions_comp] error: " + str(error))
            return False


class Module_Filter_Bank_Card():
    def __init__(self):
        #LOAD FILE IO EX

        file = open(str("Files\\VA\\LPTR1\\Scripts\\IOExpenderInit_VA_LPTR1_Moudle_filter_bank.py"), "r")
        contentFile = ""
        for currLine in file:
            contentFile += currLine

        WriteStream.write(["plainText_LPTR1_Moudle_filter_bankinit_Io_expender.insertPlainText", str(contentFile)])  # UHF

        gui.ex.freq_table_sb8a.clicked.connect(lambda: threading.Thread(target=self.open_freq_table, args=["SB8A.PNG"]).start())
        gui.ex.freq_table_sb8b.clicked.connect(lambda: threading.Thread(target=self.open_freq_table, args=["SB8B.PNG"]).start())
        gui.ex.freq_table_sb7b.clicked.connect(lambda: threading.Thread(target=self.open_freq_table, args=["SB7B.PNG"]).start())
        gui.ex.freq_table_sb7a.clicked.connect(lambda: threading.Thread(target=self.open_freq_table, args=["SB7A.PNG"]).start())
        self.list_of_items_ifbm1 = ["comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_A", "comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_B", "comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_C", "comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_D"]
        self.list_of_freq_ifbm1 = ["174", "176", "178", "180", "182", "184", "186", "188", "190", "192", "194", "196", "198", "200", "202", "204", "206", "208", "210", "212", "214", "216", "218", "220", "222", "BP"]
        self.list_of_items_ifbm2 = ["comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_A", "comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_B", "comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_C", "comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_D"]
        self.list_of_freq_ifbm2 = ["486", "494", "502", "510", "518", "542", "550", "574", "582", "590", "598", "606", "614", "622", "630", "638", "646", "654", "678", "686", "694", "728", "736", "744", "752", "BP"]

        self.list_of_freq_ifbm1_isb7 = ["225", "231", "237", "243", "249", "255", "261", "267", "273", "279", "285", "291", "297", "303", "309", "315", "321", "327", "333", "339", "345", "351", "357", "363", "369", "BP"]
        self.list_of_freq_ifbm2_isb7 = ["375", "381", "387", "393", "399", "405", "411", "417", "423", "429", "435", "441", "447", "453", "459", "465", "471", "477", "483", "489", "495", "501", "507", "513", "BP"]

        for i in range(len(self.list_of_items_ifbm1)):
            eval("gui.ex." + str(self.list_of_items_ifbm1[i]) + ".addItems(self.list_of_freq_ifbm1)")
        for i in range(len(self.list_of_items_ifbm2)):
            eval("gui.ex." + str(self.list_of_items_ifbm2[i]) + ".addItems(self.list_of_freq_ifbm2)")

        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_A.setCurrentIndex(0)
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_B.setCurrentIndex(1)
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_C.setCurrentIndex(2)
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_D.setCurrentIndex(3)

        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_A.setCurrentIndex(0)
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_B.setCurrentIndex(1)
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_C.setCurrentIndex(2)
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_D.setCurrentIndex(3)

        gui.ex.comboBox_LPTR1_Module_Filter_Bank_isb7_isb8.currentIndexChanged.connect(lambda: threading.Thread(target=self.manage_isb7_isb8).start())
        gui.ex.pushButton_Moudle_ReadID_ver.clicked.connect(lambda: threading.Thread(target=self.Read_ID_ver_moudle_filter_bank).start())

        gui.ex.freq_table_sb7a.setHidden(True)
        gui.ex.freq_table_sb7b.setHidden(True)

        gui.ex.send_module_filter_bank.clicked.connect(lambda: threading.Thread(target=action.write_component, args=["Module_Filter_Bank"]).start())

    def run_io_expender_script_moudle_filter_bank(self):
        try:
            # init io expender
            logger.write("IO EXPENDER moudle filter bank Script started")
            exec(compile(open(str("Files\\VA\\LPTR1\\Scripts\\IOExpenderInit_VA_LPTR1_Moudle_filter_bank.py"), "rb").read(), str("Files\\VA\\LPTR1\\Scripts\\IOExpenderInit_VA_LPTR1_Moudle_filter_bank.py"), 'exec'))
            logger.write("IO EXPENDER moudle filter bank Script done" , True)
            return True

        except Exception as error:
            logger.write("[run_IO EXPENDER moudle filter bank Script] error: " + str(error), False)
            return False

    def exceptions_comp(self, component_hsid, add, gui_comp, curr_values):
        try:

            if (add == "0x01B6_SW3_B"):
                sw3_1 = {
                    "RFIN1-RFOUT1 ISO": "00000000",
                    "RFIN1-RFOUT1": "00000001",
                    "RFIN1-RFOUT2 ISO": "00000000",
                    "RFIN1-RFOUT2": "00000010",
                    "RFIN1-RFOUT3 ISO": "00000000",
                    "RFIN1-RFOUT3": "00000100",
                    "RFIN1-RFOUT4 ISO": "00000000",
                    "RFIN1-RFOUT4": "00001000"
                }
                sw3_2 = {
                    "RFIN2-RFOUT1 ISO": "00000000",
                    "RFIN2-RFOUT1": "00010000",
                    "RFIN2-RFOUT2 ISO": "00000000",
                    "RFIN2-RFOUT2": "00100000",
                    "RFIN2-RFOUT3 ISO": "00000000",
                    "RFIN2-RFOUT3": "01000000",
                    "RFIN2-RFOUT4 ISO": "00000000",
                    "RFIN2-RFOUT4": "10000000"
                }

                sw3_1 = sw3_1[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw3_1.currentText())]
                sw3_2 = sw3_2[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw3_2.currentText())]
                xor = int(sw3_1, 2) ^ int(sw3_2, 2)
                xor = (bin(xor)[2:].zfill(len(sw3_1)))

                return "00000001" + str(xor)

            elif (add == "0x01B6_SW3_C"):
                sw3_3 = {
                    "RFIN3-RFOUT1 ISO": "00000000",
                    "RFIN3-RFOUT1": "00000001",
                    "RFIN3-RFOUT2 ISO": "00000000",
                    "RFIN3-RFOUT2": "00000010",
                    "RFIN3-RFOUT3 ISO": "00000000",
                    "RFIN3-RFOUT3": "00000100",
                    "RFIN3-RFOUT4 ISO": "00000000",
                    "RFIN3-RFOUT4": "00001000"
                }
                sw3_4 = {
                    "RFIN4-RFOUT1 ISO": "00000000",
                    "RFIN4-RFOUT1": "00010000",
                    "RFIN4-RFOUT2 ISO": "00000000",
                    "RFIN4-RFOUT2": "00100000",
                    "RFIN4-RFOUT3 ISO": "00000000",
                    "RFIN4-RFOUT3": "01000000",
                    "RFIN4-RFOUT4 ISO": "00000000",
                    "RFIN4-RFOUT4": "10000000"
                }

                sw3_3 = sw3_3[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw3_3.currentText())]
                sw3_4 = sw3_4[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw3_4.currentText())]
                xor = int(sw3_3, 2) ^ int(sw3_4, 2)
                xor = (bin(xor)[2:].zfill(len(sw3_3)))

                return "00000001" + str(xor)

            elif (add == "0x01B6_SW5_B"):
                sw5_1 = {
                    "RFIN1-RFOUT1 ISO": "00000000",
                    "RFIN1-RFOUT1": "00000001",
                    "RFIN1-RFOUT2 ISO": "00000000",
                    "RFIN1-RFOUT2": "00000010",
                    "RFIN1-RFOUT3 ISO": "00000000",
                    "RFIN1-RFOUT3": "00000100",
                    "RFIN1-RFOUT4 ISO": "00000000",
                    "RFIN1-RFOUT4": "00001000"
                }
                sw5_2 = {
                    "RFIN2-RFOUT1 ISO": "00000000",
                    "RFIN2-RFOUT1": "00010000",
                    "RFIN2-RFOUT2 ISO": "00000000",
                    "RFIN2-RFOUT2": "00100000",
                    "RFIN2-RFOUT3 ISO": "00000000",
                    "RFIN2-RFOUT3": "01000000",
                    "RFIN2-RFOUT4 ISO": "00000000",
                    "RFIN2-RFOUT4": "10000000"
                }

                sw5_1 = sw5_1[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw5_1.currentText())]
                sw5_2 = sw5_2[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw5_2.currentText())]
                xor = int(sw5_1, 2) ^ int(sw5_2, 2)
                xor = (bin(xor)[2:].zfill(len(sw5_1)))
                return "01000001" + str(xor)

            elif (add == "0x01B6_SW5_C"):
                sw5_3 = {
                    "RFIN3-RFOUT1 ISO": "00000000",
                    "RFIN3-RFOUT1": "00000001",
                    "RFIN3-RFOUT2 ISO": "00000000",
                    "RFIN3-RFOUT2": "00000010",
                    "RFIN3-RFOUT3 ISO": "00000000",
                    "RFIN3-RFOUT3": "00000100",
                    "RFIN3-RFOUT4 ISO": "00000000",
                    "RFIN3-RFOUT4": "00001000"
                }
                sw5_4 = {
                    "RFIN4-RFOUT1 ISO": "00000000",
                    "RFIN4-RFOUT1": "00010000",
                    "RFIN4-RFOUT2 ISO": "00000000",
                    "RFIN4-RFOUT2": "00100000",
                    "RFIN4-RFOUT3 ISO": "00000000",
                    "RFIN4-RFOUT3": "01000000",
                    "RFIN4-RFOUT4 ISO": "00000000",
                    "RFIN4-RFOUT4": "10000000"
                }

                sw5_3 = sw5_3[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw5_3.currentText())]
                sw5_4 = sw5_4[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw5_4.currentText())]
                xor = int(sw5_3, 2) ^ int(sw5_4, 2)
                xor = (bin(xor)[2:].zfill(len(sw5_3)))
                return "01000001" + str(xor)

            elif (add == "0x01BA_SW6_B"):
                sw6_1 = {
                    "RFIN1-RFOUT1 ISO": "00000000",
                    "RFIN1-RFOUT1": "00000001",
                    "RFIN1-RFOUT2 ISO": "00000000",
                    "RFIN1-RFOUT2": "00000010",
                    "RFIN1-RFOUT3 ISO": "00000000",
                    "RFIN1-RFOUT3": "00000100",
                    "RFIN1-RFOUT4 ISO": "00000000",
                    "RFIN1-RFOUT4": "00001000"
                }
                sw6_2 = {
                    "RFIN2-RFOUT1 ISO": "00000000",
                    "RFIN2-RFOUT1": "00010000",
                    "RFIN2-RFOUT2 ISO": "00000000",
                    "RFIN2-RFOUT2": "00100000",
                    "RFIN2-RFOUT3 ISO": "00000000",
                    "RFIN2-RFOUT3": "01000000",
                    "RFIN2-RFOUT4 ISO": "00000000",
                    "RFIN2-RFOUT4": "10000000"
                }

                sw6_1 = sw6_1[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw6_1.currentText())]
                sw6_2 = sw6_2[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw6_2.currentText())]
                xor = int(sw6_1, 2) ^ int(sw6_2, 2)
                xor = (bin(xor)[2:].zfill(len(sw6_1)))
                return "01000001" + str(xor)

            elif (add == "0x01BA_SW6_C"):
                sw6_3 = {
                    "RFIN3-RFOUT1 ISO": "00000000",
                    "RFIN3-RFOUT1": "00000001",
                    "RFIN3-RFOUT2 ISO": "00000000",
                    "RFIN3-RFOUT2": "00000010",
                    "RFIN3-RFOUT3 ISO": "00000000",
                    "RFIN3-RFOUT3": "00000100",
                    "RFIN3-RFOUT4 ISO": "00000000",
                    "RFIN3-RFOUT4": "00001000"
                }
                sw6_4 = {
                    "RFIN4-RFOUT1 ISO": "00000000",
                    "RFIN4-RFOUT1": "00010000",
                    "RFIN4-RFOUT2 ISO": "00000000",
                    "RFIN4-RFOUT2": "00100000",
                    "RFIN4-RFOUT3 ISO": "00000000",
                    "RFIN4-RFOUT3": "01000000",
                    "RFIN4-RFOUT4 ISO": "00000000",
                    "RFIN4-RFOUT4": "10000000"
                }

                sw6_3 = sw6_3[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw6_3.currentText())]
                sw6_4 = sw6_4[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw6_4.currentText())]
                xor = int(sw6_3, 2) ^ int(sw6_4, 2)
                xor = (bin(xor)[2:].zfill(len(sw6_3)))
                return "01000001" + str(xor)

            elif (add == "0x01BA_SW4_B"):
                sw4_1 = {
                    "RFIN1-RFOUT1 ISO": "00000000",
                    "RFIN1-RFOUT1": "00000001",
                    "RFIN1-RFOUT2 ISO": "00000000",
                    "RFIN1-RFOUT2": "00000010",
                    "RFIN1-RFOUT3 ISO": "00000000",
                    "RFIN1-RFOUT3": "00000100",
                    "RFIN1-RFOUT4 ISO": "00000000",
                    "RFIN1-RFOUT4": "00001000"
                }
                sw4_2 = {
                    "RFIN2-RFOUT1 ISO": "00000000",
                    "RFIN2-RFOUT1": "00010000",
                    "RFIN2-RFOUT2 ISO": "00000000",
                    "RFIN2-RFOUT2": "00100000",
                    "RFIN2-RFOUT3 ISO": "00000000",
                    "RFIN2-RFOUT3": "01000000",
                    "RFIN2-RFOUT4 ISO": "00000000",
                    "RFIN2-RFOUT4": "10000000"
                }

                sw4_1 = sw4_1[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw4_1.currentText())]
                sw4_2 = sw4_2[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw4_2.currentText())]
                xor = int(sw4_1, 2) ^ int(sw4_2, 2)
                xor = (bin(xor)[2:].zfill(len(sw4_1)))
                return "00000001" + str(xor)

            elif (add == "0x01BA_SW4_C"):
                sw4_3 = {
                    "RFIN3-RFOUT1 ISO": "00000000",
                    "RFIN3-RFOUT1": "00000001",
                    "RFIN3-RFOUT2 ISO": "00000000",
                    "RFIN3-RFOUT2": "00000010",
                    "RFIN3-RFOUT3 ISO": "00000000",
                    "RFIN3-RFOUT3": "00000100",
                    "RFIN3-RFOUT4 ISO": "00000000",
                    "RFIN3-RFOUT4": "00001000"
                }
                sw4_4 = {
                    "RFIN4-RFOUT1 ISO": "00000000",
                    "RFIN4-RFOUT1": "00010000",
                    "RFIN4-RFOUT2 ISO": "00000000",
                    "RFIN4-RFOUT2": "00100000",
                    "RFIN4-RFOUT3 ISO": "00000000",
                    "RFIN4-RFOUT3": "01000000",
                    "RFIN4-RFOUT4 ISO": "00000000",
                    "RFIN4-RFOUT4": "10000000"
                }

                sw4_3 = sw4_3[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw4_3.currentText())]
                sw4_4 = sw4_4[str(gui.ex.comboBox_LPTR1_Moudle_Filter_Bank_sw4_4.currentText())]
                xor = int(sw4_3, 2) ^ int(sw4_4, 2)
                xor = (bin(xor)[2:].zfill(len(sw4_3)))
                return "00000001" + str(xor)

            return False

        except Exception as error:
            logger.write("[exceptions_comp] error: " + str(error))
            return False

    def manage_isb7_isb8(self):

        if (gui.ex.comboBox_LPTR1_Module_Filter_Bank_isb7_isb8.currentText() == "SB7"):
            for i in range(len(self.list_of_items_ifbm1)):
                eval("gui.ex." + str(self.list_of_items_ifbm1[i]) + ".clear()")
                eval("gui.ex." + str(self.list_of_items_ifbm1[i]) + ".addItems(self.list_of_freq_ifbm1_isb7)")
            for i in range(len(self.list_of_items_ifbm2)):
                eval("gui.ex." + str(self.list_of_items_ifbm2[i]) + ".clear()")
                eval("gui.ex." + str(self.list_of_items_ifbm2[i]) + ".addItems(self.list_of_freq_ifbm2_isb7)")
            gui.ex.freq_table_sb8a.setHidden(True)
            gui.ex.freq_table_sb8b.setHidden(True)
            gui.ex.freq_table_sb7a.setHidden(False)
            gui.ex.freq_table_sb7b.setHidden(False)
            gui.ex.freq_table_sb7a.setGeometry(QtCore.QRect(592, 100, 101, 21))
            gui.ex.freq_table_sb7b.setGeometry(QtCore.QRect(592, 210, 101, 21))

        elif (gui.ex.comboBox_LPTR1_Module_Filter_Bank_isb7_isb8.currentText() == "SB8"):
            for i in range(len(self.list_of_items_ifbm1)):
                eval("gui.ex." + str(self.list_of_items_ifbm1[i]) + ".clear()")
                eval("gui.ex." + str(self.list_of_items_ifbm1[i]) + ".addItems(self.list_of_freq_ifbm1)")
            for i in range(len(self.list_of_items_ifbm2)):
                eval("gui.ex." + str(self.list_of_items_ifbm2[i]) + ".clear()")
                eval("gui.ex." + str(self.list_of_items_ifbm2[i]) + ".addItems(self.list_of_freq_ifbm2)")
            gui.ex.freq_table_sb7a.setHidden(True)
            gui.ex.freq_table_sb7b.setHidden(True)
            gui.ex.freq_table_sb8a.setHidden(False)
            gui.ex.freq_table_sb8b.setHidden(False)
            gui.ex.freq_table_sb8a.setGeometry(QtCore.QRect(592, 100, 101, 21))
            gui.ex.freq_table_sb8b.setGeometry(QtCore.QRect(592, 210, 101, 21))
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_A.setCurrentIndex(0)
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_B.setCurrentIndex(1)
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_C.setCurrentIndex(2)
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_D.setCurrentIndex(3)

        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_A.setCurrentIndex(0)
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_B.setCurrentIndex(1)
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_C.setCurrentIndex(2)
        gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_D.setCurrentIndex(3)

    def run_filterbank_Module_Filter_Bank(self):
        try:
            # Filter Bank
            logger.write("Filter Bank - Module Filter Bank Started.", True)

            # Filter Bank Moudle_Filter_Bank IFBM1

            FL10_Tin_Tout_ch_A = self.Generic_Filter_Algorithm_Module_Filter_Bank(Ch=(gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_A.currentText()), SB_Type="A", Manufacturer=gui.ex.comboBox_LPTR1_Module_filter_bank_Manufacturer.currentText(), NAT_or_INT=gui.ex.comboBox_LPTR1_Module_Filter_Bank_isb7_isb8.currentText())
            FL10_Tin_Tout_ch_B = self.Generic_Filter_Algorithm_Module_Filter_Bank((gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_B.currentText()), "A", gui.ex.comboBox_LPTR1_Module_filter_bank_Manufacturer.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_isb7_isb8.currentText())
            FL10_Tin_Tout_ch_C = self.Generic_Filter_Algorithm_Module_Filter_Bank((gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_C.currentText()), "A", gui.ex.comboBox_LPTR1_Module_filter_bank_Manufacturer.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_isb7_isb8.currentText())
            FL10_Tin_Tout_ch_D = self.Generic_Filter_Algorithm_Module_Filter_Bank((gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_D.currentText()), "A", gui.ex.comboBox_LPTR1_Module_filter_bank_Manufacturer.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_isb7_isb8.currentText())

            # Filter Bank Moudle_Filter_Bank IFBM2

            FL11_Tin_Tout_ch_A = self.Generic_Filter_Algorithm_Module_Filter_Bank((gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_A.currentText()), "B", gui.ex.comboBox_LPTR1_Module_filter_bank_Manufacturer.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_isb7_isb8.currentText())
            FL11_Tin_Tout_ch_B = self.Generic_Filter_Algorithm_Module_Filter_Bank((gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_B.currentText()), "B", gui.ex.comboBox_LPTR1_Module_filter_bank_Manufacturer.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_isb7_isb8.currentText())
            FL11_Tin_Tout_ch_C = self.Generic_Filter_Algorithm_Module_Filter_Bank((gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_C.currentText()), "B", gui.ex.comboBox_LPTR1_Module_filter_bank_Manufacturer.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_isb7_isb8.currentText())
            FL11_Tin_Tout_ch_D = self.Generic_Filter_Algorithm_Module_Filter_Bank((gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_D.currentText()), "B", gui.ex.comboBox_LPTR1_Module_filter_bank_Manufacturer.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_isb7_isb8.currentText())

            # FPGA Register 0x020A (Moudle Filter Bank IFBM1)

            Register_0x020A_Moudle_Filter_Bank_data1_1p = (bin(int(FL10_Tin_Tout_ch_D[0]))[2:]).zfill(5)  # Tin_ch_D
            Register_0x020A_Moudle_Filter_Bank_data1_2p = (bin(int(FL10_Tin_Tout_ch_C[0]))[2:]).zfill(5)  # Tin ch_C
            Register_0x020A_Moudle_Filter_Bank_data1_3p = (bin(int(FL10_Tin_Tout_ch_B[0]))[2:]).zfill(5)  # Tin ch_B

            Register_0x020A_Moudle_Filter_Bank_Hex = str(hex(int(str(Register_0x020A_Moudle_Filter_Bank_data1_3p) + str(Register_0x020A_Moudle_Filter_Bank_data1_2p) + str(Register_0x020A_Moudle_Filter_Bank_data1_1p), 2)))[2:]
            script_page.WriteRegister("LPTR", "0x0000020A", str(Register_0x020A_Moudle_Filter_Bank_Hex), 0.01)

            # FPGA Register 0x020C (Moudle Filter Bank IFBM1)

            Register_0x020C_Moudle_Filter_Bank_data1_4p = (bin(int(FL10_Tin_Tout_ch_A[0]))[2:]).zfill(5)  # Tin_ch_A
            Register_0x020C_Moudle_Filter_Bank_data2_1p = (bin(int(FL10_Tin_Tout_ch_A[1]))[2:]).zfill(5)  # Tout_ch_A
            Register_0x020C_Moudle_Filter_Bank_data2_2p = (bin(int(FL10_Tin_Tout_ch_B[1]))[2:]).zfill(5)  # Tout ch_B

            Register_0x020C_Hex = (str(hex(int(str(Register_0x020C_Moudle_Filter_Bank_data2_2p) + str(Register_0x020C_Moudle_Filter_Bank_data2_1p) + str(Register_0x020C_Moudle_Filter_Bank_data1_4p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x0000020C", str(Register_0x020C_Hex), 0.01)

            # FPGA Register 0x020E (Moudle Filter Bank IFBM1)

            Register_0x020E_Moudle_Filter_Bank_data2_3p = (bin(int(FL10_Tin_Tout_ch_C[1]))[2:]).zfill(5)  # Tout ch C
            Register_0x020E_Moudle_Filter_Bank_data2_4p = (bin(int(FL10_Tin_Tout_ch_D[1]))[2:]).zfill(5)  # Tout ch D

            Register_0x020E_Hex = (str(hex(int(str(Register_0x020E_Moudle_Filter_Bank_data2_4p) + str(Register_0x020E_Moudle_Filter_Bank_data2_3p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x0000020E", str(Register_0x020E_Hex), 0.01)

            # FPGA Register 0x0210 (Moudle Filter Bank IFBM2) #######################

            Register_0x0210_Moudle_Filter_Bank_data1_1p = (bin(int(FL11_Tin_Tout_ch_D[0]))[2:]).zfill(5)  # Tin_ch D
            Register_0x0210_Moudle_Filter_Bank_data1_2p = (bin(int(FL11_Tin_Tout_ch_C[0]))[2:]).zfill(5)  # Tin ch C
            Register_0x0210_Moudle_Filter_Bank_data1_3p = (bin(int(FL11_Tin_Tout_ch_B[0]))[2:]).zfill(5)  # Tin ch B

            Register_0x0210_Hex = (str(hex(int(str(Register_0x0210_Moudle_Filter_Bank_data1_3p) + str(Register_0x0210_Moudle_Filter_Bank_data1_2p) + str(Register_0x0210_Moudle_Filter_Bank_data1_1p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x00000210", str(Register_0x0210_Hex), 0.01)

            # FPGA Register 0x0212 (TX IFBM2) #######################

            Register_0x0212_Moudle_Filter_Bank_data1_4p = (bin(int(FL11_Tin_Tout_ch_A[0]))[2:]).zfill(5)  # Tin ch A
            Register_0x0212_Moudle_Filter_Bank_data2_1p = (bin(int(FL11_Tin_Tout_ch_A[1]))[2:]).zfill(5)  # Tout ch A
            Register_0x0212_Moudle_Filter_Bank_data2_2p = (bin(int(FL11_Tin_Tout_ch_B[1]))[2:]).zfill(5)  # Tout ch B

            Register_0x0212_Hex = (str(hex(int(str(Register_0x0212_Moudle_Filter_Bank_data2_2p) + str(Register_0x0212_Moudle_Filter_Bank_data2_1p) + str(Register_0x0212_Moudle_Filter_Bank_data1_4p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x00000212", str(Register_0x0212_Hex), 0.01)

            # FPGA Register 0x0214 (TX IFBM2) #######################

            Register_0x0214_Moudle_Filter_Bank_data2_3p = (bin(int(FL11_Tin_Tout_ch_C[1]))[2:]).zfill(5)  # Tout ch C
            Register_0x0214_Moudle_Filter_Bank_data2_4p = (bin(int(FL11_Tin_Tout_ch_D[1]))[2:]).zfill(5)  # Tout ch D

            Register_0x0214_Hex = (str(hex(int(str(Register_0x0214_Moudle_Filter_Bank_data2_4p) + str(Register_0x0214_Moudle_Filter_Bank_data2_3p), 2)))[2:])
            script_page.WriteRegister("LPTR", "0x00000214", str(Register_0x0214_Hex), 0.01)

            logger.write("Filter Bank - Module Filter Bank Done.", True)

            return True

        except Exception as error:
            logger.write("[run_filterbank_Module_Filter_Bank]" + str(error), status=False)
            return False

            ######################################

    def Generic_Filter_Algorithm_Module_Filter_Bank(self, Ch, SB_Type, Manufacturer, NAT_or_INT):
        try:
            list_T_IN = []
            list_CH = []
            list_T_OUT = []
            returned_list = []
            # International filters

            sheet_name = {"A": {"MicroChip": {"SB7": "SB7A_MicroChip",
                                       "SB8": "SB8A_MicroChip"},
                         "RFcore": {"SB7": "SB7A_RFCore",
                                    "SB8": "SB8A_RFCore"}},
                   "B": {"MicroChip": {"SB7": "SB7B_MicroChip",
                                       "SB8": "SB8B_MicroChip"},
                         "RFcore": {"SB7": "SB7B_RFCore",
                                    "SB8": "SB8B_RFCore"}}}

            df = pd.read_excel("Files\\VA\\LPTR1\\Excel Files\\INT_Module_FilterBank_TABLE.xlsx", sheet_name=sheet_name[str(SB_Type)][str(Manufacturer)][str(NAT_or_INT)])

            for i in range(len(df)):
                try:
                    if (str(df.iloc[i, 1]) == str(Ch)):
                        return [int(df.iloc[i, 0]), int(df.iloc[i, 2])]
                except Exception as error:
                    pass

            return False

        except Exception as error:
            logger.write("[Generic_Filter_Algorithm] error: " + str(error), False)
            return False

    def Read_ID_ver_moudle_filter_bank(self):
        script_page.WriteRegister("LPTR", "0x00000150", "4900", 0.01)
        value_ifbm1 = script_page.ReadRegister("LPTR", "0x00000152", 0.01)
        value_ifbm1 = (str(bin(int(str(value_ifbm1), 16)))[2:]).zfill(16)
        gui.ex.lineEdit_Moudle_ifbm1_v1.setText(str(value_ifbm1[9]))
        gui.ex.lineEdit_Moudle_ifbm1_v0.setText(str(value_ifbm1[10]))
        gui.ex.lineEdit_Moudle_ifbm1_d4.setText(str(value_ifbm1[11]))
        gui.ex.lineEdit_Moudle_ifbm1_d3.setText(str(value_ifbm1[12]))
        gui.ex.lineEdit_Moudle_ifbm1_d2.setText(str(value_ifbm1[13]))
        gui.ex.lineEdit_Moudle_ifbm1_d1.setText(str(value_ifbm1[14]))
        gui.ex.lineEdit_Moudle_ifbm1_d0.setText(str(value_ifbm1[15]))

        script_page.WriteRegister("LPTR", "0x00000150", "4901", 0.01)
        value_ifbm2 = script_page.ReadRegister("LPTR", "0x00000152", 0.01)
        value_ifbm2 = (str(bin(int(str(value_ifbm2), 16)))[2:]).zfill(16)
        gui.ex.lineEdit_Moudle_ifbm2_v1.setText(str(value_ifbm2[9]))
        gui.ex.lineEdit_Moudle_ifbm2_v0.setText(str(value_ifbm2[10]))
        gui.ex.lineEdit_Moudle_ifbm2_d4.setText(str(value_ifbm2[11]))
        gui.ex.lineEdit_Moudle_ifbm2_d3.setText(str(value_ifbm2[12]))
        gui.ex.lineEdit_Moudle_ifbm2_d2.setText(str(value_ifbm2[13]))
        gui.ex.lineEdit_Moudle_ifbm2_d1.setText(str(value_ifbm2[14]))
        gui.ex.lineEdit_Moudle_ifbm2_d0.setText(str(value_ifbm2[15]))

    def pre_run_module_filter_bank(self):
        # avi hagai card
        if (lptr1.Error_for_filterBank(listOfItems=[gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_A.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_B.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_C.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM1_ch_D.currentText()], NameOfFilter="IFBM1 Module Filter Bank") == False):
            return False
        if (lptr1.Error_for_filterBank(listOfItems=[gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_A.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_B.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_C.currentText(), gui.ex.comboBox_LPTR1_Module_Filter_Bank_IFBM2_ch_D.currentText()], NameOfFilter="IFBM2 Module Filter Bank") == False):
            return False
        if (self.run_io_expender_script_moudle_filter_bank() == False):
            return False
        if (self.run_filterbank_Module_Filter_Bank() == False):
            return False

        return True

    def open_freq_table(self, fileName):
        try:
            os.startfile("Files\\VA\\LPTR1\\Pictures\\" + str(fileName), 'open')
        except Exception as error:
            logger.write("[Failed open_freq_table] Error: " + str('{err}'.format(err=error)), status=False)


class MBTR:
    def __init__(self):
        gui.ex.pushButton_Home_VA_MBTR_set_KOMO.clicked.connect(lambda: threading.Thread(target=self.Manage_Command).start())

    def show_tab(self):
        try:
            gui.ex.va_tabWidget.show()
            gui.ex.va_tabWidget.setCurrentIndex(2)
            gui.ex.tabWidget_mbtr.setCurrentIndex(0)
            gui.ex.va_tabWidget.tabBar().hide()
            gui.ex.lptr1_cards_tab.tabBar().hide()
            gui.ex.component_index_btn.setHidden(False)
            gui.ex.label_second_arrow.setHidden(False)
            gui.ex.card_index_btn.setHidden(False)
            gui.ex.label_third_arrow.setHidden(False)
            gui.ex.card_index_btn.setText("MBTR")
            gui.ex.va_tabWidget.setGeometry(0, 0, 1021, 631)
            gui.ex.frame_setUp.setHidden(True)
            action.status_side_menu(False)

            self.dut = ""
            list_of_frames = ["frame_set_im2_curr", "frame_get_im2_curr", "frame_get_downmixer_DC", "frame_set_iq_curr", "frame_get_iq_curr", "frame_setUp", "frame_set_downmixer_gain", "frame_get_downmixer_gain", "frame_Set_downmixer_DC"]
            for Currframe in list_of_frames:
                WriteStream.write([str(Currframe) + ".setHidden", True])
        except Exception as error:
            logger.write("[MBTR - show_tab]" + str(error), status=False)

    def Manage_Command(self):
        try:
            if gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Init":
                print("started")

                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_setUp.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_set_im2_curr.setHidden(True)
                try:
                    print("before init")
                    self.dut = Merlin2bEval()
                    self.dut.init()
                    print("after init")
                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Set Up":
                gui.ex.frame_setUp.setHidden(False)
                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_set_im2_curr.setHidden(True)
                gui.ex.frame_setUp.setGeometry(QtCore.QRect(200, 150, 201, 171))
                if gui.ex.lineEdit_Home_VA_MBTR_chain_setup.currentText() == "True":
                    chain = True
                elif gui.ex.lineEdit_Home_VA_MBTR_chain_setup.currentText() == "False":
                    chain = False

                try:

                    self.dut.setup(int(gui.ex.input_setup), int(gui.ex.output_setup), int(gui.ex.band_setUp), chain)
                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Get Weights":
                gui.ex.frame_setUp.setHidden(True)
                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_set_im2_curr.setHidden(True)

                try:

                    getweigts = self.dut.get_weights()
                    logger.write(str(getweigts))

                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Clear Weights":
                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_setUp.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_set_im2_curr.setHidden(True)

                try:

                    self.dut.clear_weights(True)

                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Set Downmixer Gain":
                gui.ex.frame_setUp.setHidden(True)
                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(False)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_set_im2_curr.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setGeometry(QtCore.QRect(200, 150, 201, 171))

                try:

                    self.dut.set_downmixer_gain(float(gui.ex.gain_downmixer_gain.text()), int(gui.ex.input_downmixer_gain.text()))

                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Get Downmixer Gain":
                try:
                    gui.ex.frame_setUp.setHidden(True)
                    gui.ex.frame_get_im2_curr.setHidden(True)
                    gui.ex.frame_get_iq_curr.setHidden(True)
                    gui.ex.frame_set_iq_curr.setHidden(True)
                    gui.ex.frame_get_downmixer_DC.setHidden(True)
                    gui.ex.frame_Set_downmixer_DC.setHidden(True)
                    gui.ex.frame_set_downmixer_gain.setHidden(True)
                    gui.ex.frame_set_im2_curr.setHidden(True)
                    gui.ex.frame_get_downmixer_gain.setHidden(False)
                    gui.ex.frame_get_downmixer_gain.setGeometry(QtCore.QRect(200, 150, 201, 171))
                    get = self.dut.get_downmixer_gain(int(gui.ex.input_Getdownmixer_gain.text()))
                    logger.write(get)

                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Set Downmixer Dc Offset":
                gui.ex.frame_Set_downmixer_DC.setHidden(False)
                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setGeometry(QtCore.QRect(200, 150, 201, 171))
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_setUp.setHidden(True)
                gui.ex.frame_set_im2_curr.setHidden(True)
                try:

                    self.dut.set_downmixer_dc_offset(float(gui.ex.IOffset_Setdownmixer_DC.text()), float(gui.ex.QOffset_Setdownmixer_DC.text()), int(gui.ex.input_Setdownmixer_DC.text()))
                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Get Downmixer Dc Offset":
                gui.ex.frame_get_downmixer_DC.setHidden(False)
                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setGeometry(QtCore.QRect(200, 150, 201, 171))
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_setUp.setHidden(True)
                gui.ex.frame_set_im2_curr.setHidden(True)

                try:
                    get = self.dut.get_downmixer_dc_offset(int(gui.ex.input_Getdownmixer_dc.text()))
                    logger.write(str(get))

                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Get Downmixer Gain Range":
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_setUp.setHidden(True)
                gui.ex.frame_set_im2_curr.setHidden(True)
                try:
                    get_downixer = self.dut.get_downmixer_gain_range()
                    logger.write(str(get_downixer))
                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Set Downmixer IQ Correction":
                gui.ex.frame_set_iq_curr.setHidden(False)
                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_set_iq_curr.setGeometry(QtCore.QRect(200, 150, 201, 171))
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_setUp.setHidden(True)
                gui.ex.frame_set_im2_curr.setHidden(True)
                try:
                    self.dut.set_downmixer_iq_correction(int(gui.ex.gain_set_iq_curr.text()), int(gui.ex.phase_set_iq_curr.text()), int(gui.ex.input_set_iq_curr.text()))

                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Get Downmixer IQ Correction":
                gui.ex.frame_get_iq_curr.setHidden(False)
                gui.ex.frame_get_iq_curr.setGeometry(QtCore.QRect(200, 150, 201, 171))
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_setUp.setHidden(True)
                gui.ex.frame_set_im2_curr.setHidden(True)
                try:
                    get_down_IQ = self.dut.get_downmixer_iq_correction(int(gui.ex.input_get_iq_curr.text()))
                    logger.write(str(get_down_IQ))

                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Set DownMixer im2 Correction":
                gui.ex.frame_set_im2_curr.setHidden(False)
                gui.ex.frame_set_im2_curr.setGeometry(QtCore.QRect(200, 150, 201, 171))
                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_setUp.setHidden(True)
                try:
                    self.dut.set_downmixer_im2_correction(int(gui.ex.i_set_im2_curr.text()), int(gui.ex.q_set_im2_curr.text()), int(gui.ex.input_set_im2_curr.text()))

                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Get DownMixer im2 Correction":
                gui.ex.frame_get_im2_curr.setHidden(False)
                gui.ex.frame_get_im2_curr.setGeometry(QtCore.QRect(200, 150, 201, 171))
                gui.ex.frame_set_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_setUp.setHidden(True)
                try:
                    get = self.dut.get_downmixer_im2_correction(int(gui.ex.input_get_im2_curr.text()))
                    logger.write(str(get))

                except Exception as error:
                    logger.write(" error:" + str('{err}'.format(err=error)), status=False)

            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Reset":
                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_set_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_setUp.setHidden(True)
                self.dut.reset()
                logger.write("Reset KOMO")
            elif gui.ex.comboBox_Home_VA_MBTR_select_command.currentText() == "Apply":
                gui.ex.frame_get_im2_curr.setHidden(True)
                gui.ex.frame_set_im2_curr.setHidden(True)
                gui.ex.frame_get_iq_curr.setHidden(True)
                gui.ex.frame_set_iq_curr.setHidden(True)
                gui.ex.frame_get_downmixer_DC.setHidden(True)
                gui.ex.frame_Set_downmixer_DC.setHidden(True)
                gui.ex.frame_set_downmixer_gain.setHidden(True)
                gui.ex.frame_get_downmixer_gain.setHidden(True)
                gui.ex.frame_setUp.setHidden(True)
                self.dut.apply()
                logger.write("Apply KOMO")
        except Exception as error:
            logger.write("[Manage_Command]" + str(error), status=False)


class HPTR:
    def __init__(self):
        gui.ex.pushButton_Home_VA_HPTR_Send_Componenet.clicked.connect(lambda: threading.Thread(target=action.write_component).start())

    def hptr_component(self):
        try:
            if gui.ex.comboBox_Configuration_fullscreen_status.currentText() == "Yes":
                WriteStream.write(["showMaximized()"])
            gui.ex.component_index_btn.setHidden(False)
            gui.ex.label_second_arrow.setHidden(False)
            gui.ex.card_index_btn.setHidden(False)
            gui.ex.label_third_arrow.setHidden(False)
            gui.ex.card_index_btn.setText("HPTR\nboard")
            action.status_side_menu(False)
            gui.ex.va_tabWidget.show()
            gui.ex.va_tabWidget.setCurrentIndex(3)
            gui.ex.va_tabWidget.tabBar().hide()
        except Exception as error:
            logger.write("[hptr_component] error: " + str(error), status=False)

    def exceptions_comp(self, component_hsid, add, gui_comp, curr_values):
        try:
            if gui_comp == '50':
                newText = ''
                state = {
                    "SC1": gui.ex.checkBox_hptr_Detector_Integration_Time_SC1.isChecked(),
                    "SC2": gui.ex.checkBox_hptr_Detector_Integration_Time_SC2.isChecked(),
                    "SC3": gui.ex.checkBox_hptr_Detector_Integration_Time_SC3.isChecked()}
                for key, value in state.items():
                    if value:
                        newText += key
                msg_in_bits = component_hsid[str(add)][str(gui_comp)][str(newText)]
                curr_values = list(curr_values)
                for bit in range(len(msg_in_bits)):
                    if msg_in_bits[bit] != "_":
                        curr_values[bit] = msg_in_bits[bit]
                return curr_values
            return False
        except Exception as error:
            logger.write("[exceptions_comp] error: " + str(error), status=False)


class WBN:
    def __init__(self):
        self.all = ""
        self.fl44_fl48_fl43_fl54_var = ""
        self.fl41_fl50_fl49_fl39_var = ""
        gui.ex.wbn_tabWidget.tabBar().hide()
        gui.ex.pushButton_Home_WBN_picture_component.clicked.connect(lambda: threading.Thread(target=self.show_card()).start())
        gui.ex.wbn_tabWidget.setGeometry(0, 0, 1920, 830)
        # gui.ex.wbn_card_scroll_area.setGeometry(110, -12, 1520, 870)
        gui.ex.tabWidget_Navassa_Config.tabBar().hide()

        gui.ex.pushButton_Home_WBN_zoom_wbn.clicked.connect(lambda: threading.Thread(target=self.open_wbn_photo).start())
        gui.ex.pushButton_Home_WBN_wnb_Card_send.clicked.connect(lambda: threading.Thread(target=action.write_component, args=["WBN"]).start())
        gui.ex.pushButton_Home_WBN_wnb_card_save_script.clicked.connect(lambda: threading.Thread(target=action.save_component_script, args=["WBN"]).start())
        gui.ex.pushButton_Home_WBN_wbn_card_load_file.clicked.connect(lambda: threading.Thread(target=action.load_file_to_component, args=["WBN"]).start())

        gui.ex.get_version_button.clicked.connect(lambda: threading.Thread(target=self.GetVersion).start())
        gui.ex.transparent_navassa1_button.clicked.connect(lambda: threading.Thread(navassa.navassa_config_page(index=0)).start())
        gui.ex.transparent_navassa2_button.clicked.connect(lambda: threading.Thread(navassa.navassa_config_page(index=1)).start())
        gui.ex.read_all_detectors_button.clicked.connect(lambda: threading.Thread(target=self.Read_all_detectors).start())
        gui.ex.freq_DC2.textChanged.connect(lambda: threading.Thread(target=self.DC_couple_freq, args=["freq_DC2", "couple_DC2"]).start())
        gui.ex.freq_DC1.textChanged.connect(lambda: threading.Thread(target=self.DC_couple_freq, args=["freq_DC1", "couple_DC1"]).start())
        gui.ex.read_u48.clicked.connect(lambda: threading.Thread(target=self.detectors, args=["u48"]).start())
        gui.ex.read_u61.clicked.connect(lambda: threading.Thread(target=self.detectors, args=["u61"]).start())
        gui.ex.read_u59.clicked.connect(lambda: threading.Thread(target=self.detectors, args=["u59"]).start())
        gui.ex.read_u62.clicked.connect(lambda: threading.Thread(target=self.detectors, args=["u62"]).start())
        gui.ex.comboBox_wbn_u83.currentIndexChanged.connect(lambda: threading.Thread(target=self.drivers_on_off).start())
        gui.ex.send_fl49_fl39.clicked.connect(lambda: threading.Thread(target=self.send_Tuners, args=["fl49_fl39_lineeedit", "0x00000062", "0x00000064", 2]).start())
        gui.ex.send_fl50_fl41.clicked.connect(lambda: threading.Thread(target=self.send_Tuners, args=["fl41_fl50_lineeedit", "0x00000062", "0x00000064", 1]).start())
        gui.ex.send_fl44_fl48.clicked.connect(lambda: threading.Thread(target=self.send_Tuners, args=["fl44_fl48_lineeedit", "0x00000052", "0x00000054", 2]).start())
        gui.ex.send_fl43_fl54.clicked.connect(lambda: threading.Thread(target=self.send_Tuners, args=["fl43_fl54_lineeedit", "0x00000052", "0x00000054", 1]).start())
        gui.ex.fl49_fl39_lineeedit.textChanged.connect(lambda: threading.Thread(target=self.flags_for_tuners_errors, args=["fl49_fl39_lineeedit", "fl49_fl39_selection"]).start())
        gui.ex.fl41_fl50_lineeedit.textChanged.connect(lambda: threading.Thread(target=self.flags_for_tuners_errors, args=["fl41_fl50_lineeedit", "fl41_fl50_selection"]).start())
        gui.ex.fl43_fl54_lineeedit.textChanged.connect(lambda: threading.Thread(target=self.flags_for_tuners_errors, args=["fl43_fl54_lineeedit", "fl43_fl54_selection"]).start())
        gui.ex.fl44_fl48_lineeedit.textChanged.connect(lambda: threading.Thread(target=self.flags_for_tuners_errors, args=["fl44_fl48_lineeedit", "fl44_fl48_selection"]).start())
        gui.ex.pushButton_wbn_LPF_A_U68_U75.clicked.connect(lambda: threading.Thread(target=self.manage_buttons, args=["pushButton_wbn_LPF_A_U68_U75", "u68_u75"]).start())
        gui.ex.pushButton_wbn_LPF_B_U68_U75.clicked.connect(lambda: threading.Thread(target=self.manage_buttons, args=["pushButton_wbn_LPF_B_U68_U75", "u68_u75"]).start())
        gui.ex.pushButton_wbn_LPF_C_U68_U75.clicked.connect(lambda: threading.Thread(target=self.manage_buttons, args=["pushButton_wbn_LPF_C_U68_U75", "u68_u75"]).start())
        gui.ex.pushButton_wbn_LPF_D_U68_U75.clicked.connect(lambda: threading.Thread(target=self.manage_buttons, args=["pushButton_wbn_LPF_D_U68_U75", "u68_u75"]).start())
        gui.ex.pushButton_wbn_LPF_A_U108_U109.clicked.connect(lambda: threading.Thread(target=self.manage_buttons, args=["pushButton_wbn_LPF_A_U108_U109", "u108_u109"]).start())
        gui.ex.pushButton_wbn_LPF_B_U108_U109.clicked.connect(lambda: threading.Thread(target=self.manage_buttons, args=["pushButton_wbn_LPF_B_U108_U109", "u108_u109"]).start())
        gui.ex.pushButton_wbn_LPF_C_U108_U109.clicked.connect(lambda: threading.Thread(target=self.manage_buttons, args=["pushButton_wbn_LPF_C_U108_U109", "u108_u109"]).start())
        gui.ex.pushButton_wbn_LPF_D_U108_U109.clicked.connect(lambda: threading.Thread(target=self.manage_buttons, args=["pushButton_wbn_LPF_D_U108_U109", "u108_u109"]).start())

        gui.ex.pushButton_read_u83_u36_i.clicked.connect(lambda: threading.Thread(target=self.current_sensor, args=["pushButton_read_u83_u36_i"]).start())
        gui.ex.pushButton_read_u88_u47_i.clicked.connect(lambda: threading.Thread(target=self.current_sensor, args=["pushButton_read_u88_u47_i"]).start())

    def hide_card_frame(self):
        try:
            if gui.ex.comboBox_Configuration_fullscreen_status.currentText() == "Yes":
                WriteStream.write(["showNormal()"])
            gui.ex.main_tab_widget.setCurrentIndex(0)
            gui.ex.home_tab_widget.setCurrentIndex(4)
            gui.ex.wbn_tabWidget.setCurrentIndex(0)
            # gui.ex.wbn_tabWidget.hide()
            action.status_side_menu(True)
        except Exception as error:
            logger.write("WBN [hide_card_frame] error: " + str(error), status=False)

    def show_card(self):
        try:
            if gui.ex.comboBox_Configuration_fullscreen_status.currentText() == "Yes":
                WriteStream.write(["showMaximized()"])
            gui.ex.main_tab_widget.setCurrentIndex(0)
            gui.ex.home_tab_widget.setCurrentIndex(4)
            gui.ex.wbn_tabWidget.setCurrentIndex(1)
            # gui.ex.wbn_tabWidget.show()
            gui.ex.component_index_btn.setHidden(False)
            gui.ex.label_second_arrow.setHidden(False)
            gui.ex.card_index_btn.setHidden(False)
            gui.ex.label_third_arrow.setHidden(False)
            gui.ex.card_index_btn.setText("WBN\nLPTR Board")
            action.status_side_menu(False)
        except Exception as error:
            logger.write("WBN [show_card] error: " + str(error), status=False)

    def GetVersion(self):
        try:
            if script_page.sock is None:
                script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()),
                                        ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                        port=int(gui.ex.lineEdit_Configuration_computer_port.text()))

            configurations = json.load(open("Files\\Messages\\Packet_GP_Get_REG.json", "r"))
            configurations["payload"]["Board_ID"] = "0001"
            Reg_Address = "0x00000000"
            # Reg_Address[2:] -> 80000004
            configurations["payload"]["Reg_Address_Low"] = Reg_Address[2:][4:8]
            configurations["payload"]["Reg_Address_High"] = Reg_Address[2:][:4]

            packet = Packet(packet=configurations)
            script_page.sock.send(packet=packet.packetBuilded)
            packetRecive = script_page.sock.receive()
            # put the value in the GUI
            value_0x00 = packetRecive[60:68]
            value_0x00 = hex(int(value_0x00[4:8] + value_0x00[:4], 16))[2:].upper()
            time.sleep(int(0.1))

            configurations = json.load(open("Files\\Messages\\Packet_GP_Get_REG.json", "r"))

            configurations["payload"]["Board_ID"] = "0001"
            Reg_Address = "0x00000002"
            configurations["payload"]["Reg_Address_Low"] = Reg_Address[2:][4:8]
            configurations["payload"]["Reg_Address_High"] = Reg_Address[2:][:4]
            packet = Packet(packet=configurations)
            script_page.sock.send(packet=packet.packetBuilded)
            # recive message
            packetRecive = script_page.sock.receive()
            # put the value in the GUI
            value_0x02 = packetRecive[60:68]
            value_0x02 = hex(int(value_0x02[4:8] + value_0x02[:4], 16))[2:].zfill(4)

            configurations = json.load(open("Files\\Messages\\Packet_GP_Get_REG.json", "r"))

            configurations["payload"]["Board_ID"] = "0001"
            Reg_Address = "0x00000004"
            configurations["payload"]["Reg_Address_Low"] = Reg_Address[2:][4:8]
            configurations["payload"]["Reg_Address_High"] = Reg_Address[2:][:4]
            packet = Packet(packet=configurations)
            script_page.sock.send(packet=packet.packetBuilded)
            # recive message
            packetRecive = script_page.sock.receive()
            value_0x04 = packetRecive[60:68]
            value_0x04 = hex(int(value_0x04[4:8] + value_0x04[:4], 16))[2:].zfill(4)
            value_0x04 = (str(bin(int(str(value_0x04), 16)))[2:])
            fpga_Days = (str(int(str(value_0x04[:5]), 2)))
            fpga_Hours = (str(int(str(value_0x04[6:10]), 2)))
            fpga_Minuts = (str(int(str(value_0x04[10:16]), 2)))

            configurations = json.load(open("Files\\Messages\\Packet_GP_Get_REG.json", "r"))

            configurations["payload"]["Board_ID"] = "0001"
            Reg_Address = "0x00000006"
            configurations["payload"]["Reg_Address_Low"] = Reg_Address[2:][4:8]
            configurations["payload"]["Reg_Address_High"] = Reg_Address[2:][:4]
            packet = Packet(packet=configurations)
            script_page.sock.send(packet=packet.packetBuilded)
            # recive message
            packetRecive = script_page.sock.receive()
            value_0x06 = packetRecive[60:68]
            value_0x06 = hex(int(value_0x06[4:8] + value_0x06[:4], 16))[2:].zfill(4)
            value_0x06 = (str(bin(int(str(value_0x06), 16)))[2:])
            fpga_months = (str(int(str(value_0x06[:4]), 2)))
            fpga_years = (str(int(str(value_0x06[0:5]), 2)))

            configurations = json.load(open("Files\\Messages\\Packet_GP_Get_REG.json", "r"))

            configurations["payload"]["Board_ID"] = "0001"
            Reg_Address = "0x00000008"
            configurations["payload"]["Reg_Address_Low"] = Reg_Address[2:][4:8]
            configurations["payload"]["Reg_Address_High"] = Reg_Address[2:][:4]
            packet = Packet(packet=configurations)
            script_page.sock.send(packet=packet.packetBuilded)
            # recive message
            packetRecive = script_page.sock.receive()
            value_0x08 = packetRecive[60:68]
            value_0x08 = hex(int(value_0x08[4:8] + value_0x08[:4], 16))[2:].zfill(4)
            print(value_0x08)
            WriteStream.write(["textBrowser_SystemMessages.clear()"])

            logger.write("FPGA VERSION : " + str(value_0x00) + str(value_0x02))
            logger.write("FPGA DATE : " + str(fpga_Days) + str("/") + str(fpga_months) + str("/") + str(fpga_years) + str(" ") + str(fpga_Hours) + str(":") + str(fpga_Minuts))
            # logger.write("HW Version : " + str(value_0x08))

        except Exception as error:
            logger.write("[GetVersion]" + str(error), status=False)

    def drivers_on_off(self):
        try:
            if gui.ex.comboBox_wbn_u83.currentText() == "ON":
                gui.ex.u83_circle.setHidden(False)
                gui.ex.u36_circle.setHidden(False)
                gui.ex.u56_circle.setHidden(False)
            else:
                gui.ex.u83_circle.setHidden(True)
                gui.ex.u36_circle.setHidden(True)
                gui.ex.u56_circle.setHidden(True)
        except Exception as error:
            logger.write("[drivers_on_off] error: " + str(error), status=False)

    def DC_couple_freq(self, freq_name, couple_name):
        try:

            freq = eval("gui.ex." + str(freq_name) + ".text()")
            file = open('Files\\DC.csv')
            csvreader = csv.reader(file)
            for row in csvreader:
                if row[0] == freq:
                    couple = str(row[1])
                    WriteStream.write([str(couple_name) + ".setText", str(couple)])
                    break
                elif row[0] != freq:
                    WriteStream.write([str(couple_name) + ".setText", ""])

        except Exception as error:
            logger.write("DC error" + str('{err}'.format(err=error)), status=False)

    def detectors(self, nameofobject):
        try:
            address_to_write = "0x0000006A"
            address_to_read = "0x0000006C"
            if nameofobject == "u48":
                script_page.WriteRegister("LPTR", str(address_to_write), "1", 0.01)
                value_in_Hex = int(script_page.ReadRegister("LPTR", str(address_to_read), 0.01))
                value_in_Hex = ((value_in_Hex * 3.3) / 4095)
                value_in_Hex = ((value_in_Hex - 2.547) / 0.0293)
                value_in_Hex += int(gui.ex.couple_DC2.text())
                gui.ex.res_u48.setText(str(value_in_Hex))
            elif nameofobject == "u61":
                script_page.WriteRegister("LPTR", str(address_to_write), "2", 0.01)
                value_in_Hex = int(script_page.ReadRegister("LPTR", str(address_to_read), 0.01))
                value_in_Hex = ((value_in_Hex * 3.3) / 4095)
                value_in_Hex = ((value_in_Hex - 2.547) / 0.0293)
                value_in_Hex += int(gui.ex.couple_DC1.text())
                gui.ex.res_u61.setText(str(value_in_Hex))
            elif nameofobject == "u59":
                script_page.WriteRegister("LPTR", str(address_to_write), "4", 0.01)
                value_in_Hex = int(script_page.ReadRegister("LPTR", str(address_to_read), 0.01))
                value_in_Hex = ((value_in_Hex * 3.3) / 4095)
                value_in_Hex = ((value_in_Hex - 2.547) / 0.0293)
                value_in_Hex += int(gui.ex.couple_DC2.text())
                gui.ex.res_u59.setText(str(value_in_Hex))
            elif nameofobject == "u62":
                script_page.WriteRegister("LPTR", str(address_to_write), "8", 0.01)
                value_in_Hex = int(script_page.ReadRegister("LPTR", str(address_to_read), 0.01))
                value_in_Hex = ((value_in_Hex * 3.3) / 4095)
                value_in_Hex = ((value_in_Hex - 2.547) / 0.0293)
                value_in_Hex += int(gui.ex.couple_DC1.text())
                gui.ex.res_u62.setText(str(value_in_Hex))
            else:
                logger.write("no freq in csv file")
        except Exception as error:
            logger.write("[detectors] error: " + str(error), status=False)

    def Read_all_detectors(self):
        try:
            self.detectors("u48")
            self.detectors("u61")
            self.detectors("u59")
            self.detectors("u62")
        except Exception as error:
            logger.write("[Read_all_detectors] error: " + str(error), status=False)

    def send_Tuners(self, tuner_value, address_first, address_less, value_for_second_address):
        try:
            tuner = eval("gui.ex." + str(tuner_value) + ".text()")
            tuner = str(hex(int(tuner)))[2:]
            first_address = str(address_first)
            Last_address = str(address_less)
            value_for_second_addres = str(value_for_second_address)
            script_page.WriteRegister("LPTR", first_address, tuner, 0.01)
            script_page.WriteRegister("LPTR", Last_address, value_for_second_addres, 0.01)

        except Exception as error:
            logger.write("[send_Tuners]" + str(error), status=False)

    def check_float(self, potential_float):
        try:
            float(potential_float)
            return True
        except ValueError:
            return False

    def flags_for_tuners_errors(self, tuner_value, tuner_select):
        try:
            tuner = eval("gui.ex." + str(tuner_value) + ".text()")
            tuner_select_combo = eval("gui.ex." + str(tuner_select) + ".currentText()")
            if tuner != "" or tuner != "0.":
                if tuner == "":
                    eval("gui.ex." + str(tuner_value) + ".setStyleSheet" + "('border-color :red;background-color:rgb(255, 0, 0);')")
                if re.match(r'^-?\d+(?:\.\d+)$', tuner) is None:
                    if tuner_select_combo == "1300-1700":
                        if int(tuner) > 1700 or int(tuner) < 1300:
                            eval("gui.ex." + str(tuner_value) + ".setStyleSheet" + "('border-color :red;background-color:rgb(255, 0, 0);')")
                        else:
                            eval("gui.ex." + str(tuner_value) + ".setStyleSheet" + "('border: 2px solid #6593cf; background-color: rgb(255, 255, 255);')")
                    elif tuner_select_combo == "1000-1800":
                        if int(tuner) > 1800 or int(tuner) < 1000:
                            eval("gui.ex." + str(tuner_value) + ".setStyleSheet" + "('border-color :red;background-color:rgb(255, 0, 0);')")
                        else:
                            eval("gui.ex." + str(tuner_value) + ".setStyleSheet" + "('border: 2px solid #6593cf; background-color: rgb(255, 255, 255);')")
                else:
                    eval("gui.ex." + str(tuner_value) + ".setStyleSheet" + "('border-color :red;background-color:rgb(255, 0, 0);')")

        except Exception as error:
            logger.write("[flags_for_tuners_errors]" + str(error), status=False)

    def func_for_reverse_nihut(self, num_in_Hex, sum=0):
        try:
            list_1 = [16, 8, 4, 2, 1, 0.5]
            num_in_Hex = num_in_Hex
            num_in_Hex = (str(bin(int(str(num_in_Hex), 16)))[2:]).zfill(16)
            num_in_Hex = num_in_Hex[10:16]
            for i in range(len(num_in_Hex)):
                if num_in_Hex[i] == "1":
                    continue
                elif num_in_Hex[i] == "0":
                    sum += list_1[i]
            return sum
        except Exception as error:
            logger.write("[func_for_reverse_nihut] error: " + str(error), status=False)

    def func_for_nihut(self, num, ans="", sum=0):
        try:
            list_1 = [16, 8, 4, 2, 1, 0.5]
            for i in list_1:
                if i + sum <= num:
                    sum += i
                    ans += "0"
                else:
                    ans += "1"
            return ans
        except Exception as error:
            logger.write("[func_for_nihut] error: " + str(error), status=False)

    def open_wbn_photo(self):
        try:
            os.startfile("pictures\\System_WBN_BB_4RX_2TX_up_30.11.2021.png", 'open')
        except Exception as error:
            logger.write("[Failed OpenCurrLogFile] Error: " + str('{err}'.format(err=error)), status=False)

    def manage_buttons(self, obj, filter):
        try:
            if filter == "u68_u75":
                objList = ["pushButton_wbn_LPF_A_U68_U75", "pushButton_wbn_LPF_B_U68_U75", "pushButton_wbn_LPF_C_U68_U75", "pushButton_wbn_LPF_D_U68_U75"]

                for currObj in objList:
                    WriteStream.write([str(currObj) + ".setChecked", False])

                for currObj in objList:
                    if currObj == obj:
                        WriteStream.write([str(currObj) + ".setChecked", True])
                        break
            elif filter == "u108_u109":
                objList = ["pushButton_wbn_LPF_A_U108_U109", "pushButton_wbn_LPF_B_U108_U109", "pushButton_wbn_LPF_C_U108_U109", "pushButton_wbn_LPF_D_U108_U109"]

                for currObj in objList:
                    WriteStream.write([str(currObj) + ".setChecked", False])

                for currObj in objList:
                    if currObj == obj:
                        WriteStream.write([str(currObj) + ".setChecked", True])
                        break
        except Exception as error:
            logger.write("[manage_buttons] error: " + str(error), status=False)

    def exceptions_comp(self, component_hsid, add, gui_comp, curr_values):
        try:
            if (add == "0xFFFF"):
                self.Vgs_Message()
                return None
        except Exception as error:
            return False

    def current_sensor(self, objName):
        if (objName == "pushButton_read_u83_u36_i"):
            script_page.WriteRegister("LPTR", "0x0000008E", "1", 0.01)
            time.sleep(0.5)
            value_i_u83_u36_hex = script_page.ReadRegister("LPTR", "0x00000090", 0.01)
            value_i_u83_u36_dec = (str(int(str(value_i_u83_u36_hex), 16)))
            ADC_vin_u83_u36 = ((int(value_i_u83_u36_dec) / (pow(2, 12) - 1) * 3.3))
            i_sens_u83_u36 = (100 * ADC_vin_u83_u36 / (0.03 * 10000))
            gui.ex.lineEdit_WBN_IA_u83_u36.setText(str(i_sens_u83_u36)[:6])
        elif (objName == "pushButton_read_u88_u47_i"):
            script_page.WriteRegister("LPTR", "0x00000092", "1", 0.01)
            time.sleep(0.5)
            value_i_u88_u47_hex = script_page.ReadRegister("LPTR", "0x00000094", 0.01)
            value_i_u88_u47_dec = (str(int(str(value_i_u88_u47_hex), 16)))
            ADC_vin_u88_u47 = ((int(value_i_u88_u47_dec) / (pow(2, 12) - 1) * 3.3))
            i_sens_u88_u47 = (100 * ADC_vin_u88_u47 / (0.03 * 10000))
            gui.ex.lineEdit_WBN_IA_u88_u47.setText(str(i_sens_u88_u47)[:6])

    def Vgs(self, NameOfObj):
        value = eval("gui.ex." + str(NameOfObj) + ".value()")
        OpAmpVo = ((value - (-3.3)) * (400 / 80 + 1) + (-3.3))
        DAC_Vo_divider = 10000 / (10000 + 10)
        DAC_Vo = OpAmpVo / (2 * DAC_Vo_divider)
        Dac_Data = round(DAC_Vo * (pow(2, 12)) / (1 * 2.5))
        Dac_Data = (hex(int(str(Dac_Data), 10)))
        sum = hex(int(str(Dac_Data), 16) + int("3000", 16))[2:]
        return sum

    def Vgs_Message(self):
        try:
            add_vgs_value = "0x00000066"
            add_destination = "0x00000068"
            script_page.WriteRegister("LPTR", "0x00000066", str(self.Vgs("doubleSpinBox_WBN_u36_vgs")), 0.01)
            script_page.WriteRegister("LPTR", "0x00000068", "2", 0.01)
            script_page.WriteRegister("LPTR", "0x00000066", str(self.Vgs("doubleSpinBox_WBN_u83_vgs")), 0.01)
            script_page.WriteRegister("LPTR", "0x00000068", "1", 0.01)

            script_page.WriteRegister("LPTR", "0x00000066", str(self.Vgs("doubleSpinBox_WBN_u47_vgs")), 0.01)
            script_page.WriteRegister("LPTR", "0x00000068", "4", 0.01)
            script_page.WriteRegister("LPTR", "0x00000066", str(self.Vgs("doubleSpinBox_WBN_u88_vgs")), 0.01)
            script_page.WriteRegister("LPTR", "0x00000068", "8", 0.01)
        except Exception as error:
            logger.write("[Vgs Message WBN]" + str(error), False)


class HH:
    def __init__(self):
        pass


class MP:
    def __init__(self):
        pass


class Navassa_Config:
    def __init__(self):
        self.index_navassa = 0
        gui.ex.pushButton_Home_Navassa_Config_Navassa_Operation.clicked.connect(lambda: threading.Thread(target=navassa_operation.manage_button_navassa_op).start())
        gui.ex.pushButton_Home_Navassa_Config_Navassa_Init.clicked.connect(lambda: threading.Thread(target=navassa_init.managa_button_navassa_init, args=[self.index_navassa]).start())

    def navassa_config_page(self, index=0):
        try:
            self.index_navassa = index
            gui.ex.home_tab_widget.setCurrentIndex(7)
            gui.ex.tabWidget_Navassa_Config.setCurrentIndex(0)
        except Exception as error:
            logger.write("[navassa_config_page] error: " + str(error), status=False)


class Navassa_Operation:
    def __init__(self):
        gui.ex.frame_12.hide()
        gui.ex.back_button_from_operation_to_config.clicked.connect(lambda: threading.Thread(target=navassa.navassa_config_page()))
        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.textChanged.connect(lambda: threading.Thread(target=self.tx_atten_error).start())
        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.textChanged.connect(lambda: threading.Thread(target=self.Rx_gain_error).start())
        gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_carriar_freq_old_icd.currentIndexChanged.connect(lambda: threading.Thread(target=self.convert_number_old_icd, args=["Carriar Freq"]).start())
        gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_carriar_freq_old_icd.currentIndexChanged.connect(lambda: threading.Thread(target=self.active_old_navassa, args=["Carriar Freq"]).start())
        gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_rx_gain_oldIcd.currentIndexChanged.connect(lambda: threading.Thread(target=self.convert_number_old_icd, args=["Rx Gain Index"]).start())
        gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_rx_gain_oldIcd.currentIndexChanged.connect(lambda: threading.Thread(target=self.active_old_navassa, args=["Rx Gain"]).start())
        gui.ex.pushButton_Navassa_Config_Navassa_Operation_send_navassa_old_icd.clicked.connect(lambda: threading.Thread(target=self.old_msg_navassa).start())
        gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_tx_old_icd.currentIndexChanged.connect(lambda: threading.Thread(target=self.convert_number_old_icd, args=["Tx attenuation"]).start())
        gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_tx_old_icd.currentIndexChanged.connect(lambda: threading.Thread(target=self.active_old_navassa, args=["Tx attenuation"]).start())

        self.prev_Tx_attenuation = []
        self.prev_Tx_attenuation.append(gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_tx_old_icd.currentText())

        self.prev_Rx_Gain = []
        self.prev_Rx_Gain.append(gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_rx_gain_oldIcd.currentText())

        self.prev_Carriar_freq = []
        self.prev_Carriar_freq.append(gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_carriar_freq_old_icd.currentText())

    def manage_button_navassa_op(self):
        try:
            gui.ex.tabWidget_Navassa_Config.setCurrentIndex(1)
        except Exception as error:
            logger.write("[manage_button_navassa_op] error: " + str(error), status=False)

    def Rx_gain_error(self):
        try:
            time.sleep(0.2)
            if gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.text() != "" or gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.text() != "0.":
                element = gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.text()
                if re.match(r'^-?\d+(?:\.\d+)$', element) is None:
                    print("integer number")
                    curr_text = gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.text()
                    if int(curr_text) > 255 or int(curr_text) < 195:
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_error_msg_2.setText("195-255")
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_error_msg_2.setStyleSheet("image: url(: / pictures / pictures / remove.png);")
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setStyleSheet("border-color :  red;")
                    else:
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_error_msg_2.setText("")
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_error_msg_2.setStyleSheet("border - color: rgb(67, 76, 92);")
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_error_msg_2.setStyleSheet("image: url(:/pictures/pictures/select all.png);")
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setStyleSheet("border: 2px solid #6593cf;")
        except Exception as error:
            logger.write("[Rx_gain_error]" + str(error), status=False)

    def tx_atten_error(self):
        try:
            time.sleep(0.2)
            if gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.text() != "" or gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.text() != "0.":
                element = gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.text()
                if re.match(r'^-?\d+(?:\.\d+)$', element) is None:
                    print("integer number")
                    curr_text = gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.text()
                    if int(curr_text) > 41.95 or int(curr_text) < 0:
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_error_msg.setText("Range 0-41.95 with steps of 0.05 ")
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setStyleSheet("border-color :  red;")
                    else:
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_error_msg.setText("")
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setStyleSheet("border: 2px solid #6593cf;")
                else:
                    print("float")
                    curr = float(gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.text())
                    while curr > 0:
                        curr = round(curr - 0.05, 2)
                    if curr > 41.95 or curr < 0.0 or curr < 0:
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_error_msg.setText("Range 0-41.95 with steps of 0.05")
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setStyleSheet("border-color :  red;")
                    else:
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_error_msg.setText("")
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setStyleSheet("border: 2px solid #6593cf;")

        except Exception as error:
            logger.write("[tx_atten_error]" + str(error), status=False)

    def active_old_navassa(self, filter):
        try:
            if filter == "Tx attenuation":
                self.prev_Tx_attenuation.append(gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_tx_old_icd.currentText())

            elif filter == "Rx Gain":
                self.prev_Rx_Gain.append(gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_rx_gain_oldIcd.currentText())

            elif filter == "Carriar Freq":
                self.prev_Carriar_freq.append(gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_carriar_freq_old_icd.currentText())
        except Exception as error:
            logger.write("[active_old_navassa] error: " + str(error), status=False)

    def convert_number_old_icd(self, filter):
        try:
            privType = self.prev_Tx_attenuation[len(self.prev_Tx_attenuation) - 1]
            currType = gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_tx_old_icd.currentText()
            currentNumber = gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.text()

            if filter == "Tx attenuation":

                if currType == "Hex":
                    if privType == "Bin":
                        # bin -> dec -> hex
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setText(str(hex(int(str(currentNumber), 2)))[2:])
                    elif privType == "Oct":
                        # Oct -> dec -> hex
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setText(str(hex(int(str(currentNumber), 8)))[2:])
                    elif privType == "Dec":
                        # Dec -> hex
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setText(str(hex(int(str(currentNumber), 10)))[2:])
                elif currType == "Dec":
                    if privType == "Bin":
                        # bin -> dec
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setText(str(int(str(currentNumber), 2)))
                    elif privType == "Oct":
                        # Oct -> dec
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setText(str(int(str(currentNumber), 8)))
                    elif privType == "Hex":
                        # Hex -> dec
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setText(str(int(str(currentNumber), 16)))

                elif currType == "Bin":
                    if privType == "Dec":
                        # Dec -> Bin
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setText(str(bin(int(currentNumber)))[2:])
                    elif privType == "Oct":
                        # Oct -> DEC -> Bin
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setText(str(bin(int(str(currentNumber), 8)))[2:])
                    elif privType == "Hex":
                        # Hex -> DEC -> Bin
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setText(str(bin(int(str(currentNumber), 16)))[2:])

                elif currType == "Oct":
                    if privType == "Dec":
                        # Dec -> Oct
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setText(str(oct(int(currentNumber)))[2:])
                    elif privType == "Bin":
                        # Bin -> DEC -> Oct
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setText(str(oct(int(str(currentNumber), 2)))[2:])
                    elif privType == "Hex":
                        # Hex -> DEC -> Oct
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.setText(str(oct(int(str(currentNumber), 16)))[2:])

            elif filter == "Rx Gain Index":
                priv_Type_Rx = self.prev_Rx_Gain[len(self.prev_Rx_Gain) - 1]
                curr_type_Rx = gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_rx_gain_oldIcd.currentText()
                currentNumber_Rx = gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.text()

                if curr_type_Rx == "Hex":
                    if priv_Type_Rx == "Bin":
                        # bin -> dec -> hex
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setText(str(hex(int(str(currentNumber_Rx), 2)))[2:])
                    elif priv_Type_Rx == "Oct":
                        # Oct -> dec -> hex
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setText(str(hex(int(str(currentNumber_Rx), 8)))[2:])
                    elif priv_Type_Rx == "Dec":
                        # Dec -> hex
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setText(str(hex(int(str(currentNumber_Rx), 10)))[2:])
                elif curr_type_Rx == "Dec":
                    if priv_Type_Rx == "Bin":
                        # bin -> dec
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setText(str(int(str(currentNumber_Rx), 2)))
                    elif priv_Type_Rx == "Oct":
                        # Oct -> dec
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setText(str(int(str(currentNumber_Rx), 8)))
                    elif priv_Type_Rx == "Hex":
                        # Hex -> dec
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setText(str(int(str(currentNumber_Rx), 16)))

                elif curr_type_Rx == "Bin":
                    if priv_Type_Rx == "Dec":
                        # Dec -> Bin
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setText(str(bin(int(currentNumber_Rx)))[2:])
                    elif priv_Type_Rx == "Oct":
                        # Oct -> DEC -> Bin
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setText(str(bin(int(str(currentNumber_Rx), 8)))[2:])
                    elif priv_Type_Rx == "Hex":
                        # Hex -> DEC -> Bin
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setText(str(bin(int(str(currentNumber_Rx), 16)))[2:])

                elif curr_type_Rx == "Oct":
                    if priv_Type_Rx == "Dec":
                        # Dec -> Oct
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setText(str(oct(int(currentNumber_Rx)))[2:])
                    elif priv_Type_Rx == "Bin":
                        # Bin -> DEC -> Oct
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setText(str(oct(int(str(currentNumber_Rx), 2)))[2:])
                    elif priv_Type_Rx == "Hex":
                        # Hex -> DEC -> Oct
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.setText(str(oct(int(str(currentNumber_Rx), 16)))[2:])

            elif filter == "Carriar Freq":
                priv_type_carriar = self.prev_Carriar_freq[len(self.prev_Carriar_freq) - 1]
                curr_type_carriar = gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_carriar_freq_old_icd.currentText()
                curr_num_carriar = gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.text()

                if curr_type_carriar == "Hex":
                    if priv_type_carriar == "Bin":
                        # bin -> dec -> hex
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.setText(str(hex(int(str(curr_num_carriar), 2)))[2:])
                    elif priv_type_carriar == "Oct":
                        # Oct -> dec -> hex
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.setText(str(hex(int(str(curr_num_carriar), 8)))[2:])
                    elif priv_type_carriar == "Dec":
                        # Dec -> hex
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.setText(str(hex(int(str(curr_num_carriar), 10)))[2:])
                elif curr_type_carriar == "Dec":
                    if priv_type_carriar == "Bin":
                        # bin -> dec
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.setText(str(int(str(curr_num_carriar), 2)))
                    elif priv_type_carriar == "Oct":
                        # Oct -> dec
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.setText(str(int(str(curr_num_carriar), 8)))
                    elif priv_type_carriar == "Hex":
                        # Hex -> dec
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.setText(str(int(str(curr_num_carriar), 16)))

                elif curr_type_carriar == "Bin":
                    if priv_type_carriar == "Dec":
                        # Dec -> Bin
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.setText(str(bin(int(curr_num_carriar)))[2:])
                    elif priv_type_carriar == "Oct":
                        # Oct -> DEC -> Bin
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.setText(str(bin(int(str(curr_num_carriar), 8)))[2:])
                    elif priv_type_carriar == "Hex":
                        # Hex -> DEC -> Bin
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.setText(str(bin(int(str(curr_num_carriar), 16)))[2:])

                elif curr_type_carriar == "Oct":
                    if priv_type_carriar == "Dec":
                        # Dec -> Oct
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.setText(str(oct(int(curr_num_carriar)))[2:])
                    elif priv_type_carriar == "Bin":
                        # Bin -> DEC -> Oct
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.setText(str(oct(int(str(curr_num_carriar), 2)))[2:])
                    elif priv_type_carriar == "Hex":
                        # Hex -> DEC -> Oct
                        gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.setText(str(oct(int(str(curr_num_carriar), 16)))[2:])
        except Exception as error:
            logger.write("[convert_number_old_icd] error: " + str(error), status=False)

    def old_msg_navassa(self):
        try:
            if script_page.sock is None:
                script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()),
                                        ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                        port=int(gui.ex.lineEdit_Configuration_computer_port.text()))
        except Exception as error:
            logger.write("Error Opertion: " + str('{err}'.format(err=error)), status=False)

        try:
            # if (navassa_config.count_navassa_config == 0):
            #     logger.write("Cannot send message , need to send Navassa init first .")

            navassa_operation_old_icd = json.load(open("Files\\Messages\\navassa_operation_old.json", "r"))

            Resource_ID = gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_resourceid.currentText()

            if Resource_ID == "Navassa 1 Tx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0000"
            elif Resource_ID == "Navassa 1 Rx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0001"
            elif Resource_ID == "Navassa 1 Tx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0002"
            elif Resource_ID == "Navassa 1 Rx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0003"
            elif Resource_ID == "Navassa 2 Tx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0004"
            elif Resource_ID == "Navassa 2 Rx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0005"
            elif Resource_ID == "Navassa 2 Tx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0006"
            elif Resource_ID == "Navassa 2 Rx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0007"
            elif Resource_ID == "Navassa 3 Tx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0008"
            elif Resource_ID == "Navassa 3 Rx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0009"
            elif Resource_ID == "Navassa 3 Tx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000A"
            elif Resource_ID == "Navassa 3 Rx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000B"
            elif Resource_ID == "Navassa 4 Tx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000C"
            elif Resource_ID == "Navassa 4 Rx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000D"
            elif Resource_ID == "Navassa 4 Tx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000E"
            elif Resource_ID == "Navassa 4 Rx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000F"

            # carriar freq

            carriar_freq = str(hex(int(gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_carriar_freq.text())))[2:].zfill(8)
            navassa_operation_old_icd["payload"]["Carrier_Freq_Lsb"] = str(carriar_freq[4:8])
            navassa_operation_old_icd["payload"]["Carrier_Freq_Msb"] = str(carriar_freq[:4])

            print(navassa_operation_old_icd)

            # TX attenuation
            if gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.text() == "Range 0-41.95 with steps of 0.05 ":
                logger.write("Tx attenuation Error")
                return
            Tx_attenuation = hex(int(gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_tx_old_icd.text()) * 1000)[2:].zfill(4)
            navassa_operation_old_icd["payload"]["Tx_Attenuation"] = str(Tx_attenuation)

            print(navassa_operation_old_icd)

            # radio channel control - spi

            navassa_operation_old_icd["payload"]["Radio_Channel_Control_Interface"] = "0000"

            print(navassa_operation_old_icd)

            # Rx Gain Index
            if gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_error_msg_2.text() == "195-255":
                logger.write("Error Rx gain index Value")
                return
            rx = hex(int(gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_gain_old_icd.text()))[2:]
            rx_gain = rx.zfill(4)
            navassa_operation_old_icd["payload"]["Rx_Gain_Index"] = str(rx_gain)

            print(navassa_operation_old_icd)

            # Rx NCO Enable
            if gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_rx_nco_enable_old_icd.currentText() == "Enable":
                navassa_operation_old_icd["payload"]["Rx_NCO_Enable"] = "0001"

            elif gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_rx_nco_enable_old_icd.currentText() == "Disable":
                navassa_operation_old_icd["payload"]["Rx_NCO_Enable"] = "0000"

            print(navassa_operation_old_icd)

            # Rx NCO Freq
            rx_nco_freq = hex(int(gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_nco_freq_old_icd.text()))[2:]
            rx_freq = str(rx_nco_freq.zfill(8))
            navassa_operation_old_icd["payload"]["Rx_NCO_Frequency_Lsb"] = rx_freq[4:8]
            navassa_operation_old_icd["payload"]["Rx_NCO_Frequency_Msb"] = rx_freq[:4]

            print(navassa_operation_old_icd)

            # operation

            operation = gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_operation_old_icd.currentText()
            if operation == "Disable":
                navassa_operation_old_icd["payload"]["Operation"] = "0000"
            elif operation == "Enable":
                navassa_operation_old_icd["payload"]["Operation"] = "0001"

            print(navassa_operation_old_icd)
            # non hopping

            Freq_change_mode = gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_freq_mode_old_icd.currentText()
            if Freq_change_mode == "Non Hopping":
                navassa_operation_old_icd["payload"]["Frequency_Change_Mode"] = "0000"
            elif Freq_change_mode == "Hopping":
                navassa_operation_old_icd["payload"]["Frequency_Change_Mode"] = "0001"

            print(navassa_operation_old_icd)

            # with open("Navassa_operation_Defult_msg.json", "w") as fp:
            #     json.dump(navassa_operation_old_icd, fp, indent=2)

            packet = Packet(packet=navassa_operation_old_icd)
            script_page.sock.send(packet=packet.packetBuilded)
            recive_packet = script_page.sock.receive()
            print("@ recive_packet = " + str(recive_packet))
            WriteStream.write(["pushButton_Navassa_Config_Navassa_Operation_send_navassa_old_icd.setChecked", False])
            time.sleep(int(0.1))

            #
            # with open('hhh.json', 'w',indent=2) as to:
            #     json.dump(navassa_operation_old_icd, to)

        except Exception as error:
            logger.write("Error  " + str('{err}'.format(err=error)), status=False)


class Navassa_Init:
    def __init__(self):
        gui.ex.back_button_from_init_to_config.clicked.connect(lambda: threading.Thread(target=navassa.navassa_config_page()))
        gui.ex.rx_gain_rx2_config.textChanged.connect(lambda: threading.Thread(target=self.Rx2_Gain_index_Error).start())
        gui.ex.rx_gain_rx1_config.textChanged.connect(lambda: threading.Thread(target=self.Rx1_Gain_index_Error).start())
        gui.ex.line_edit_tx1_attenuation.textChanged.connect(lambda: threading.Thread(target=self.tx1_line_edit).start())
        gui.ex.line_edit_tx2_attenutio.textChanged.connect(lambda: threading.Thread(target=self.tx2_line_edit).start())
        gui.ex.combo_box_channel_mode.currentIndexChanged.connect(lambda: threading.Thread(target=self.channel_mode_hide_channels).start())
        gui.ex.send_navassa_config_button.clicked.connect(lambda: threading.Thread(target=self.navassa_config_message).start())
        gui.ex.combo_sample_rate_rx1.activated.connect(lambda: threading.Thread(target=self.rx_tx_changes, args=["combo_sample_rate_rx1"]).start())
        gui.ex.combo_sample_rate_rx2.activated.connect(lambda: threading.Thread(target=self.rx_tx_changes, args=["combo_sample_rate_rx2"]).start())
        gui.ex.comboBox_rf_channel_rx1.activated.connect(lambda: threading.Thread(target=self.rx_tx_changes, args=["comboBox_rf_channel_rx1"]).start())
        gui.ex.comboBox_rf_channel_rx2.activated.connect(lambda: threading.Thread(target=self.rx_tx_changes, args=["comboBox_rf_channel_rx2"]).start())
        gui.ex.comboBox_Tx1_sample_rate.activated.connect(lambda: threading.Thread(target=self.rx_tx_changes, args=["comboBox_Tx1_sample_rate"]).start())
        gui.ex.comboBox_Tx2_sample_rate.activated.connect(lambda: threading.Thread(target=self.rx_tx_changes, args=["comboBox_Tx2_sample_rate"]).start())
        gui.ex.rf_channel_tx1.activated.connect(lambda: threading.Thread(target=self.rx_tx_changes, args=["rf_channel_tx1"]).start())
        gui.ex.rf_channel_tx2.activated.connect(lambda: threading.Thread(target=self.rx_tx_changes, args=["rf_channel_tx2"]).start())

        self.count_navassa_config = 0

    def managa_button_navassa_init(self, navassa_index):
        try:
            gui.ex.tabWidget_Navassa_Config.setCurrentIndex(2)
            gui.ex.comboBox_Navassa_number.setCurrentIndex(navassa_index)
        except Exception as error:
            logger.write("[managa_button_navassa_init] error: " + str(error), status=False)

    def Rx2_Gain_index_Error(self):
        try:
            time.sleep(0.2)
            if gui.ex.rx_gain_rx2_config.text() != "" or gui.ex.rx_gain_rx2_config.text() != "0.":
                element = gui.ex.rx_gain_rx2_config.text()
                if re.match(r'^-?\d+(?:\.\d+)$', element) is None:
                    print("integer number")
                    curr_text = gui.ex.rx_gain_rx2_config.text()
                    if int(curr_text) > 255 or int(curr_text) < 195:
                        gui.ex.label_138.setText("195-255")
                        gui.ex.label_138.setStyleSheet("image: url(: / pictures / pictures / remove.png);")
                        gui.ex.rx_gain_rx2_config.setStyleSheet("border-color :  red;")
                    else:
                        gui.ex.label_138.setText("")
                        gui.ex.label_138.setStyleSheet("border - color: rgb(67, 76, 92);")
                        gui.ex.label_138.setStyleSheet("image: url(:/pictures/pictures/select all.png);")
                        gui.ex.rx_gain_rx2_config.setStyleSheet("border: 2px solid #6593cf;")
        except Exception as error:
            logger.write("[Rx2_Gain_index_Error]" + str(error), status=False)

    def Rx1_Gain_index_Error(self):
        try:
            time.sleep(0.2)
            if gui.ex.rx_gain_rx1_config.text() != "" or gui.ex.rx_gain_rx1_config.text() != "0.":
                element = gui.ex.rx_gain_rx1_config.text()
                if re.match(r'^-?\d+(?:\.\d+)$', element) is None:
                    print("integer number")
                    curr_text = gui.ex.rx_gain_rx1_config.text()
                    if int(curr_text) > 255 or int(curr_text) < 195:
                        gui.ex.label_137.setText(" 195-255")
                        gui.ex.label_137.setStyleSheet("image: url(: / pictures / pictures / remove.png);")
                        gui.ex.rx_gain_rx1_config.setStyleSheet("border-color :  red;")
                    else:
                        gui.ex.label_137.setText("")
                        gui.ex.label_137.setStyleSheet("image: url(:/pictures/pictures/select all.png);")
                        gui.ex.rx_gain_rx1_config.setStyleSheet("border: 2px solid #6593cf;")
        except Exception as error:
            logger.write("[Rx1_Gain_index_Error]" + str(error), status=False)

    def tx2_line_edit(self):
        try:
            time.sleep(0.2)
            if gui.ex.line_edit_tx2_attenutio.text() != "" or gui.ex.line_edit_tx2_attenutio.text() != "0.":
                element = gui.ex.line_edit_tx2_attenutio.text()
                if re.match(r'^-?\d+(?:\.\d+)$', element) is None:
                    print("integer number")
                    curr_text = gui.ex.line_edit_tx2_attenutio.text()
                    if int(curr_text) > 41.95 or int(curr_text) < 0:
                        gui.ex.Tx2_error.setText("Range is :0-41.95,Steps:0.05")
                        gui.ex.line_edit_tx2_attenutio.setStyleSheet("border-color :  red;")
                    else:
                        gui.ex.Tx2_error.setText("")
                        gui.ex.line_edit_tx2_attenutio.setStyleSheet("border: 2px solid #6593cf;")
                else:
                    print("float")
                    curr = float(gui.ex.line_edit_tx2_attenutio.text())
                    while curr > 0:
                        curr = round(curr - 0.05, 2)
                    if curr > 41.95 or curr < 0.0 or curr < 0:
                        gui.ex.Tx2_error.setText("Range is :0-41.95,Steps:0.05")
                        gui.ex.line_edit_tx2_attenutio.setStyleSheet("border-color :  red;")
                    else:
                        gui.ex.Tx2_error.setText("")
                        gui.ex.line_edit_tx2_attenutio.setStyleSheet("border: 2px solid #6593cf;")

        except Exception as error:
            logger.write("[tx2_line_edit]" + str(error), status=False)

    def tx1_line_edit(self):
        try:
            time.sleep(0.2)
            if gui.ex.line_edit_tx1_attenuation.text() != "" or gui.ex.line_edit_tx1_attenuation.text() != "0.":
                element = gui.ex.line_edit_tx1_attenuation.text()
                if re.match(r'^-?\d+(?:\.\d+)$', element) is None:
                    print("integer number")
                    curr_text = gui.ex.line_edit_tx1_attenuation.text()
                    if int(curr_text) > 41.95 or int(curr_text) < 0:
                        gui.ex.tx1_error.setText("Range is :0-41.95,Steps:0.05")
                        gui.ex.line_edit_tx1_attenuation.setStyleSheet("border-color :  red;")
                    else:
                        gui.ex.tx1_error.setText("")
                        gui.ex.line_edit_tx1_attenuation.setStyleSheet("border: 2px solid #6593cf;")
                else:
                    print("float")
                    curr = float(gui.ex.line_edit_tx1_attenuation.text())
                    while curr > 0:
                        curr = round(curr - 0.05, 2)
                    if curr > 41.95 or curr < 0.0 or curr < 0:
                        gui.ex.tx1_error.setText(" Range is :0-41.95,Steps:0.05")
                        gui.ex.line_edit_tx1_attenuation.setStyleSheet("border-color :  red;")
                    else:
                        gui.ex.tx1_error.setText("")
                        gui.ex.line_edit_tx1_attenuation.setStyleSheet("border: 2px solid #6593cf;")

        except Exception as error:
            logger.write("[tx1_line_edit]" + str(error), status=False)

    def channel_mode_hide_channels(self):
        try:
            curr_index = gui.ex.combo_box_channel_mode.currentIndex()
            if curr_index == 0:
                gui.ex.Navassa_Init_RX2_frame.setHidden(False)
                gui.ex.Navassa_Init_RX2_frame.setGeometry(QtCore.QRect(300, 310, 281, 361))
                gui.ex.Navassa_Init_TX2_frame.setHidden(False)
                gui.ex.Navassa_Init_TX2_frame.setGeometry(QtCore.QRect(900, 310, 281, 361))
                gui.ex.Navassa_Init_RX1_frame.setHidden(False)
                gui.ex.Navassa_Init_RX1_frame.setGeometry(QtCore.QRect(0, 310, 281, 361))
                gui.ex.Navassa_Init_TX1_frame.setHidden(False)
                gui.ex.Navassa_Init_TX1_frame.setGeometry(QtCore.QRect(600, 310, 281, 361))
            elif curr_index == 1:
                gui.ex.Navassa_Init_RX2_frame.setHidden(True)
                gui.ex.Navassa_Init_TX2_frame.setHidden(True)
                gui.ex.Navassa_Init_RX1_frame.setHidden(False)
                gui.ex.Navassa_Init_TX1_frame.setHidden(False)
                gui.ex.Navassa_Init_RX1_frame.setGeometry(QtCore.QRect(300, 310, 281, 361))
            elif curr_index == 2:
                gui.ex.Navassa_Init_RX1_frame.setHidden(True)
                gui.ex.Navassa_Init_TX1_frame.setHidden(True)
                gui.ex.Navassa_Init_RX2_frame.setHidden(False)
                gui.ex.Navassa_Init_TX2_frame.setHidden(False)
                gui.ex.Navassa_Init_TX2_frame.setGeometry(QtCore.QRect(600, 310, 281, 361))
        except Exception as error:
            logger.write("[channel_mode_hide_channels] error: " + str(error), status=False)

    def rx_tx_changes(self, combo):
        try:
            curr_index = eval("gui.ex." + str(combo) + ".currentIndex()")
            gui.ex.combo_sample_rate_rx1.setCurrentIndex(curr_index)
            gui.ex.combo_sample_rate_rx2.setCurrentIndex(curr_index)
            gui.ex.comboBox_rf_channel_rx1.setCurrentIndex(curr_index)
            gui.ex.comboBox_rf_channel_rx2.setCurrentIndex(curr_index)
            gui.ex.comboBox_Tx1_sample_rate.setCurrentIndex(curr_index)
            gui.ex.comboBox_Tx2_sample_rate.setCurrentIndex(curr_index)
            gui.ex.rf_channel_tx1.setCurrentIndex(curr_index)
            gui.ex.rf_channel_tx2.setCurrentIndex(curr_index)
        except Exception as error:
            logger.write("[rx_tx_changes] error: " + str(error), status=False)

    def navassa_config_message(self):

        try:
            if script_page.sock is None:
                script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()),
                                        ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                        port=int(gui.ex.lineEdit_Configuration_computer_port.text()))
        except Exception as error:
            logger.write("Error Socket navassa config: " + str('{err}'.format(err=error)), status=False)

        try:
            self.count_navassa_config += 1

            navassa_config = json.load(open("Files\\Messages\\navassa_config.json", "r"))

            # navassa sel

            navassa = gui.ex.comboBox_Navassa_number.currentText()

            if navassa == "Navassa 1":
                navassa_config["payload"]["NAVASSA_Sel"] = "0000"
            elif navassa == "Navassa 2":
                navassa_config["payload"]["NAVASSA_Sel"] = "0001"

            # duplex mode

            duplex_mode = gui.ex.combo_duplex_mode.currentText()
            if duplex_mode == "TDD":
                navassa_config["payload"]["Duplex_Mode"] = "0000"
            elif duplex_mode == "FDD":
                navassa_config["payload"]["Duplex_Mode"] = "0001"

            # rx sample rate

            rx_sample_rate = hex(int(float(gui.ex.combo_sample_rate_rx1.currentText()) * 1000000))[2:].zfill(8)
            if gui.ex.combo_sample_rate_rx1.currentText() == "16" or gui.ex.combo_sample_rate_rx1.currentText() == "61.44":
                navassa_config["payload"]["Rx_Sample_Rate_Lsb"] = str(rx_sample_rate[4:8])
                navassa_config["payload"]["Rx_Sample_Rate_Msb"] = str(rx_sample_rate[:4])

            # tx sample rate

            tx_sample_rate = hex(int(float(gui.ex.comboBox_Tx1_sample_rate.currentText()) * 1000000))[2:].zfill(8)
            if gui.ex.comboBox_Tx1_sample_rate.currentText() == "32" or gui.ex.comboBox_Tx1_sample_rate.currentText() == "61.44":
                navassa_config["payload"]["Tx_Sample_Rate_Lsb"] = str(tx_sample_rate[4:8])
                navassa_config["payload"]["Tx_Sample_Rate_Msb"] = str(tx_sample_rate[:4])

            # tx nco freq is 0 in the json file

            # RF BW
            rf_bw = hex(int(float(gui.ex.comboBox_rf_channel_rx1.currentText()) * 1000000))[2:].zfill(8)
            rf_channel_rx1 = gui.ex.comboBox_rf_channel_rx1.currentText()
            if rf_channel_rx1 == "9.375" or rf_channel_rx1 == "40":
                navassa_config["payload"]["RF_BW_Lsb"] = str(rf_bw[4:8])
                navassa_config["payload"]["RF_BW_Msb"] = str(rf_bw[:4])

            # SSI TYPE

            ssi_type = gui.ex.comboBox_SSI_type.currentText()
            if ssi_type == "Disable":
                navassa_config["payload"]["SSI_Type"] = "0000"
            elif ssi_type == "LVDS":
                navassa_config["payload"]["SSI_Type"] = "0002"
            elif ssi_type == "CMOS":
                navassa_config["payload"]["SSI_Type"] = "0001"

            # SSI DATA format

            navassa_config["payload"]["SSI_Data_Format"] = "0004"

            # channel mode

            channel_mode = gui.ex.combo_box_channel_mode.currentText()
            if channel_mode == "Both":
                navassa_config["payload"]["Channel_Mode"] = "0003"

            elif channel_mode == "Channel 1":
                navassa_config["payload"]["Channel_Mode"] = "0000"

            elif channel_mode == "Channel 2":
                navassa_config["payload"]["Channel_Mode"] = "0001"

            # clock freq

            clock_freq = hex(int(float(gui.ex.lineEdit_clock_freq.text()) * 1000))[2:].zfill(8)
            navassa_config["payload"]["Clock_Frequency_Lsb"] = str(clock_freq[4:8])
            navassa_config["payload"]["Clock_Frequency_Msb"] = str(clock_freq[:4])

            # PLL Performance level

            pll = gui.ex.comboBox_pll.currentText()
            if pll == "Low":
                navassa_config["payload"]["PLL_performance_Level"] = "0000"
            elif pll == "Medium":
                navassa_config["payload"]["PLL_performance_Level"] = "0001"
            elif pll == "High":
                navassa_config["payload"]["PLL_performance_Level"] = "0002"

            # power consumption

            power_consumption = gui.ex.comboBox_power_consum.currentText()
            if power_consumption == "Low power":
                navassa_config["payload"]["Power_Consumption"] = "0000"
            elif power_consumption == "Medium power":
                navassa_config["payload"]["Power_Consumption"] = "0001"
            elif power_consumption == "High power":
                navassa_config["payload"]["Power_Consumption"] = "0002"

            # Lo Optimization
            lo_opti = gui.ex.comboBox_lo_opti.currentText()
            if lo_opti == "Phase Noise":
                navassa_config["payload"]["Lo_Optimization"] = "0000"
            elif lo_opti == "Power consumption":
                navassa_config["payload"]["Lo_Optimization"] = "0001"

            # Lo1 freq

            lo1_freq = hex(int(gui.ex.lo1_freq_navassa_config.text()) * 1000000)[2:].zfill(16)
            navassa_config["payload"]["Lo1_Frequency_Lsb_0"] = str(lo1_freq[12:16])
            navassa_config["payload"]["Lo1_Frequency_Lsb_1"] = str(lo1_freq[8:12])
            navassa_config["payload"]["Lo1_Frequency_Msb_0"] = str(lo1_freq[4:8])
            navassa_config["payload"]["Lo1_Frequency_Msb_1"] = str(lo1_freq[:4])

            # Lo2 freq

            lo2_freq = hex(int(gui.ex.lo2_freq_navassa_config.text()) * 1000000)[2:].zfill(16)
            navassa_config["payload"]["Lo2_Frequency_Lsb_0"] = str(lo2_freq[12:16])
            navassa_config["payload"]["Lo2_Frequency_Lsb_1"] = str(lo2_freq[8:12])
            navassa_config["payload"]["Lo2_Frequency_Msb_0"] = str(lo2_freq[4:8])
            navassa_config["payload"]["Lo2_Frequency_Msb_1"] = str(lo2_freq[:4])

            # Channel  1 Radio control Interface -PIN
            navassa_config["payload"]["Channel_1_Radio_control_Interface"] = "0000"

            # Channel  1 Tx Atten control Interface -SPI
            navassa_config["payload"]["Channel_1_Tx_Atten_control_Interface"] = "0000"

            # Channel  1 Rx Gain control Interface-SPI
            navassa_config["payload"]["Channel_1_Rx_Gain_control_Interface"] = "0000"

            # Channel  2 Radio control Interface-PIN
            navassa_config["payload"]["Channel_2_Radio_control_Interface"] = "0000"

            # Channel  2 Tx Atten control Interface-SPI
            navassa_config["payload"]["Channel_2_Tx_Atten_control_Interface"] = "0000"

            # Channel  2 Rx Gain control Interface -SPI
            navassa_config["payload"]["Channel_2_Rx_Gain_control_Interface"] = "0000"

            # system init cal mosk -
            system_init = hex(int(gui.ex.line_edit_system_init_call.text()))[2:].zfill(8)
            navassa_config["payload"]["System_Init_Cal_Mosk_Lsb"] = str(system_init[4:8])
            navassa_config["payload"]["System_Init_Cal_Mosk_Msb"] = str(system_init[:4])

            # init cal mode
            init_cal_mode = gui.ex.comboBox_init_cal_mode.currentText()
            if init_cal_mode == "Mode All":
                navassa_config["payload"]["Init_Cal_Mode"] = "0000"
            elif init_cal_mode == "System And Rx":
                navassa_config["payload"]["Init_Cal_Mode"] = "0001"
            elif init_cal_mode == "LoopBack And Tx":
                navassa_config["payload"]["Init_Cal_Mode"] = "0002"
            elif init_cal_mode == "ELB Only":
                navassa_config["payload"]["Init_Cal_Mode"] = "0003"

            # rx 1 gain index
            if gui.ex.label_137.text() == " 195-255":
                logger.write("Error Rx1 gain index")
                WriteStream.write(["send_navassa_config_button.setChecked", False])
                return
            rx1_gain_index = hex(int(gui.ex.rx_gain_rx1_config.text()))[2:]
            rx_gain_indexx = rx1_gain_index.zfill(4)
            navassa_config["payload"]["Rx_1_Gain_Index"] = str(rx_gain_indexx)

            # Rx 1 RF Input Pin

            rx_1_rf_input_pin = gui.ex.comboBox_Rf_input_rx1.currentText()
            if rx_1_rf_input_pin == "A":
                navassa_config["payload"]["Rx_1_RF_Input_Pin"] = "0000"
            elif rx_1_rf_input_pin == "B":
                navassa_config["payload"]["Rx_1_RF_Input_Pin"] = "0001"

            # Rx 1 Lo Select - right now only one mode- mode 1:
            navassa_config["payload"]["Rx_1_Lo_Select"] = "0001"

            # rx 1 nco enable - always disable
            navassa_config["payload"]["Rx_1_NCO_Enable"] = "0000"

            #  rx 1 nco freq :
            navassa_config["payload"]["Rx_1_NCO_Frequency_Lsb"] = "0000"
            navassa_config["payload"]["Rx_1_NCO_Frequency_Msb"] = "0000"

            # rx 1 sample freq :
            navassa_config["payload"]["Rx_1_NCO_Sample_Frequency_Lsb"] = "0000"
            navassa_config["payload"]["Rx_1_NCO_Sample_Frequency_Lsb"] = "0000"

            # rx 1 nco phase
            navassa_config["payload"]["Rx_1_NCO_Phase"] = "0000"

            # rx 1 Rx_1_NCO_Real_Out"
            navassa_config["payload"]["Rx_1_NCO_Real_Out"] = "0000"

            # rx 1 AGC Mode
            rx1_agc_mode = gui.ex.comboBox_rx1_agc_mode.currentText()
            if rx1_agc_mode == "Auto":
                navassa_config["payload"]["Rx_1_AGC_Mode"] = "0000"
            elif rx1_agc_mode == "Manual":
                navassa_config["payload"]["Rx_1_AGC_Mode"] = "0001"

            # Rx_1_FIR_Select

            rx1_FIR_select = gui.ex.combo_fir_select_rx1.currentText()
            if rx1_FIR_select == "Default":
                navassa_config["payload"]["Rx_1_FIR_Select"] = "0000"
            elif rx1_FIR_select == "Enable":
                navassa_config["payload"]["Rx_1_FIR_Select"] = "0001"

            # Rx 1 BBDC Rejection Status
            rx_1_BBDC = gui.ex.comboBox_rx1_BBDC_rj.currentText()
            if rx_1_BBDC == "Disabled":
                navassa_config["payload"]["Rx_1_BBDC_Rejection_Status"] = "0000"
            elif rx_1_BBDC == "Enabled":
                navassa_config["payload"]["Rx_1_BBDC_Rejection_Status"] = "0001"

            # Rx_1_SSI_Test_Data_Type

            rx1_SSI_test_data_type = gui.ex.comboBox_Rx1_ssi_test_data_type.currentText()
            if rx1_SSI_test_data_type == "Normal Data":
                navassa_config["payload"]["Rx_1_SSI_Test_Data_Type"] = "0000"
            elif rx1_SSI_test_data_type == "Fixed Pattern":
                navassa_config["payload"]["Rx_1_SSI_Test_Data_Type"] = "0001"
            elif rx1_SSI_test_data_type == "Ramp Nibble":
                navassa_config["payload"]["Rx_1_SSI_Test_Data_Type"] = "0002"
            elif rx1_SSI_test_data_type == "Ramp 16 bit":
                navassa_config["payload"]["Rx_1_SSI_Test_Data_Type"] = "0003"
            elif rx1_SSI_test_data_type == "PRB 15":
                navassa_config["payload"]["Rx_1_SSI_Test_Data_Type"] = "0004"
            elif rx1_SSI_test_data_type == "PRB 7":
                navassa_config["payload"]["Rx_1_SSI_Test_Data_Type"] = "0005"

            # rx1 ssi test fix pattern - all zero like in json file

            # rx1 ssi power down
            rx1_ssi_power_down = gui.ex.comboBox_rx1_ssi_power_down.currentText()
            if rx1_ssi_power_down == "Power Down Disable":
                navassa_config["payload"]["Rx_1_SSI_power_down"] = "0000"
            elif rx1_ssi_power_down == "Power Down Medium":
                navassa_config["payload"]["Rx_1_SSI_power_down"] = "0001"
            elif rx1_ssi_power_down == "Power Down High":
                navassa_config["payload"]["Rx_1_SSI_power_down"] = "0002"

            # rx 1 chan init cal mask

            rx1_chan_init_cal_mask = gui.ex.lineEdit_channel_init_cal_mask.text().zfill(8)
            navassa_config["payload"]["Rx_1_Chan_Init_Cal_Mask_Lsb"] = str(rx1_chan_init_cal_mask[4:8])
            navassa_config["payload"]["Rx_1_Chan_Init_Cal_Mask_Msb"] = str(rx1_chan_init_cal_mask[:4])

            # rx1 chan tracking cal mask

            rx1_chan_tracking_cal_mask = gui.ex.lineEdit_rx1_tx1_tracking_call_mask.text().zfill(8)
            navassa_config["payload"]["Rx_1_Chan_Tracking_Cal_Mask_Lsb"] = str(rx1_chan_tracking_cal_mask[4:8])
            navassa_config["payload"]["Rx_1_Chan_Tracking_Cal_Mask_Msb"] = str(rx1_chan_tracking_cal_mask[:4])

            # rx 2 gain index
            if gui.ex.label_138.text() == "195-255":
                logger.write("Erroe Rx2 Gain index")
                WriteStream.write(["send_navassa_config_button.setChecked", False])
                return
            rx2_gain_index = hex(int(gui.ex.rx_gain_rx2_config.text()))[2:].zfill(4)
            navassa_config["payload"]["Rx_2_Gain_Index"] = rx2_gain_index

            # rx2 rf input Pin
            rx2_rf_input_pin = gui.ex.comboBox_Rf_input_rx2.currentText()
            if rx2_rf_input_pin == "A":
                navassa_config["payload"]["Rx_2_RF_Input_Pin"] = "0000"
            elif rx2_rf_input_pin == "B":
                navassa_config["payload"]["Rx_2_RF_Input_Pin"] = "0001"

            # rx 2 Lo select right now only one mode- mode 1:
            navassa_config["payload"]["Rx_2_Lo_Select"] = "0001"

            # rx2 NCO Enable - always disable -zero like in json file
            # rx 2 nco sample freq - always zero like in json
            # rx 2 nco phase - always zero like in json file
            # rx 2 nco real out - always zero like in json file

            # rx2 agc mode

            rx2_agc_mode = gui.ex.comboBox_agc_mode_rx2.currentText()
            if rx2_agc_mode == "Auto":
                navassa_config["payload"]["Rx_2_AGC_Mode"] = "0000"
            elif rx2_agc_mode == "Manual":
                navassa_config["payload"]["Rx_2_AGC_Mode"] = "0001"

            # rx 2 fir select

            rx2_fir_select = gui.ex.comboBox_Rx2_fir_select.currentText()
            if rx2_fir_select == "Default":
                navassa_config["payload"]["Rx_2_FIR_Select"] = "0000"
            elif rx2_fir_select == "Enable":
                navassa_config["payload"]["Rx_2_FIR_Select"] = "0001"

            # rx2 ssi test data type

            rx2_ssi_test_data_type = gui.ex.comboBox_rx2_test_data_type.currentText()
            if rx2_ssi_test_data_type == "Normal Data":
                navassa_config["payload"]["Rx_2_SSI_Test_Data_Type"] = "0000"
            elif rx2_ssi_test_data_type == "Fixed Pattern":
                navassa_config["payload"]["Rx_2_SSI_Test_Data_Type"] = "0001"
            elif rx2_ssi_test_data_type == "Ramp Nibble":
                navassa_config["payload"]["Rx_2_SSI_Test_Data_Type"] = "0002"
            elif rx2_ssi_test_data_type == "Ramp 16 bit":
                navassa_config["payload"]["Rx_2_SSI_Test_Data_Type"] = "0003"
            elif rx2_ssi_test_data_type == "PRB 15":
                navassa_config["payload"]["Rx_2_SSI_Test_Data_Type"] = "0004"
            elif rx2_ssi_test_data_type == "PRB 7":
                navassa_config["payload"]["Rx_2_SSI_Test_Data_Type"] = "0005"

            # rx2 ssi test fix pattern - all zero like in json file

            # rx2 ssi power down
            rx2_ssi_power_down = gui.ex.comboBox_rx2_ssi_power_down.currentText()
            if rx2_ssi_power_down == "Power Down Disable":
                navassa_config["payload"]["Rx_2_SSI_power_down"] = "0000"
            elif rx2_ssi_power_down == "Power Down Medium":
                navassa_config["payload"]["Rx_2_SSI_power_down"] = "0001"
            elif rx2_ssi_power_down == "Power Down High":
                navassa_config["payload"]["Rx_2_SSI_power_down"] = "0002"

            # rx2 chan init cal mask

            rx2_chan_init_cal_mask = gui.ex.lineEdit_channel_init_cal_mask.text().zfill(8)
            navassa_config["payload"]["Rx_2_Chan_Init_Cal_Mask_Lsb"] = str(rx2_chan_init_cal_mask[4:8])
            navassa_config["payload"]["Rx_2_Chan_Init_Cal_Mask_Msb"] = str(rx2_chan_init_cal_mask[:4])

            # rx2 chan tracking cal mask
            rx2_chan_tracking_cal_mask = gui.ex.lineEdit_rx1_tx1_tracking_call_mask.text().zfill(8)
            navassa_config["payload"]["Rx_2_Chan_Tracking_Cal_Mask_Lsb"] = str(rx2_chan_tracking_cal_mask[4:8])
            navassa_config["payload"]["Rx_2_Chan_Tracking_Cal_Mask_Msb"] = str(rx2_chan_tracking_cal_mask[:4])

            # rx2 BBDC Rejection status

            rx2_BBDC_rejection_status = gui.ex.comboBox_rx2_bbdc_rejection_status.currentText()
            if rx2_BBDC_rejection_status == "Disabled":
                navassa_config["payload"]["Rx_2_BBDC_Rejection_Status"] = "0000"
            elif rx2_BBDC_rejection_status == "Enabled":
                navassa_config["payload"]["Rx_2_BBDC_Rejection_Status"] = "0001"

            #  Tx 1 NCO Enable - its Transmit Data Source:  FPGA is Disabled , Internal NCO - Enabled

            tx1_nco_enable = gui.ex.comboBox_Transmit_data_source.currentText()
            if tx1_nco_enable == "FPGA":
                navassa_config["payload"]["Tx_1_NCO_Enable"] = "0000"
                # gui.ex.frame_testTone_TX1.setHidden(True)
            elif tx1_nco_enable == "Internal NCO":
                navassa_config["payload"]["Tx_1_NCO_Enable"] = "0001"
                # gui.ex.frame_testTone_TX1.setHidden(False)

            # Tx_1_NCO_Amplitude - always zero - like in json file

            # tx1 nco  - needed to be always 0 :
            navassa_config["payload"]["Tx_1_NCO_Frequency_Lsb"] = "03e8"
            navassa_config["payload"]["Tx_1_NCO_Frequency_Msb"] = "0000"

            # tx1 attenuation
            if gui.ex.tx1_error.text() == "Range is :0-41.95,Steps:0.05":
                logger.write("Error Tx1 Attenuation")
                WriteStream.write(["send_navassa_config_button.setChecked", False])
                return
            t = hex(int(gui.ex.line_edit_tx1_attenuation.text() * 1000))[2:].zfill(4)
            navassa_config["payload"]["Tx_1_Attenuation"] = str(t)

            # tx1 Lo select - we now on mode 1 - only LO1
            navassa_config["payload"]["Tx_1_Lo_Select"] = "0001"

            # tx 1 power boost
            tx1_power_boost = gui.ex.comboBox_power_boost_tx1.currentText()
            if tx1_power_boost == "Disable":
                navassa_config["payload"]["Tx_1_NCO_Frequency_Msb"] = "0000"
            elif tx1_power_boost == "Enable":
                navassa_config["payload"]["Tx_1_NCO_Frequency_Msb"] = "0001"

            # tx 1 ssi power down
            tx1_ssi_power_down = gui.ex.comboBox_ssi_power_down_tx1.currentText()
            if tx1_ssi_power_down == "Power Down Disable":
                navassa_config["payload"]["Tx_1_SSI_power_down"] = "0000"
            elif tx1_ssi_power_down == "Power Down Medium":
                navassa_config["payload"]["Tx_1_SSI_power_down"] = "0001"
            elif tx1_ssi_power_down == "Power Down High":
                navassa_config["payload"]["Tx_1_SSI_power_down"] = "0002"

            # tx2 nco enable
            if tx1_nco_enable == "FPGA":
                navassa_config["payload"]["Tx_2_NCO_Enable"] = "0000"
                # gui.ex.frame_testTone_TX2.setHidden(True)
            elif tx1_nco_enable == "Internal NCO":
                navassa_config["payload"]["Tx_2_NCO_Enable"] = "0001"
                # gui.ex.frame_testTone_TX2.setHidden(False)

            # tx 2 nco amplitude - always zero

            # tx2 nco  - needed to be always 1000 / 3e8 :
            navassa_config["payload"]["Tx_2_NCO_Frequency_Lsb"] = "03e8"
            navassa_config["payload"]["Tx_2_NCO_Frequency_Msb"] = "0000"

            # tx2 attenuation
            if gui.ex.Tx2_error.text() == "Range is :0-41.95,Steps:0.05":
                logger.write("Error Tx2 Attenuation")
                WriteStream.write(["send_navassa_config_button.setChecked", False])
                return
            t2 = hex(int(gui.ex.line_edit_tx2_attenutio.text() * 1000))[2:].zfill(4)
            navassa_config["payload"]["Tx_2_Attenuation"] = str(t2)

            # tx2 Lo select - we now on mode 1 - only LO2
            navassa_config["payload"]["Tx_2_Lo_Select"] = "0001"

            # tx 2 power boost
            tx2_power_boost = gui.ex.comboBox_powerboost_tx2.currentText()
            if tx2_power_boost == "Disable":
                navassa_config["payload"]["Tx_2_Power_Boost"] = "0000"
            elif tx2_power_boost == "Enable":
                navassa_config["payload"]["Tx_2_Power_Boost"] = "0001"

            # tx2 ssi power down

            tx2_ssi_power_down = gui.ex.comboBox_tx2_ssi_power_down.currentText()
            if tx2_ssi_power_down == "Power Down Disable":
                navassa_config["payload"]["Tx_2_SSI_power_down"] = "0000"
            elif tx2_ssi_power_down == "Power Down Medium":
                navassa_config["payload"]["Tx_2_SSI_power_down"] = "0001"
            elif tx2_ssi_power_down == "Power Down High":
                navassa_config["payload"]["Tx_2_SSI_power_down"] = "0002"

            # freq change mode - always 0 because rev b
            navassa_config["payload"]["Frequency_Change_Mode"] = "0000"

            # Frequency_Hopping_Mode - always 3 matan said
            navassa_config["payload"]["Frequency_Hopping_Mode"] = "0002"

            # Hop Signal Channel Mask - always zero matan said

            # Hop_Signal_GPIO_Config_PIN - need to be always 0005 matan said

            # Frequency_Table_Index_Control - always zero like in json file

            # gain setup by pin - always zero

            # Hop_Table_Switch_GPIO_Config_PIN -  always zero

            # with open("Navassa_config_Defult_msg.json", "w") as fp:
            #     json.dump(navassa_config, fp, indent=2)

            packet = Packet(packet=navassa_config)
            script_page.sock.send(packet=packet.packetBuilded)
            packetRecive_navassa_config = script_page.sock.receive()
            print("@ packetRecive_navassa_config = " + str(packetRecive_navassa_config))

            time.sleep(int(0.1))
            WriteStream.write(["send_navassa_config_button.setChecked", False])

        except Exception as error:
            logger.write("Error navassa config message: " + str('{err}'.format(err=error)), status=False)


class Configurations_Page:
    def __init__(self):
        gui.ex.pushButton_Configuration_save.clicked.connect(lambda: threading.Thread(target=self.save_config()))
        gui.ex.pushButton_Configuration_PS_ShutDown.clicked.connect(lambda: threading.Thread(target=self.shutdown_power_supply()).start())
        gui.ex.pushButton_Configuration_PS_Reset.clicked.connect(lambda: threading.Thread(target=self.reset_power_supply()).start())
        self.Computer_IP = ""
        self.Device_IP = ""
        self.Port = ""
        self.Spectrome_IP = ""
        self.Power_Supply_IP = ""
        self.Power_Supply_Port = ""

        config_file = json.load(open("Config\\config.json", "r"))
        try:
            self.offset_200000000 = float(config_file["Config"]["offset_200000000"])
            self.offset_330000000 = float(config_file["Config"]["offset_330000000"])
            self.offset_500000000 = float(config_file["Config"]["offset_500000000"])
            self.offset_1400000000 = float(config_file["Config"]["offset_1400000000"])
            self.offset_1500000000 = float(config_file["Config"]["offset_1500000000"])
            self.offset_1600000000 = float(config_file["Config"]["offset_1600000000"])
            self.offset_1800000000 = float(config_file["Config"]["offset_1800000000"])
            self.offset_2000000000 = float(config_file["Config"]["offset_2000000000"])
            self.offset_2700000000 = float(config_file["Config"]["offset_2700000000"])
            self.Computer_IP = config_file["Config"]["Computer_IP"]
            self.Device_IP = config_file["Config"]["Device_IP"]
            self.Port = config_file["Config"]["Port"]
            self.Spectrome_IP = config_file["Config"]["Spectrome_Ip"]
            self.Power_Supply_IP = config_file["Config"]["Power_Supply_IP"]
            self.Power_Supply_Port = config_file["Config"]["Power_Supply_Port"]
            self.Signal_Generator = config_file["Config"]["SignalGenerator"]
            self.SPI_Port = config_file["Config"]["SPI_Port"]
            self.SPI_Clock = config_file["Config"]["SPI_Clock"]
            self.SPI_Active = config_file["Config"]["SPI_Active"]
            self.SPI_Lead = config_file["Config"]["SPI_Lead"]
            self.SPI_SSO = config_file["Config"]["SPI_SSO"]
            self.Full_Screen = config_file["Config"]["Full_Screen"]

            self.numOfRowOnTable = 0

            threading.Thread(target=self.GetInit).start()

        except Exception as error:
            logger.write("[Configurations_Page_Init]" + str(error), status=False)

    def reset_power_supply(self):
        try:
            # subprocess.call(["convert img.bat"])
            logger.write("Power supply is on")
        except Exception as error:
            logger.write("[reset_power_supply] error: " + str(error), status=False)

    def shutdown_power_supply(self):
        try:
            # subprocess.call(["convert img.bat"])
            logger.write("Power supply is off")
        except Exception as error:
            logger.write("[shutdown_power_supply] error: " + str(error), status=False)

    def save_config(self):
        try:
            config_file = {
                "Config": {
                    "Computer_IP": gui.ex.lineEdit_Configuration_computer_ip.text(),
                    "Device_IP": gui.ex.lineEdit_Configuration_device_ip.text(),
                    "Port": gui.ex.lineEdit_Configuration_computer_port.text(),
                    "SignalGenerator": gui.ex.lineEdit_Configuration_signal_generator_ip.text(),
                    "Spectrome_Ip": gui.ex.lineEdit_Configuration_spectrum_ip.text(),
                    "Power_Supply_IP": gui.ex.lineEdit_Configuration_power_supply_ip.text(),
                    "Power_Supply_Port": gui.ex.lineEdit_Configuration_power_supply_port.text(),
                    "offset_200000000": gui.ex.lineEdit_Configuration_offset_200000000.text(),
                    "offset_330000000": gui.ex.lineEdit_Configuration_offset_330000000.text(),
                    "offset_500000000": gui.ex.lineEdit_Configuration_offset_500000000.text(),
                    "offset_1400000000": gui.ex.lineEdit_Configuration_offset_1400000000.text(),
                    "offset_1500000000": gui.ex.lineEdit_Configuration_offset_1500000000.text(),
                    "offset_1800000000": gui.ex.lineEdit_Configuration_offset_1600000000.text(),
                    "offset_1600000000": gui.ex.lineEdit_Configuration_offset_1800000000.text(),
                    "offset_2000000000": gui.ex.lineEdit_Configuration_offset_2000000000.text(),
                    "offset_2700000000": gui.ex.lineEdit_Configuration_offset_2700000000.text(),
                    "SPI_Port": gui.ex.comboBox_Configuration_spi_port.currentText(),
                    "SPI_Clock": gui.ex.comboBox_Configuration_spi_clock.currentText(),
                    "SPI_Active": gui.ex.comboBox_Configuration_spi_active.currentText(),
                    "SPI_Lead": gui.ex.comboBox_Configuration_spi_lead.currentText(),
                    "SPI_SSO": gui.ex.comboBox_Configuration_spi_sso.currentText(),
                    "Full_Screen": gui.ex.comboBox_Configuration_fullscreen_status.currentText()
                }
            }
            with open("Config\\config.json", "w") as fp:
                json.dump(config_file, fp, indent=1)
            logger.write("Configuration saved!")

        except Exception as error:
            logger.write("[save_config]" + str(error), status=False)

    def GetInit(self):
        try:
            WriteStream.write(["lineEdit_Configuration_computer_ip.setText", self.Computer_IP])
            WriteStream.write(["lineEdit_Configuration_device_ip.setText", self.Device_IP])
            WriteStream.write(["lineEdit_Configuration_computer_port.setText", self.Port])
            WriteStream.write(["lineEdit_Configuration_spectrum_ip.setText", self.Spectrome_IP])
            WriteStream.write(["lineEdit_Configuration_power_supply_ip.setText", self.Power_Supply_IP])
            WriteStream.write(["lineEdit_Configuration_power_supply_port.setText", self.Power_Supply_Port])
            WriteStream.write(["lineEdit_Configuration_offset_200000000.setText", str(self.offset_200000000)])
            WriteStream.write(["comboBox_Configuration_spi_port.setCurrentText", self.SPI_Port])
            WriteStream.write(["comboBox_Configuration_spi_clock.setCurrentText", self.SPI_Clock])
            WriteStream.write(["comboBox_Configuration_spi_active.setCurrentText", self.SPI_Active])
            WriteStream.write(["comboBox_Configuration_spi_lead.setCurrentText", self.SPI_Lead])
            WriteStream.write(["comboBox_Configuration_spi_sso.setCurrentText", self.SPI_SSO])
            WriteStream.write(["lineEdit_Configuration_signal_generator_ip.setText", self.Signal_Generator])
            WriteStream.write(["comboBox_Configuration_fullscreen_status.setCurrentText", self.Full_Screen])
            WriteStream.write(["lineEdit_Configuration_offset_330000000.setText", str(self.offset_330000000)])
            WriteStream.write(["lineEdit_Configuration_offset_500000000.setText", str(self.offset_500000000)])
            WriteStream.write(["lineEdit_Configuration_offset_1400000000.setText", str(self.offset_1400000000)])
            WriteStream.write(["lineEdit_Configuration_offset_1500000000.setText", str(self.offset_1500000000)])
            WriteStream.write(["lineEdit_Configuration_offset_1600000000.setText", str(self.offset_1600000000)])
            WriteStream.write(["lineEdit_Configuration_offset_1800000000.setText", str(self.offset_1800000000)])
            WriteStream.write(["lineEdit_Configuration_offset_2000000000.setText", str(self.offset_2000000000)])
            WriteStream.write(["lineEdit_Configuration_offset_2700000000.setText", str(self.offset_2700000000)])
        except Exception as error:
            logger.write("[GetInit]" + str(error), status=False)


class Registers_Page:
    def __init__(self):
        header = gui.ex.tableWidget_Registers_registers.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.Stretch)
        header.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(4, QtWidgets.QHeaderView.Stretch)
        header.setSectionResizeMode(5, QtWidgets.QHeaderView.Stretch)
        header.setSectionResizeMode(6, QtWidgets.QHeaderView.Stretch)
        gui.ex.tableWidget_Registers_registers.horizontalHeader().setVisible(True)
        self.sizeOfTable = 0
        self.filter = False
        self.currRow = -1
        self.listOf_index = []
        self.listOf_index = []
        self.listOf_prev = []
        self.listOfCheckedGroups = []
        self.listOfCheckedBoardId = []
        self.temp = ""

        WriteStream.write(["pushButton_Registers_read.setEnabled", False])
        WriteStream.write(["pushButton_Registers_write.setEnabled", False])

        WriteStream.write(["pushButton_Registers_load_for_signal.setHidden", True])
        gui.ex.pushButton_Registers_load_file.clicked.connect(lambda: threading.Thread(target=self.load).start())
        gui.ex.pushButton_Registers_load_for_signal.clicked.connect(self.load2)
        gui.ex.pushButton_Registers_add_row.clicked.connect(action.AddRow)
        gui.ex.pushButton_Registers_delete_row.clicked.connect(lambda: threading.Thread(target=action.delete_Row).start())
        gui.ex.pushButton_Registers_read.clicked.connect(lambda: threading.Thread(target=self.buildPacket_read).start())
        gui.ex.pushButton_Registers_write.clicked.connect(lambda: threading.Thread(target=self.buildPacket_write).start())
        gui.ex.tableWidget_Registers_registers.itemClicked.connect(lambda: threading.Thread(target=self.updateCurrRow).start())
        gui.ex.pushButton_Registers_select_all.clicked.connect(lambda: threading.Thread(target=self.SelectALL).start())
        gui.ex.pushButton_Registers_remove_all.clicked.connect(lambda: threading.Thread(target=self.RemoveAll).start())
        gui.ex.pushButton_Registers_save.clicked.connect(lambda: threading.Thread(target=self.save).start())

    def received_stringToNetOrdered(self, Recive):
        try:
            logger.write("Recive = " + str(Recive))
            return ''.join([''.join([Recive[i + 2], Recive[i + 3], Recive[i], Recive[i + 1]]) for i in range(0, len(Recive), 4)])
        except Exception as error:
            logger.write("[received_stringToNetOrdered] error: " + str(error), status=False)

    def RemoveAll(self):
        try:
            for i in range(gui.ex.tableWidget_Registers_registers.rowCount()):
                gui.ex.tableWidget_Registers_registers.item(i, 0).setCheckState(0)
            gui.ex.tableWidget_Registers_registers.insertRow(gui.ex.tableWidget_Registers_registers.rowCount())
            gui.ex.tableWidget_Registers_registers.setRowCount(gui.ex.tableWidget_Registers_registers.rowCount() - 1)
            self.updateCurrRow()
        except Exception as error:
            logger.write("[RemoveAll] error: " + str(error), status=False)

    def SelectALL(self):
        try:
            for i in range(gui.ex.tableWidget_Registers_registers.rowCount()):
                gui.ex.tableWidget_Registers_registers.item(i, 0).setCheckState(2)

            gui.ex.tableWidget_Registers_registers.insertRow(gui.ex.tableWidget_Registers_registers.rowCount())
            gui.ex.tableWidget_Registers_registers.setRowCount(gui.ex.tableWidget_Registers_registers.rowCount() - 1)
            self.updateCurrRow()
        except Exception as error:
            logger.write("[SelectALL] error: " + str(error), status=False)

    def updateCurrRow(self):

        try:
            for i in range(gui.ex.tableWidget_Registers_registers.rowCount()):
                if gui.ex.tableWidget_Registers_registers.item(i, 0).checkState() == 2 and i not in self.listOf_index:
                    self.listOf_index.append(i)
                elif gui.ex.tableWidget_Registers_registers.item(i, 0).checkState() == 0 and i in self.listOf_index:
                    self.listOf_index.remove(i)

            if len(self.listOf_index) > 0:
                WriteStream.write(["pushButton_Registers_read.setEnabled", True])
                WriteStream.write(["pushButton_Registers_write.setEnabled", True])
            else:
                WriteStream.write(["pushButton_Registers_read.setEnabled", False])
                WriteStream.write(["pushButton_Registers_write.setEnabled", False])

            print("self.listOf_index = " + str(self.listOf_index))
            return self.listOf_index
        except Exception as error:
            logger.write("Error updateCurrRow: " + str('{err}'.format(err=error)), status=False)

    def Print_Error_Values(self, row):

        try:
            print("shir row = " + str(row))

            address = gui.ex.tableWidget_Registers_registers.item(row, 2).text()
            board_id = gui.ex.tableWidget_Registers_registers.cellWidget(row, 6).currentText()
            value = gui.ex.tableWidget_Registers_registers.item(row, 5).text()

            if address == "" or address[:2] != "0x":
                gui.ex.tableWidget_Registers_registers.item(row, 2).setBackground(QtGui.QColor(255, 0, 0))
                gui.ex.tableWidget_Registers_registers.insertRow(gui.ex.tableWidget_Registers_registers.rowCount())
                gui.ex.tableWidget_Registers_registers.setRowCount(gui.ex.tableWidget_Registers_registers.rowCount() - 1)
            #     gui.ex.pushButton_REG_save.setStyleSheet("background-color: rgb(255, 0, 0); border: 1px solid #6593cf;border-radius: 20px;")
            else:
                gui.ex.tableWidget_Registers_registers.item(row, 2).setBackground(QtGui.QColor(67, 76, 92))

            if board_id == "":
                gui.ex.tableWidget_Registers_registers.cellWidget(row, 6).setStyleSheet("background-color: rgb(255, 0, 0);")
                gui.ex.tableWidget_Registers_registers.insertRow(gui.ex.tableWidget_Registers_registers.rowCount())
                gui.ex.tableWidget_Registers_registers.setRowCount(gui.ex.tableWidget_Registers_registers.rowCount() - 1)
                # gui.ex.pushButton_REG_save.setStyleSheet("background-color: rgb(255, 0, 0); border: 1px solid #6593cf;border-radius: 20px;")
            else:
                gui.ex.tableWidget_Registers_registers.cellWidget(row, 6).setStyleSheet("background-color: white;")

            if value == "" or (not all(c in string.hexdigits for c in value)):
                gui.ex.tableWidget_Registers_registers.item(row, 5).setBackground(QtGui.QColor(255, 0, 0))
                gui.ex.tableWidget_Registers_registers.insertRow(gui.ex.tableWidget_Registers_registers.rowCount())
                gui.ex.tableWidget_Registers_registers.setRowCount(gui.ex.tableWidget_Registers_registers.rowCount() - 1)
                # gui.ex.pushButton_REG_save.setStyleSheet("background-color: rgb(255, 0, 0); border: 1px solid #6593cf;border-radius: 20px;")
            else:
                gui.ex.tableWidget_Registers_registers.item(row, 5).setBackground(QtGui.QColor(67, 76, 92))
                gui.ex.tableWidget_Registers_registers.insertRow(gui.ex.tableWidget_Registers_registers.rowCount())
                gui.ex.tableWidget_Registers_registers.setRowCount(gui.ex.tableWidget_Registers_registers.rowCount() - 1)

            if value != "" and board_id != "" and address != "":
                gui.ex.pushButton_REG_save.setStyleSheet("QPushButton:hover{\n"
                                                         "        background: qlineargradient(x1 : 0, y1 : 0, x2 : 0, y2 :   1, stop :   0.0 #ffd9aa,\n"
                                                         "                stop :   0.5 #ffbb6e, stop :   0.55 #feae42, stop :   1.0 #fedb74);\n"
                                                         "        \n"
                                                         "    background: rgb(60, 68, 83);\n"
                                                         "}\n"
                                                         "\n"
                                                         "QPushButton {\n"
                                                         "font: bold 10pt \"MS Shell Dlg 2\";\n"
                                                         "        padding-left: 10px;\n"
                                                         "        text-align: left;\n"
                                                         "        border: 1px solid #6593cf;\n"
                                                         "        border-radius: 20px;\n"
                                                         "    \n"
                                                         "         background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:1 rgba(0, 0, 0, 0));\n"
                                                         "        color: rgb(255, 255, 255);\n"
                                                         "        height: 30px;\n"
                                                         "}\n"
                                                         "\n"
                                                         "\n"
                                                         "\n"
                                                         "\n"
                                                         "QPushButton:pressed {\n"
                                                         "           color: rgb(148, 155, 162);\n"
                                                         "        padding-top: 0px;\n"
                                                         "        padding-left: 0px;\n"
                                                         "\n"
                                                         "}\n"
                                                         "\n"
                                                         "\n"
                                                         "QPushButton:on {\n"
                                                         "        background: qlineargradient(x1 : 0, y1 : 0, x2 : 0, y2 :   1, stop :   0.0 #00557f,\n"
                                                         "        stop :   0.5 #00557f, stop :   0.55 #00557f, stop :   1.0 #f5f9ff);\n"
                                                         "        padding-top: 2px;\n"
                                                         "        padding-left: 3px;\n"
                                                         "}\n"
                                                         "\n"
                                                         "QPushButton:disabled {\n"
                                                         "        background: transparent #e5e9ee;\n"
                                                         "        padding-top: 2px;        \n"
                                                         "        padding-left: 3px;\n"
                                                         "        color: black;\n"
                                                         "}")

        except Exception as error:
            logger.write("[Print_Error_Values] error: " + str(error), status=False)

    def convertNumber(self, row):
        try:
            print("row = " + str(row))
            row = int(row)
            privType = self.listOf_prev[row]
            print("privType = " + str(len(privType)))

            currType = gui.ex.tableWidget_Registers_registers.cellWidget(row, 4).currentText()
            self.listOf_prev[row] = currType
            currentNumber = gui.ex.tableWidget_Registers_registers.item(row, 5).text()

            if len(privType) == 0:
                return

            print("currType = " + str(currType))
            print("privType = " + str(privType))
            print("currentNumber = " + str(currentNumber))

            # we need to convert from privUnit to currType

            if currType == "Hex":
                if privType == "Bin":
                    # bin -> dec -> hex
                    gui.ex.tableWidget_Registers_registers.item(row, 5).setText(str(hex(int(str(currentNumber), 2)))[2:])
                elif privType == "Oct":
                    # Oct -> dec -> hex
                    gui.ex.tableWidget_Registers_registers.item(row, 5).setText(str(hex(int(str(currentNumber), 8)))[2:])
                elif privType == "Dec":
                    # Dec -> hex
                    gui.ex.tableWidget_Registers_registers.item(row, 5).setText(str(hex(int(str(currentNumber), 10)))[2:])
            elif currType == "Dec":
                if privType == "Bin":
                    # bin -> dec
                    gui.ex.tableWidget_Registers_registers.item(row, 5).setText(str(int(str(currentNumber), 2)))
                elif privType == "Oct":
                    # Oct -> dec
                    gui.ex.tableWidget_Registers_registers.item(row, 5).setText(str(int(str(currentNumber), 8)))
                elif privType == "Hex":
                    # Hex -> dec
                    gui.ex.tableWidget_Registers_registers.item(row, 5).setText(str(int(str(currentNumber), 16)))

            elif currType == "Bin":
                if privType == "Dec":
                    # Dec -> Bin
                    gui.ex.tableWidget_Registers_registers.item(row, 5).setText(str(bin(int(currentNumber)))[2:])
                elif privType == "Oct":
                    # Oct -> DEC -> Bin
                    gui.ex.tableWidget_Registers_registers.item(row, 5).setText(str(bin(int(str(currentNumber), 8)))[2:])
                elif privType == "Hex":
                    # Hex -> DEC -> Bin
                    gui.ex.tableWidget_Registers_registers.item(row, 5).setText(str(bin(int(str(currentNumber), 16)))[2:])

            elif currType == "Oct":
                if privType == "Dec":
                    # Dec -> Oct
                    gui.ex.tableWidget_Registers_registers.item(row, 5).setText(str(oct(int(currentNumber)))[2:])
                elif privType == "Bin":
                    # Bin -> DEC -> Oct
                    gui.ex.tableWidget_Registers_registers.item(row, 5).setText(str(oct(int(str(currentNumber), 2)))[2:])
                elif privType == "Hex":
                    # Hex -> DEC -> Oct
                    gui.ex.tableWidget_Registers_registers.item(row, 5).setText(str(oct(int(str(currentNumber), 16)))[2:])

            #
            #     gui.ex.tableWidget_Registers_registers.item(row, 5).setText()

            gui.ex.tableWidget_Registers_registers.insertRow(gui.ex.tableWidget_Registers_registers.rowCount())
            gui.ex.tableWidget_Registers_registers.setRowCount(gui.ex.tableWidget_Registers_registers.rowCount() - 1)

        except Exception as error:
            logger.write("[convertNumber] error = " + str(error), status=False)

    # this function build the packet - address the item and write it in to the json file

    def buildPayload(self, dict):
        try:
            for word in dict.values():
                if type(word) == str:
                    self.payload_appand += str(word)
                else:
                    self.buildPayload(word)
        except Exception as error:
            logger.write("[buildPayload] error: " + str(error), status=False)

    def byteSize(self):
        try:
            return str(int(len(self.packetBuilded)))
        except Exception as error:
            logger.write("[byteSize] error: " + str(error), status=False)

    def stringToNetOrderedByteArray(self, s):
        try:
            return bytearray.fromhex(''.join([''.join([s[i + 2], s[i + 3], s[i], s[i + 1]]) for i in range(0, len(s), 4)]))
        except Exception as error:
            logger.write("[stringToNetOrderedByteArray] error: " + str(error), status=False)

    def save(self):
        print("a")
        try:

            for i in range(gui.ex.tableWidget_Registers_registers.rowCount()):
                print("hi")
                address = gui.ex.tableWidget_Registers_registers.item(i, 2).text()
                board_id = gui.ex.tableWidget_Registers_registers.cellWidget(i, 6).currentText()
                value = gui.ex.tableWidget_Registers_registers.item(i, 5).text()
                if address == "" or address[:2] != "0x" or board_id == "" or value == "" or (not all(c in string.hexdigits for c in value)):
                    logger.write("Cannot save the file,Please fill the relevant values.")

                    return

            file = open(str(gui.load_REG[0]), "r")
            with open("Files\\Copy\\HereCopy.json", "w") as to:
                to.write(file.read())

            tempFile = json.load(open("Files\\Copy\\HereCopy.json", "r"))

            for i in range(0, gui.ex.tableWidget_Registers_registers.rowCount(), 1):
                currIndex = str(gui.ex.tableWidget_Registers_registers.item(i, 0).text())

                if currIndex not in tempFile:
                    break

                tempFile[str(currIndex)]["Group"] = str(gui.ex.tableWidget_Registers_registers.item(i, 1).text())
                tempFile[str(currIndex)]["Address"] = str(gui.ex.tableWidget_Registers_registers.item(i, 2).text())
                tempFile[str(currIndex)]["Name"] = str(gui.ex.tableWidget_Registers_registers.item(i, 3).text())
                tempFile[str(currIndex)]["Type"] = str(gui.ex.tableWidget_Registers_registers.cellWidget(i, 4).currentText())
                tempFile[str(currIndex)]["Value"] = str(gui.ex.tableWidget_Registers_registers.item(i, 5).text())
                tempFile[str(currIndex)]["Board_ID"] = str(gui.ex.tableWidget_Registers_registers.cellWidget(i, 6).currentText())

            # problem here when we are on filter and delete and saveeeee

            for i in action.indexesOfDeleteRows:
                if str(i + 1) in tempFile:
                    tempFile.pop(str(i + 1))

            newTempFile = {}
            counter = 1
            for i in tempFile:
                newTempFile[str(counter)] = tempFile[str(i)]
                counter += 1
            print("newTempFile = " + str(newTempFile))
            tempFile = newTempFile
            print("tempFile = " + str(tempFile))

            countRows = len(tempFile)

            for i in action.indexesOfAddRows:
                if i in action.indexesOfDeleteRows:
                    action.indexesOfAddRows.remove(i)

            for i in action.indexesOfAddRows:
                curr_group = str(gui.ex.tableWidget_Registers_registers.item(i, 1).text())
                curr_Address = gui.ex.tableWidget_Registers_registers.item(i, 2).text()
                curr_Name = gui.ex.tableWidget_Registers_registers.item(i, 3).text()
                curr_Type = gui.ex.tableWidget_Registers_registers.cellWidget(i, 4).currentText()
                curr_Value = gui.ex.tableWidget_Registers_registers.item(i, 5).text()
                curr_Board_ID = gui.ex.tableWidget_Registers_registers.cellWidget(i, 6).currentText()

                countRows += 1
                tempFile[str(countRows)] = {
                    "Group": str(curr_group),
                    "Address": str(curr_Address),
                    "Name": str(curr_Name),
                    "Type": str(curr_Type),
                    "Value": str(curr_Value),
                    "Board_ID": str(curr_Board_ID)

                }

            with open("Files\\Copy\\HereCopy.json", "w") as fp:
                json.dump(tempFile, fp, indent=2)

            file = open("Files\\Copy\\HereCopy.json", "r")
            with open(str(gui.load_REG[0]), "w") as to:
                to.write(file.read())

            self.load(True)

            # if row deleted , delete from filter group

            list_of_group = []
            list_of_group_from_table = []
            for i in range(gui.combo_Group_checkBox.count()):
                list_of_group.append(gui.combo_Group_checkBox.itemText(i))
            for i in range(gui.ex.tableWidget_Registers_registers.rowCount()):
                list_of_group_from_table.append(gui.ex.tableWidget_Registers_registers.item(i, 1).text())
            list_of_group_from_table.insert(0, "All")
            list_of_group_from_table = set(list_of_group_from_table)
            list_of_group_from_table = list(list_of_group_from_table)

            for i in range(len(list_of_group)):
                print("item in list of group : " + str(list_of_group[i]))
                if list_of_group[i] not in list_of_group_from_table:
                    item = str(list_of_group[i])
                    for j in range(gui.combo_Group_checkBox.count()):
                        if gui.combo_Group_checkBox.itemText(j) == item:
                            gui.combo_Group_checkBox.removeItem(j)

            # if row deleted , delete from filter board id

            list_of_boards = []
            list_of_boards_from_table = []

            for i in range(gui.combo_BoardId_checkBox.count()):
                list_of_boards.append(gui.combo_BoardId_checkBox.itemText(i))
            for i in range(gui.ex.tableWidget_Registers_registers.rowCount()):
                list_of_boards_from_table.append(gui.ex.tableWidget_Registers_registers.cellWidget(i, 6).currentText())
            list_of_boards_from_table.insert(0, "All")
            list_of_boards_from_table = set(list_of_boards_from_table)
            list_of_boards_from_table = list(list_of_boards_from_table)

            for i in range(len(list_of_boards)):
                if list_of_boards[i] not in list_of_boards_from_table:
                    item = str(list_of_boards[i])
                    for j in range(gui.combo_BoardId_checkBox.count()):
                        if gui.combo_BoardId_checkBox.itemText(j) == item:
                            gui.combo_BoardId_checkBox.removeItem(j)

            for j in range(gui.ex.tableWidget_Registers_registers.rowCount()):
                gui.ex.tableWidget_Registers_registers.cellWidget(j, 6).setEnabled(False)
                Board = gui.ex.tableWidget_Registers_registers.cellWidget(j, 6).currentText()
                group = str(gui.ex.tableWidget_Registers_registers.item(j, 1).text())
                if gui.combo_Group_checkBox.findText(group) == -1:
                    gui.combo_Group_checkBox.addItem(group)
                    gui.combo_Group_checkBox.setItemChecked(gui.combo_Group_checkBox.count() - 1, True)
                    gui.combo_Group_checkBox.setItemChecked(gui.combo_Group_checkBox.count() - 1, False)
                if gui.combo_BoardId_checkBox.findText(Board) == -1:
                    gui.combo_BoardId_checkBox.addItem(Board)
                    gui.combo_BoardId_checkBox.setItemChecked(j, True)
                    gui.combo_BoardId_checkBox.setItemChecked(j, False)
                    gui.ex.tableWidget_Registers_registers.cellWidget(j, 6).setEnabled(False)
            logger.write("File Saved")

        except Exception as error:
            logger.write("Registers_Page [save] error: " + str(error), status=False)

    def load(self, filter=False):
        try:

            WriteStream.write(["pushButton_Registers_load_file.setEnabled", False])

            WriteStream.write(["tableWidget_Registers_registers.blockSignals", True])

            action.sizeOfTable = 0
            gui.REG_isLoaded = False

            if not filter:

                WriteStream.write(["REG_load"])

                while not gui.REG_isLoaded:
                    time.sleep(0.1)

            else:
                self.filter = True

            if len(gui.load_REG[0]) > 0:
                if not filter:
                    gui.combo_Group_checkBox.clear()
                    gui.combo_BoardId_checkBox.clear()

                print("gui.load_REG[0] = " + str(gui.load_REG[0]))
                WriteStream.write(["tableWidget_Registers_registers.setRowCount", 0])

                WriteStream.write(["pushButton_Registers_load_for_signal.click()"])

            WriteStream.write(["pushButton_Registers_load_file.setEnabled", True])
            WriteStream.write(["pushButton_Registers_write.setEnabled", True])
            WriteStream.write(["pushButton_Registers_read.setEnabled", True])

        except Exception as error:
            logger.write("Registers_Page [load] error:" + str(error), status=False)

    def load2(self):
        try:
            print("w2")
            action.indexesOfAddRows = []
            action.indexesOfDeleteRows = []

            # gui.ex.comboBox_Group.blockSignals(True)
            gui.combo_Group_checkBox.blockSignals(True)
            gui.combo_BoardId_checkBox.blockSignals(True)
            file = json.load(open(str(gui.load_REG[0]), "r"))

            self.listOfCheckedGroups = []
            self.listOfCheckedBoardId = []
            for i in range(gui.combo_Group_checkBox.count()):
                Ischecked = gui.combo_Group_checkBox.itemChecked(i)
                print("Ischecked " + str(i) + " = " + str(Ischecked))
                if Ischecked:
                    self.listOfCheckedGroups.append(gui.combo_Group_checkBox.itemText(i))

            # board id combo bx - list of what checked

            for i in range(gui.combo_BoardId_checkBox.count()):
                checked = gui.combo_BoardId_checkBox.itemChecked(i)
                if checked:
                    self.listOfCheckedBoardId.append(gui.combo_BoardId_checkBox.itemText(i))

            print("self.listOfCheckedBoard = " + str(self.listOfCheckedBoardId))
            print("self.listOfCheckedGroups = " + str(self.listOfCheckedGroups))

            self.listOf_prev = []

            for i in range(1, len(file) + 1, 1):
                curr_index = list(file.keys())[i - 1]
                print("curr_index = " + str(curr_index))
                curr_group = file[str(i)]["Group"]
                curr_Address = file[str(i)]["Address"]
                curr_Name = file[str(i)]["Name"]
                curr_Type = file[str(i)]["Type"]
                curr_Value = file[str(i)]["Value"]
                curr_Board_ID = file[str(i)]["Board_ID"]

                # if (len(curr_Type) == 0):
                #     logger.write("error file: in line " + str(i) + " key Type = " + str(curr_Type))
                #     curr_Type = "Dec"
                #
                # if (len(curr_Board_ID) == 0):
                #     logger.write("error file: in line " + str(i) + " key Board id = " + str(curr_Board_ID))
                #     curr_Board_ID = "FPGA"

                if self.filter:
                    if "All" not in self.listOfCheckedGroups:
                        toCheck = False
                        if curr_group not in self.listOfCheckedGroups and len(self.listOfCheckedGroups) > 0:
                            continue
                    else:
                        toCheck = True

                    if "All" not in self.listOfCheckedBoardId:
                        if curr_Board_ID not in self.listOfCheckedBoardId and len(self.listOfCheckedBoardId) > 0:
                            continue

                WriteStream.write(["tableWidget_Registers_registers.insertRow", action.sizeOfTable])

                try:
                    if gui.combo_Group_checkBox.findText(curr_group) == -1:
                        gui.combo_Group_checkBox.addItem(curr_group)
                        gui.combo_Group_checkBox.setItemChecked(gui.combo_Group_checkBox.count() - 1, False)

                    if gui.combo_BoardId_checkBox.findText(curr_Board_ID) == -1:
                        gui.combo_BoardId_checkBox.addItem(curr_Board_ID)
                        gui.combo_BoardId_checkBox.setItemChecked(gui.combo_BoardId_checkBox.count() - 1, False)

                except Exception as error:
                    logger.write("Registers_Page [load2]: " + str(error), status=False)

                chkBoxItem = QtWidgets.QTableWidgetItem(str(curr_index))
                chkBoxItem.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                chkBoxItem.setCheckState(QtCore.Qt.CheckState(0))
                WriteStream.write(["tableWidget_Registers_registers.setItem", action.sizeOfTable, 0, chkBoxItem])
                chkBoxItem.setForeground(QBrush(QColor(255, 255, 255)))

                item = QtWidgets.QTableWidgetItem(str(curr_group))
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
                # item.setFlags(QtCore.Qt.ItemIsEnabled)
                WriteStream.write(["tableWidget_Registers_registers.setItem", action.sizeOfTable, 1, item])
                item.setForeground(QBrush(QColor(255, 255, 255)))

                item = QtWidgets.QTableWidgetItem(str(curr_Address))
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
                # item.setFlags(QtCore.Qt.ItemIsEnabled)
                WriteStream.write(["tableWidget_Registers_registers.setItem", action.sizeOfTable, 2, item])
                item.setForeground(QBrush(QColor(255, 255, 255)))
                if curr_Address == "" or curr_Address[:2] != "0x":
                    item.setBackground(QtGui.QColor(255, 0, 0))
                    # gui.ex.pushButton_REG_save.setStyleSheet("background-color: rgb(255, 0, 0); border: 1px solid #6593cf;border-radius: 20px;")
                # WriteStream.write(["tableWidget_Registers_registers.addSignal", "tableWidget_Registers_registers.itemChanged.connect((lambda: threading.Thread(target=table_functions.Print_Error_Values, args=[" + str(action.sizeOfTable) + "]).start()))", ""])

                item = QtWidgets.QTableWidgetItem(str(curr_Name))
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
                # item.setFlags(QtCore.Qt.ItemIsEnabled)
                WriteStream.write(["tableWidget_Registers_registers.setItem", action.sizeOfTable, 3, item])
                item.setForeground(QBrush(QColor(255, 255, 255)))

                combo = QtWidgets.QComboBox()
                combo.addItems(["Bin", "Oct", "Dec", "Hex"])
                combo.setCurrentText(str(curr_Type))
                combo.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.listOf_prev.append(curr_Type)
                # print("self.listOf_prev = " + str(self.listOf_prev))
                gui.ex.tableWidget_Registers_registers.setCellWidget(action.sizeOfTable, 4, combo)
                WriteStream.write(["tableWidget_Registers_registers.setCellWidget", action.sizeOfTable, 4, combo])
                WriteStream.write(["tableWidget_Registers_registers.addSignal", "tableWidget_Registers_registers.cellWidget(" + str(action.sizeOfTable) + ", 4).currentIndexChanged.connect((lambda: threading.Thread(target=table_functions.convertNumber, args=[" + str(action.sizeOfTable) + "]).start()))", ""])
                combo.setEnabled(False)

                item = QtWidgets.QTableWidgetItem(str(curr_Value))
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
                # item.setFlags(QtCore.Qt.ItemIsEnabled)
                WriteStream.write(["tableWidget_Registers_registers.setItem", action.sizeOfTable, 5, item])
                item.setForeground(QBrush(QColor(255, 255, 255)))
                if curr_Value == "" or (not all(c in string.hexdigits for c in curr_Value)):
                    item.setBackground(QtGui.QColor(255, 0, 0))
                    # gui.ex.pushButton_REG_save.setStyleSheet("background-color: rgb(255, 0, 0); border: 1px solid #6593cf;border-radius: 20px;")
                # WriteStream.write(["tableWidget_Registers_registers.addSignal", "tableWidget_Registers_registers.itemChanged.connect((lambda: threading.Thread(target=table_functions.Print_Error_Values, args=[" + str(action.sizeOfTable) + "]).start()))", ""])

                combo2 = QtWidgets.QComboBox()
                combo2.setStyleSheet("background-color: rgb(255, 255, 255);")
                board_file = json.load(open("Config\\Board_id_config.json", "r"))
                keys = list(board_file.keys())
                for j in range(len(keys)):
                    combo2.addItem(str(keys[j]))
                combo2.setCurrentText(str(curr_Board_ID))
                gui.ex.tableWidget_Registers_registers.setCellWidget(action.sizeOfTable, 6, combo2)
                WriteStream.write(["tableWidget_Registers_registers.setCellWidget", action.sizeOfTable, 6, combo2])
                # WriteStream.write(["tableWidget_Registers_registers.addSignal", "tableWidget_Registers_registers.cellWidget(" + str(action.sizeOfTable) + ", 6).currentIndexChanged.connect((lambda: threading.Thread(target=table_functions.Print_Error_Values, args=[" + str(action.sizeOfTable) + "]).start()))", ""])
                # if (combo2.currentText() == ""):
                # gui.ex.pushButton_REG_save.setStyleSheet("background-color: rgb(255, 0, 0); border: 1px solid #6593cf;border-radius: 20px;")
                combo2.setEnabled(False)

                action.sizeOfTable += 1

            if gui.combo_Group_checkBox.findText("All") == -1:
                # gui.combo_Group_checkBox.addItem("All")
                gui.combo_Group_checkBox.insertItem(0, "All")
                gui.combo_Group_checkBox.setItemChecked(gui.combo_Group_checkBox.count() - 1, False)
                gui.combo_Group_checkBox.setItemChecked(0, True)
                gui.combo_Group_checkBox.setItemChecked(0, False)
                # gui.combo_Group_checkBox.setCurrentIndex(-1)

            if gui.combo_BoardId_checkBox.findText("All") == -1:
                # gui.combo_BoardId_checkBox.addItem("All")
                gui.combo_BoardId_checkBox.insertItem(0, "All")
                gui.combo_BoardId_checkBox.setItemChecked(gui.combo_BoardId_checkBox.count() - 1, False)
                gui.combo_BoardId_checkBox.setItemChecked(0, True)
                gui.combo_BoardId_checkBox.setItemChecked(0, False)
                # gui.combo_BoardId_checkBox.setCurrentIndex(-1)

                # gui.combo_BoardId_checkBox.setItemChecked()

            if len(self.listOfCheckedGroups) > 0:
                if "All" in self.listOfCheckedGroups:
                    gui.combo_Group_checkBox.setCurrentText("All")
                else:
                    tempLine = ""
                    for type in self.listOfCheckedGroups:
                        tempLine += type + ", "
                    print("tempLine = " + str(tempLine))
                    gui.combo_Group_checkBox.setCurrentText(tempLine[:-2])
            else:
                gui.combo_Group_checkBox.setCurrentText("")
            #
            if len(self.listOfCheckedBoardId) > 0:
                if "All" in self.listOfCheckedBoardId:
                    gui.combo_BoardId_checkBox.setCurrentText("All")
                    print("hi")
                else:
                    tempLine = ""
                    for type in self.listOfCheckedBoardId:
                        tempLine += type + ", "
                    print("tempLine = " + str(tempLine))
                    gui.combo_BoardId_checkBox.setCurrentText(tempLine[:-2])
            else:
                gui.combo_BoardId_checkBox.setCurrentText("")

            WriteStream.write(["tableWidget_Registers_registers.blockSignals", False])

        except Exception as error:
            logger.write("Registers_Page [load2] error: " + str(error), status=False)

        try:
            ### select all remove all###
            if "All" in self.listOfCheckedGroups and gui.combo_Group_checkBox.currentIndex() == 0:
                self.listOfCheckedGroups = []
                for i in range(gui.combo_Group_checkBox.count()):
                    self.listOfCheckedGroups.append(gui.combo_Group_checkBox.itemText(i))
                    gui.combo_Group_checkBox.setItemChecked(index=i, checked=True)
            elif "All" not in self.listOfCheckedGroups and gui.combo_Group_checkBox.currentIndex() == 0:
                self.listOfCheckedGroups = []
                for i in range(gui.combo_Group_checkBox.count()):
                    gui.combo_Group_checkBox.setItemChecked(index=i, checked=False)

            else:
                temp = []
                for q in self.listOfCheckedGroups:
                    if q != "All":
                        temp.append(q)
                self.listOfCheckedGroups = temp
                gui.combo_Group_checkBox.setItemChecked(index=0, checked=False)

            if "All" in self.listOfCheckedBoardId and gui.combo_BoardId_checkBox.currentIndex() == 0:
                self.listOfCheckedBoardId = []
                for i in range(gui.combo_BoardId_checkBox.count()):
                    self.listOfCheckedBoardId.append(gui.combo_BoardId_checkBox.itemText(i))
                    gui.combo_BoardId_checkBox.setItemChecked(index=i, checked=True)
            elif "All" not in self.listOfCheckedBoardId and gui.combo_BoardId_checkBox.currentIndex() == 0:
                self.listOfCheckedBoardId = []
                for i in range(gui.combo_BoardId_checkBox.count()):
                    gui.combo_BoardId_checkBox.setItemChecked(index=i, checked=False)

            else:
                temp_1 = []
                for q in self.listOfCheckedBoardId:
                    if q != "All":
                        temp_1.append(q)
                self.listOfCheckedBoardId = temp_1
                gui.combo_BoardId_checkBox.setItemChecked(index=0, checked=False)

            ###

            WriteStream.write(["pushButton_Registers_load_file.setEnabled", True])

            # gui.ex.comboBox_Group.blockSignals(False)
            gui.combo_Group_checkBox.blockSignals(False)
            gui.combo_BoardId_checkBox.blockSignals(False)

            self.filter = False

        except Exception as error:
            logger.write("Registers_Page [load2] error: " + str(error), status=False)

        try:
            file = json.load(open(str(gui.load_REG[0]), "r"))
            action.countOfFullTable = len(file)
        except Exception as error:
            logger.write("Registers_Page [load2] error: " + str(error), status=False)

    def buildPacket_write(self):
        try:
            if gui.ex.pushButton_Home_Welcome_lan.isChecked():
                try:
                    if script_page.sock is None:
                        script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()), ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()), port=int(gui.ex.lineEdit_Configuration_computer_port.text()))

                    for RowIndex in sorted(self.updateCurrRow()):

                        configurations = json.load(open("Files\\Messages\\GP_Set_REG.json", "r"))

                        Board_ID = gui.ex.tableWidget_Registers_registers.cellWidget(RowIndex, 6).currentText()
                        Reg_Address = gui.ex.tableWidget_Registers_registers.item(RowIndex, 2).text()  # 0x80000004
                        currValue = gui.ex.tableWidget_Registers_registers.item(RowIndex, 5).text()

                        if Board_ID == "" or Reg_Address == "" or currValue == "" or (Reg_Address[:2] != "0x") or currValue == "" or (not all(c in string.hexdigits for c in currValue)):

                            if Board_ID == "":
                                logger.write("In Line number " + str(RowIndex + 1) + " No board id to send")

                            # Reg_Address[2:] -> 80000004
                            if Reg_Address == "" or (Reg_Address[:2] != "0x"):
                                logger.write("In Line number " + str(RowIndex + 1) + " No Address to send")
                                # WriteStream.write(["plainTextEdit_Log.setStyleSheet", "color: rgb(255, 0, 0);\n""font: 75 10pt \"MS Shell Dlg 2\";"])

                            if currValue == "":
                                logger.write("In Line number " + str(RowIndex + 1) + " No Value to send")
                                # WriteStream.write(["plainTextEdit_Log.setStyleSheet", "color: rgb(255, 0, 0);\n""font: 75 10pt \"MS Shell Dlg 2\";"])
                            if not all(c in string.hexdigits for c in currValue):
                                logger.write("In Line number " + str(RowIndex + 1) + " Value is not Hex.")
                                # WriteStream.write(["plainTextEdit_Log.setStyleSheet", "color: rgb(255, 0, 0);\n""font: 75 10pt \"MS Shell Dlg 2\";"])

                            return

                        board_file = json.load(open("Config\\Board_id_config.json", "r"))

                        keys = board_file.keys()
                        keys = list(keys)
                        for i in range(len(keys)):
                            key = str(keys[i])
                            if Board_ID == key:
                                v = (board_file[key]["Value"])
                                configurations["payload"]["Board_ID"] = v

                        configurations["payload"]["Reg_Address_Low"] = Reg_Address[2:][4:8]
                        configurations["payload"]["Reg_Address_High"] = Reg_Address[2:][:4]

                        currUnit = gui.ex.tableWidget_Registers_registers.cellWidget(RowIndex, 4).currentText()

                        if currUnit != "Hex":  # index 3 = Hex
                            if currUnit == "Bin":
                                # bin -> dec -> hex
                                currValue = str(hex(int(str(currValue), 2)))[2:]
                            elif currUnit == "Oct":
                                # Oct -> dec -> hex
                                currValue = str(hex(int(str(currValue), 8)))[2:]
                            elif currUnit == "Dec":
                                # Dec -> hex
                                currValue = str(hex(int(str(currValue), 10)))[2:]

                        currValue = currValue.zfill(8)

                        configurations["payload"]["Register_Value_1"] = currValue[4:8]
                        configurations["payload"]["Register_Value_2"] = currValue[:4]

                        packet = Packet(packet=configurations)

                        script_page.sock.send(packet=packet.packetBuilded)
                        print(packet.packetBuilded)
                        packetRecive = script_page.sock.receive()

                        time.sleep(0.1)

                except Exception as error:
                    logger.write("[buildPacket_write]" + "LAN" + str(error), status=False)
            elif gui.ex.pushButton_Home_Welcome_spi.isChecked():
                try:
                    write_message_spi_json = json.load(open("Files\\Messages\\write_SPI.json", "r"))
                    for RowIndex in sorted(self.updateCurrRow()):
                        Reg_Address = gui.ex.tableWidget_Registers_registers.item(RowIndex, 2).text()
                        currValue = gui.ex.tableWidget_Registers_registers.item(RowIndex, 5).text()

                        if Reg_Address == "" or currValue == "" or (Reg_Address[:2] != "0x"):

                            # Reg_Address[2:] -> 80000004
                            if Reg_Address == "" or (Reg_Address[:2] != "0x"):
                                logger.write("In Line number " + str(RowIndex + 1) + " No Address to send")
                                # WriteStream.write(["plainTextEdit_Log.setStyleSheet", "color: rgb(255, 0, 0);\n""font: 75 10pt \"MS Shell Dlg 2\";"])

                            if currValue == "":
                                logger.write("In Line number " + str(RowIndex + 1) + " No Value to send")
                                # WriteStream.write(["plainTextEdit_Log.setStyleSheet", "color: rgb(255, 0, 0);\n""font: 75 10pt \"MS Shell Dlg 2\";"])

                            return

                        currUnit = gui.ex.tableWidget_Registers_registers.cellWidget(RowIndex, 4).currentText()

                        if currUnit != "Hex":  # index 3 = Hex
                            if currUnit == "Bin":
                                # bin -> dec -> hex
                                currValue = str(hex(int(str(currValue), 2)))[2:]
                            elif currUnit == "Oct":
                                # Oct -> dec -> hex
                                currValue = str(hex(int(str(currValue), 8)))[2:]
                            elif currUnit == "Dec":
                                # Dec -> hex
                                currValue = str(hex(int(str(currValue), 10)))[2:]

                        currValue = currValue.zfill(4)

                        Reg_Address = Reg_Address[6:].zfill(4)
                        write_message_spi_json["header"]["Address"] = Reg_Address
                        write_message_spi_json["header"]["Value"] = currValue

                        header = write_message_spi_json["header"]
                        payload = write_message_spi_json["payload"]  # type Dict
                        footer = write_message_spi_json["footer"]

                        header_appand = ""  # type STR
                        payload_appand = ""  # type STR
                        footer_appand = ""  # type STR

                        header_appand = "".join([word for word in header.values()])
                        payload_appand = "".join([word for word in payload.values()])
                        footer_appand = "".join([word for word in footer.values()])

                        packet = str(header_appand) + str(payload_appand) + str(footer_appand)
                        logger.write("Packet=" + str(packet))
                        packet = bytearray.fromhex(str(packet))

                        print("packet is" + str(packet))

                        spi.openLink()
                        if spi.connect:
                            ft4222.FT4222.spiMaster_SingleReadWrite(spi.device, packet, True)
                            logger.write("Packet was sent successfully")
                        else:
                            logger.write("Error Init SPI")

                except Exception as error:
                    logger.write("[buildPacket_write]" + "SPI" + str(error), status=False)
        except Exception as error:
            logger.write("[buildPacket_write] error: " + str(error), status=False)

    def buildPacket_read(self):
        try:
            if gui.ex.pushButton_Home_Welcome_lan.isChecked():
                try:
                    if script_page.sock is None:
                        script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()),
                                                ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                                port=int(gui.ex.lineEdit_Configuration_computer_port.text()))

                    for RowIndex in sorted(self.updateCurrRow()):

                        configurations = json.load(open("Files\\Messages\\Packet_GP_Get_REG.json", "r"))
                        Board_ID = gui.ex.tableWidget_Registers_registers.cellWidget(RowIndex, 6).currentText()
                        Reg_Address = gui.ex.tableWidget_Registers_registers.item(RowIndex, 2).text()  # 0x80000004

                        if Board_ID == "" or Reg_Address == "":

                            if Board_ID == "":
                                logger.write("In Line number " + str(RowIndex + 1) + " No board id to read from")

                            # Reg_Address[2:] -> 80000004
                            if Reg_Address == "":
                                logger.write("In Line number " + str(RowIndex + 1) + " No Address to read from")

                            return

                        board_file = json.load(open("Config\\Board_id_config.json", "r"))
                        keys = board_file.keys()
                        keys = list(keys)
                        for i in range(len(keys)):
                            key = str(keys[i])
                            if Board_ID == key:
                                v = (board_file[key]["Value"])
                                configurations["payload"]["Board_ID"] = v

                        # Reg_Address[2:] -> 80000004
                        configurations["payload"]["Reg_Address_Low"] = Reg_Address[2:][4:8]
                        configurations["payload"]["Reg_Address_High"] = Reg_Address[2:][:4]

                        # sending the Get message

                        packet = Packet(packet=configurations)

                        script_page.sock.send(packet=packet.packetBuilded)
                        # recive message

                        packetRecive = script_page.sock.receive()
                        # put the value in the GUI
                        try:
                            value = packetRecive[60:68]
                            value = hex(int(value[4:8] + value[:4], 16))[2:]

                            print("value is : " + str(value))

                            item = QtWidgets.QTableWidgetItem(str(value).upper())
                            item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
                            WriteStream.write(["tableWidget_Registers_registers.setItem", RowIndex, 5, item])
                            item.setForeground(QBrush(QColor(255, 255, 255)))
                            gui.ex.tableWidget_Registers_registers.cellWidget(RowIndex, 4).setCurrentIndex(3)

                        except Exception as error:
                            item = QtWidgets.QTableWidgetItem("Error")
                            item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
                            WriteStream.write(["tableWidget_Registers_registers.setItem", RowIndex, 5, item])
                            item.setForeground(QBrush(QColor(255, 0, 0)))

                except Exception as error:
                    logger.write("[buildPacket_read]" + "LAN" + str(error), status=False)

            elif gui.ex.pushButton_Home_Welcome_spi.isChecked():
                try:
                    read_message_spi_json = json.load(open("Files\\Messages\\read_SPI.json", "r"))
                    for RowIndex in sorted(self.updateCurrRow()):
                        Reg_Address = gui.ex.tableWidget_Registers_registers.item(RowIndex, 2).text()

                        if Reg_Address == "" or (Reg_Address[:2] != "0x"):
                            logger.write("In Line number " + str(RowIndex + 1) + " No Address to send")
                            WriteStream.write(["plainTextEdit_Log.setStyleSheet", "color: rgb(255, 0, 0);\n""font: 75 10pt \"MS Shell Dlg 2\";"])

                        Reg_Address = Reg_Address[6:].zfill(4)
                        read_message_spi_json["header"]["Address"] = Reg_Address

                        header = read_message_spi_json["header"]
                        payload = read_message_spi_json["payload"]  # type Dict
                        footer = read_message_spi_json["footer"]

                        header_appand = ""  # type STR
                        payload_appand = ""  # type STR
                        footer_appand = ""  # type STR

                        header_appand = "".join([word for word in header.values()])
                        payload_appand = "".join([word for word in payload.values()])
                        footer_appand = "".join([word for word in footer.values()])

                        packet = str(header_appand) + str(payload_appand) + str(footer_appand)

                        packet = bytearray.fromhex(str(packet))

                        print("packet is" + str(packet))
                        spi.openLink()
                        if spi.connect:
                            ans = ft4222.FT4222.spiMaster_SingleReadWrite(spi.device, packet, True)
                            msg = ""
                            for c in ans:
                                msg += str(hex(c)).replace("0x", "").zfill(2)

                            logger.write("Recive = " + str(msg))
                        else:
                            logger.write("Error Init SPI")
                        value = msg[10:14]
                        value = hex(int(value, 16))[2:]
                        print(value)
                        print("value is : " + str(value))

                        item = QtWidgets.QTableWidgetItem(str(value).upper())
                        item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
                        WriteStream.write(["tableWidget_Registers_registers.setItem", RowIndex, 5, item])
                        item.setForeground(QBrush(QColor(255, 255, 255)))
                        gui.ex.tableWidget_Registers_registers.cellWidget(RowIndex, 4).setCurrentIndex(3)

                except Exception as error:
                    logger.write("[buildPacket_read]" + "SPI" + str(error), status=False)
        except Exception as error:
            logger.write("[buildPacket_read] error: " + str(error), status=False)


class Test_Points_Page:
    def __init__(self):
        WriteStream.write(["test_points_send_request_btn.setHidden", True])
        WriteStream.write(["test_points_stop_send_btn.setHidden", True])

        try:
            for name in os.listdir("Files\\Packet_T"):
                if ".json" in name:
                    WriteStream.write(["test_points_upload_workplan_combobox.addItem", str(name).replace(".json", "")])
            WriteStream.write(["test_points_upload_workplan_combobox.setCurrentIndex", -1])
        except Exception as error:
            logger.write("[TP_set_packet_load_work_plan] Error: " + str('{err}'.format(err=error)), status=False)

        self.configurations = {
            "work_plan": "",
            "json_packet_send": {},
            "json_packet_replay": {},
            "x": [],
            "y": [],
            "y_real": [],
            "y_imag": [],
            "queue_packets_received": Queue(),
            "stopPacket_sended": True,
            "plt": None,
            "plt2": None,
            "plt3": None,
            "X_start_1": 0,
            "X_end_1": 0,
            "Y_start_1": 0,
            "Y_end_1": 0,
            "X_start_2": 0,
            "X_end_2": 0,
            "Y_start_2": 0,
            "Y_end_2": 0,
            "Y_start_3": 0,
            "Y_end_3": 0,
            "graph_type_index": 0,
            "data_type_index": 0,
            "record_index": -1,
            "record_max": 0,
            "channel_index": -1,
            "channel_max": 0,
            "lineStyle_isChecked": True,
            "saveRange_isChecked": False,
            "applyToEverything_isChecked": False
        }

        gui.ex.graphicsView_1.showGrid(x=True, y=True)
        gui.ex.graphicsView_2.showGrid(x=True, y=True)
        gui.ex.graphicsView_3.showGrid(x=True, y=True)

        WriteStream.write(["graphicsView_1.setHidden", True])
        WriteStream.write(["graphicsView_2.setHidden", True])
        WriteStream.write(["graphicsView_3.setHidden", True])

        gui.ex.graphicsView_1.setBackground((210, 210, 210))
        gui.ex.graphicsView_2.setBackground((210, 210, 210))
        gui.ex.graphicsView_3.setBackground((210, 210, 210))

        gui.ex.test_points_configurations_groupbox_record_combobox.currentIndexChanged.connect(
            lambda: threading.Thread(target=self.graphs_choose_record).start())

        gui.ex.test_points_configurations_groupbox_channel_combobox.currentIndexChanged.connect(
            lambda: threading.Thread(target=self.show).start())
        gui.ex.test_points_configurations_groupbox_graph_type_combobox.currentIndexChanged.connect(
            lambda: threading.Thread(target=self.show).start())
        gui.ex.test_points_configurations_groupbox_data_type_combobox.currentIndexChanged.connect(
            lambda: threading.Thread(target=self.show).start())

        gui.ex.test_points_upload_workplan_combobox.blockSignals(True)
        gui.ex.test_points_upload_workplan_combobox.currentIndexChanged.connect(
            lambda: threading.Thread(target=self.load_TP).start())

        gui.ex.test_points_send_packet_btn.clicked.connect(
            lambda: threading.Thread(target=self.send_packet).start())
        gui.ex.test_points_send_request_btn.clicked.connect(
            lambda: threading.Thread(target=self.send_request).start())

        self.vb = gui.ex.graphicsView_1.plotItem.vb
        self.proxy = pyqtgraph.SignalProxy(gui.ex.graphicsView_1.scene().sigMouseMoved, rateLimit=60,
                                           slot=self.mouseMoved_1)

        self.vb2 = gui.ex.graphicsView_1.plotItem.vb
        self.proxy2 = pyqtgraph.SignalProxy(gui.ex.graphicsView_2.scene().sigMouseMoved, rateLimit=60,
                                            slot=self.mouseMoved_2)

        gui.ex.test_points_configurations_groupbox_line_graph_checkbox.stateChanged.connect(
            lambda: threading.Thread(target=self.updatePenStyle).start())
        gui.ex.test_points_range_config_groupbox_save_range_checkbox.stateChanged.connect(
            lambda: threading.Thread(target=self.updateSaveRange).start())
        gui.ex.test_points_range_config_groupbox_apply_to_everything_checkbox.stateChanged.connect(
            lambda: threading.Thread(target=self.updateApplyToEverything).start())

        WriteStream.write(["test_points_send_packet_btn.setEnabled", False])
        WriteStream.write(["test_points_configurations_groupbox.setEnabled", False])

        gui.ex.graphicsView_1.scene().sigMouseMoved.connect(self.saveRange_1)
        gui.ex.test_points_range_config_groupbox_reset_range_btn.clicked.connect(lambda: threading.Thread(target=self.resetRange).start())

        gui.ex.test_points_configurations_groupbox_reset_btn.clicked.connect(
            lambda: threading.Thread(target=self.resetGraph).start())

        gui.ex.test_points_update_set_mess_btn.clicked.connect(lambda: threading.Thread(target=self.Update_Set_Message).start())

        threading.Thread(target=self.openBlockSignals).start()

    def Update_Set_Message(self):
        try:
            set_message = {
                "header": {
                    "Packet_size_LSB": "0030",
                    "Packet_size_MSB": "0000",
                    "WF_GUI_ID": "0000",
                    "Opcode": "0014",
                    "Packet_number": "0000",
                    "Source_Destination": "1311",
                    "User_define_#1": "0000",
                    "User_define_#2": "0000",
                    "User_define_#3": "0000",
                    "User_define_#4": "0000",
                    "User_define_#5": "0000",
                    "User_define_#6": "0000",
                    "User_define_#7": "0000",
                    "User_define_#8": "0000"
                },
                "payload": {
                    "Test_Point_Index": str(gui.ex.test_points_index.text()).zfill(4),
                    "Test_Point_Type": str(gui.ex.test_points_type.text()).zfill(4),
                    "Test_Point_Mode": str(gui.ex.test_points_mode.text()).zfill(4),
                    "Active Channels": str(gui.ex.active_channels.text()).zfill(4),
                    "Test Point Length in Symbols": str(gui.ex.test_points_length_symbols.text()),
                    "Number_Of_Records": str(gui.ex.number_of_records_set_mess.text()).zfill(4),
                    "Records Number Regex": str(gui.ex._record_num_regex_set_mes.text()).zfill(4),
                    "Reserved": "0000"
                }, ""
                   "footer": {
                    "status": "0000",
                    "footer": "5A7E"
                }
            }
            print(gui.ex.number_of_records_set_mess.text())

            with open("Files\\Packet_T\\" + str(gui.ex.comboBox_TestPoint_load.currentText()) + "json", 'w') as fp:
                json.dump(set_message, fp, indent=2)
            self.load_TP()
        except Exception as error:
            logger.write("[Update_Set_Message] error: " + str(error), status=False)

    def openBlockSignals(self):
        try:
            time.sleep(1)
            gui.ex.test_points_upload_workplan_combobox.blockSignals(False)
        except Exception as error:
            logger.write("[openBlockSignals] error: " + str(error), status=False)

    def load_TP(self):
        try:
            # this function only load the json file of set message
            if len(gui.ex.test_points_upload_workplan_combobox.currentText()) > 0:
                self.configurations["work_plan"] = str(gui.ex.test_points_upload_workplan_combobox.currentText())
            else:
                return

            jsonFile = open("Files\\Packet_T/" + str(self.configurations["work_plan"]) + ".json", "r")  # type of TextIOWrapper
            self.configurations["json_packet_send"] = json.load(jsonFile)  # type of json

            WriteStream.write(["test_points_update_set_msg_groupbox_test_point_index_line_edit.setText", str(int(self.configurations["json_packet_send"]["payload"]["Test_Point_Index"], 16))])
            WriteStream.write(["test_points_update_set_msg_groupbox_test_point_type_line_edit.setText", str(int(self.configurations["json_packet_send"]["payload"]["Test_Point_Type"], 16))])
            WriteStream.write(["test_points_update_set_msg_groupbox_test_point_mode_line_edit.setText", str(int(self.configurations["json_packet_send"]["payload"]["Test_Point_Mode"], 16))])
            WriteStream.write(["test_points_update_set_msg_groupbox_active_channels_line_edit.setText", str(int(self.configurations["json_packet_send"]["payload"]["Active Channels"], 16))])
            WriteStream.write(["test_points_update_set_msg_groupbox_test_points_len_line_edit.setText", str(self.configurations["json_packet_send"]["payload"]["Test Point Length in Symbols"])])
            WriteStream.write(["test_points_update_set_msg_groupbox_num_of_records_line_edit.setText", str(int(self.configurations["json_packet_send"]["payload"]["Number_Of_Records"], 16))])
            WriteStream.write(["test_points_update_set_msg_groupbox_record_num_regex_line_edit.setText", str(int(self.configurations["json_packet_send"]["payload"]["Records Number Regex"], 16))])

            WriteStream.write(["test_points_send_packet_btn.setEnabled", True])
            WriteStream.write(["test_points_configurations_groupbox.setEnabled", True])
        except Exception as error:
            logger.write("[load_TP] error: " + str(error), status=False)

    def send_packet(self):
        try:
            # this function send the set message of the test points
            if gui.ex.test_points_upload_workplan_combobox.currentIndex() == -1:
                logger.write("No packet was selected for sending")
                return False
            try:
                WriteStream.write(["test_points_send_request_btn.setHidden", True])
                WriteStream.write(["test_points_stop_send_btn.setHidden", True])
                WriteStream.write(["test_points_send_packet_btn.setEnabled", False])

                if script_page.sock is None:
                    script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()), ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()), port=int(gui.ex.lineEdit_Configuration_computer_port.text()))

                if script_page.sock.isConnected:
                    packet = Packet(packet=self.configurations["json_packet_send"])
                    script_page.sock.send(packet.packetBuilded)
                    receive = script_page.sock.receive_TP()
                    print("receive = " + str(receive))
                    if packet.payload["Test_Point_Mode"] == "0000":  # OD
                        WriteStream.write(["test_points_send_request_btn.setEnabled", True])
                        WriteStream.write(["test_points_send_request_btn.setHidden", False])
                    elif packet.payload["Test_Point_Mode"] == "0001":  # Continually Mode
                        WriteStream.write(["test_points_send_request_btn.setHidden", True])
                        WriteStream.write(["test_points_stop_send_btn.setEnabled", True])
                        WriteStream.write(["test_points_stop_send_btn.setHidden", False])
                        self.continuallyMode()
                    return True
                else:
                    logger.write("Error: " + str(script_page.sock.error))
                    return False
            except Exception as error:
                logger.write("[send_packet] Error: " + str('{err}'.format(err=error)), status=False)
        except Exception as error:
            logger.write("[send_packet] error: " + str(error), status=False)

    def send_request(self):
        # this function send the request message
        try:
            WriteStream.write(["test_points_send_request_btn.setEnabled", True])

            if script_page.sock is None:
                script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()), ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()), port=int(gui.ex.lineEdit_Configuration_computer_port.text()))

            if script_page.sock.isConnected:
                jsonData_Request = {
                    "header": {
                        "Packet_size_LSB": "0030",
                        "Packet_size_MSB": "0000",
                        "Reserved": "0000",
                        "Opcode": "0015",
                        "Packet_number": "0000",
                        "Source_Destination": "1311",
                        "User_define_#1": "0000",
                        "User_define_#2": "0000",
                        "User_define_#3": "0000",
                        "User_define_#4": "0000",
                        "User_define_#5": "0000",
                        "User_define_#6": "0000",
                        "User_define_#7": "0000",
                        "User_define_#8": "0000"
                    },
                    "payload": {
                        "Test_Point_Index": "0000",
                        "Req_Test_Point_ID": "0000",
                        "Reserved_1": "0000",
                        "Reserved_2": "0000",
                        "Reserved_3": "0000",
                        "Reserved_4": "0000",
                        "Reserved_5": "0000",
                        "Reserved_6": "0000"
                    }, ""
                       "footer": {
                        "status": "0000",
                        "footer": "5A7E"
                    }
                }

                packet = Packet(packet=jsonData_Request)
                script_page.sock.send(packet.packetBuilded)
                receive = script_page.sock.receive_TP()
                print("receive = " + str(receive))

                if len(receive[0]) < 200:
                    print("############################################ error #####################################################")
                    receive[0] = receive[1]

                if len(receive) > 0:
                    logger.write("[send_request] received packet")
                    self.replay(packet=receive[0])
                    self.updateChoose()
                    self.show()

                    WriteStream.write(["test_points_send_packet_btn.setEnabled", True])

                    return True

                else:
                    print("error!!! receive = " + str(receive))
                    return False
            else:
                logger.write("Error: " + str(script_page.sock.error))
                WriteStream.write(["test_points_send_packet_btn.setEnabled", True])
                return False

        except Exception as error:
            logger.write("[send_request] Error: " + str('{err}'.format(err=error)), status=False)

    def replay(self, packet):
        # this
        try:
            msg = packet
            pointerMSG = 0

            self.configurations["json_packet_replay"] = {
                "Header": {
                    "Packet_size_LSB": msg[pointerMSG:pointerMSG + 4],
                    "Packet_size_MSB": msg[pointerMSG + 4:pointerMSG + 8],
                    "WF GUI ID": msg[pointerMSG + 8:pointerMSG + 12],
                    "Opcode": msg[pointerMSG + 12:pointerMSG + 16],
                    "Packet_number": msg[pointerMSG + 16:pointerMSG + 20],
                    "Source_Destination": msg[pointerMSG + 20:pointerMSG + 24],
                    "User_define_#1": msg[pointerMSG + 24:pointerMSG + 28],
                    "User_define_#2": msg[pointerMSG + 28:pointerMSG + 32],
                    "User_define_#3": msg[pointerMSG + 32:pointerMSG + 36],
                    "User_define_#4": msg[pointerMSG + 36:pointerMSG + 40],
                    "User_define_#5": msg[pointerMSG + 40:pointerMSG + 44],
                    "User_define_#6": msg[pointerMSG + 44:pointerMSG + 48],
                    "User_define_#7": msg[pointerMSG + 48:pointerMSG + 52],
                    "User_define_#8": msg[pointerMSG + 52:pointerMSG + 56]
                },
                "Header_TP": {
                    "Test_Point_index": msg[pointerMSG + 56:pointerMSG + 60],
                    "Test_Point_Type": msg[pointerMSG + 60:pointerMSG + 64],
                    "Test_Point_Mode": msg[pointerMSG + 64:pointerMSG + 68],
                    "Number_Of_Records_per_packet": msg[pointerMSG + 68:pointerMSG + 72]
                }
            }

            pointerMSG += 72

            for curr_Record in range(1, int(self.configurations["json_packet_replay"]["Header_TP"]["Number_Of_Records_per_packet"], 16) + 1, 1):
                self.configurations["json_packet_replay"]["Record_Info_" + str(curr_Record)] = {
                    "Record_Index": msg[pointerMSG:pointerMSG + 4],
                    "Number_Of_Active_Ch_per_record_per_packet": msg[pointerMSG + 4:pointerMSG + 8]
                }
                pointerMSG += 8

                for curr_Ch_Record in range(1, int(self.configurations["json_packet_replay"]["Record_Info_" + str(curr_Record)]["Number_Of_Active_Ch_per_record_per_packet"], 16) + 1, 1):
                    self.configurations["json_packet_replay"]["Record_Info_" + str(curr_Record)]["Record_Info_per_channel_" + str(curr_Ch_Record)] = {
                        "Channel ID": msg[pointerMSG:pointerMSG + 4],
                        "TBD_1": msg[pointerMSG + 4:pointerMSG + 8],
                        "TBD_2": msg[pointerMSG + 8:pointerMSG + 12],
                        "TBD_3": msg[pointerMSG + 12:pointerMSG + 16],
                        "TBD_4": msg[pointerMSG + 16:pointerMSG + 20],
                        "TBD_5": msg[pointerMSG + 20:pointerMSG + 24],
                        "Channel_data_size": msg[pointerMSG + 24:pointerMSG + 28],
                        "DATA_Info": {}
                    }

                    pointerMSG += 28

                    for i in range(1, int(int(self.configurations["json_packet_replay"]["Record_Info_" + str(curr_Record)]["Record_Info_per_channel_" + str(curr_Ch_Record)]["Channel_data_size"], 16) / 2) + 1, 1):
                        self.configurations["json_packet_replay"]["Record_Info_" + str(curr_Record)]["Record_Info_per_channel_" + str(curr_Ch_Record)]["DATA_Info"]["DATA_Info_" + str(i)] = msg[pointerMSG:pointerMSG + 4]
                        pointerMSG += 4

            self.configurations["json_packet_replay"]["Footer_TP"] = {
                "Last_Fragment": msg[pointerMSG:pointerMSG + 4]
            }

            pointerMSG += 4

            self.configurations["json_packet_replay"]["Footer"] = {
                "status": msg[pointerMSG:pointerMSG + 4],
                "footer": msg[pointerMSG + 4:pointerMSG + 8]
            }

            with open("Files\\TP_replay_WBN.json", 'w') as fp:
                json.dump(self.configurations["json_packet_replay"], fp, indent=2)
        except Exception as error:
            logger.write("[replay] Error: " + str(error), status=False)

    def updateChoose(self):
        try:
            if len(self.configurations["json_packet_replay"]) == 0:
                WriteStream.write(["test_points_configurations_groupbox_record_combobox.clear()"])
                return

            counter = -1
            currChoose = []
            newChoose = []

            for i in range(0, gui.ex.test_points_configurations_groupbox_record_combobox.count(), 1):
                currChoose.append(gui.ex.test_points_configurations_groupbox_record_combobox.itemText(i))

            for i in range(1, int(self.configurations["json_packet_replay"]["Header_TP"]["Number_Of_Records_per_packet"], 16) + 1, 1):
                newChoose.append(str(int(self.configurations["json_packet_replay"]["Record_Info_" + str(i)]["Record_Index"], 16)))
                counter += 1

            if currChoose != newChoose:
                WriteStream.write(["test_points_configurations_groupbox_record_combobox.clear()"])
                for i in range(1, int(self.configurations["json_packet_replay"]["Header_TP"]["Number_Of_Records_per_packet"], 16) + 1, 1):
                    WriteStream.write(["test_points_configurations_groupbox_record_combobox.addItem", str(int(self.configurations["json_packet_replay"]["Record_Info_" + str(i)]["Record_Index"], 16))])

                # update configuration
                self.configurations["record_max"] = counter
        except Exception as error:
            logger.write("[updateChoose] error: " + str(error), status=False)

    def show(self):
        try:
            currRecord = int(gui.ex.test_points_configurations_groupbox_record_combobox.currentText())
            currChannel = int(gui.ex.test_points_configurations_groupbox_channel_combobox.currentText())
            graph_Type = gui.ex.comboBox_TP_Graphs_Graph_Type_0.currentText()
            data_Type = gui.ex.comboBox_TP_Graphs_Data_Type_0.currentText()

            title = graph_Type
            if title == "Data VS Data":
                title_x = "Data"
                title_y = "Data"
            else:
                title_x = "Time"
                title_y = "Data"

            data_info = {}

            for field in self.configurations["json_packet_replay"]:  # field = Record_Info_1
                if "Record_Info" in field:
                    if currRecord == int(self.configurations["json_packet_replay"][str(field)]["Record_Index"], 16):
                        for subField in self.configurations["json_packet_replay"][str(field)]:  # subField = Record_Info_per_channel_1
                            if "Record_Info_per_channel" in subField:
                                if str(subField) == "Record_Info_per_channel_" + str(currChannel):
                                    Channel_data_size = int(int(self.configurations["json_packet_replay"][str(field)][str(subField)]["Channel_data_size"], 16) / 2)
                                    data = self.configurations["json_packet_replay"][str(field)][str(subField)]["DATA_Info"]

                                    # print("Channel_data_size = " + str(Channel_data_size))
                                    # print("data = " + str(data))

                                    counter = 1

                                    for i in range(0, Channel_data_size, 1):
                                        data_info["DATA_Info_" + str(counter)] = data["DATA_Info_" + str(counter)]
                                        counter += 1

            data_info = [action.twos_complement(hexstr=i, bits=16) for i in data_info.values()]
            twoGraph = False
            constellation = False

            if graph_Type == "Data VS Time" and data_Type == "16bits":
                self.configurations["y"] = data_info
            elif graph_Type == "Data VS Time" and data_Type == "Complex":
                twoGraph = True
                self.configurations["y_real"] = data_info[::2]
                self.configurations["y_imag"] = data_info[1::2]
            elif graph_Type == "Data VS Data":
                self.configurations["y"] = data_info[1::2]

            if graph_Type != "Data VS Data":
                self.configurations["x"] = []
                if twoGraph:
                    for i in range(1, len(self.configurations["y_real"]) + 1, 1):
                        self.configurations["x"].append(i)
                else:
                    for i in range(1, len(self.configurations["y"]) + 1, 1):
                        self.configurations["x"].append(i)
            else:  # Data VS Data
                self.configurations["x"] = data_info[::2]

            if (graph_Type == "Data VS Time" and (data_Type == "16bits" or data_Type == "Complex")) or (graph_Type == "Data VS Data" and data_Type == "Complex"):
                if twoGraph:
                    for i in [1, 2]:
                        eval("gui.ex.graphicsView_" + str(i) + ".setHidden(False)")
                    for i in [3]:
                        eval("gui.ex.graphicsView_" + str(i) + ".setHidden(True)")

                    self.buildGraph(title.replace("Data", "Data (real)"), title_x, title_y, self.configurations["x"], self.configurations["y_real"])
                    self.buildGraph(title.replace("Data", "Data (imag)"), title_x, title_y, self.configurations["x"], self.configurations["y_imag"], graphObj="graphicsView_2")

                else:
                    if graph_Type == "Data VS Data" and data_Type == "Complex":  # constellation
                        for i in [3]:
                            eval("gui.ex.graphicsView_" + str(i) + ".setHidden(False)")
                        for i in [1, 2]:
                            eval("gui.ex.graphicsView_" + str(i) + ".setHidden(True)")

                        self.buildGraph(title, title_x, title_y, self.configurations["x"], self.configurations["y"], graphObj="constellation")
                    else:
                        for i in [1]:
                            eval("gui.ex.graphicsView_" + str(i) + ".setHidden(False)")
                        for i in [2, 3]:
                            eval("gui.ex.graphicsView_" + str(i) + ".setHidden(True)")

                        self.buildGraph(title, title_x, title_y, self.configurations["x"], self.configurations["y"])
            else:
                print("No Graph")
        except Exception as error:
            logger.write("[show]" + str(error), status=False)

    def buildGraph(self, title, title_x, title_y, x, y, graphObj="graphicsView_1"):
        try:
            if graphObj == "constellation":
                graphObj = "graphicsView_3"

            WriteStream.write([str(graphObj) + ".setLabel", "bottom", title_x])
            WriteStream.write([str(graphObj) + ".setLabel", "left", title_y])
            WriteStream.write([str(graphObj) + ".setTitle", title])

            eval("gui.ex." + str(graphObj) + ".showGrid(x=True, y=True)")

            lineGraph = gui.ex.test_points_configurations_groupbox_line_graph_checkbox.isChecked()

            if not lineGraph:
                pen = None
            else:
                pen = pyqtgraph.mkPen(color=QColor(255, 127, 14), width=1)

            if graphObj == "graphicsView_1":
                try:
                    if not self.configurations["saveRange_isChecked"] or (title_x == "Data" and title_y == "Data"):
                        maxX = max(x)
                        self.configurations["X_start_1"] = min(x) - int(maxX * 0.03)
                        self.configurations["X_end_1"] = maxX + int(maxX * 0.03)

                        maxY = max(y)
                        self.configurations["Y_start_1"] = min(y) - int(maxY * 0.07)
                        self.configurations["Y_end_1"] = maxY + int(maxY * 0.07)

                    gui.ex.graphicsView_1.setXRange(self.configurations["X_start_1"], self.configurations["X_end_1"], padding=0)
                    gui.ex.graphicsView_1.setYRange(self.configurations["Y_start_1"], self.configurations["Y_end_1"], padding=0)

                    if self.configurations["plt"] is None:
                        self.configurations["plt"] = gui.ex.graphicsView_1.plot(x, y, name="plot", pen=pen, symbol='o', symbolSize=0, symbolBrush=(QColor(31, 119, 180)))
                    else:
                        self.configurations["plt"].setData(x, y)
                except Exception as error:
                    logger.write("[buildGraph] error = " + str(error), status=False)

            elif graphObj == "graphicsView_3":  # constellation
                try:
                    maxX = max(x)
                    self.configurations["X_start_3"] = min(x) - int(maxX * 0.03)
                    self.configurations["X_end_3"] = maxX + int(maxX * 0.03)

                    maxY = max(y)
                    self.configurations["Y_start_3"] = min(y) - int(maxY * 0.07)
                    self.configurations["Y_end_3"] = maxY + int(maxY * 0.07)

                    gui.ex.graphicsView_3.setXRange(self.configurations["X_start_3"], self.configurations["X_end_3"], padding=0)
                    gui.ex.graphicsView_3.setYRange(self.configurations["Y_start_3"], self.configurations["Y_end_3"], padding=0)

                    if self.configurations["plt3"] is None:
                        self.configurations["plt3"] = gui.ex.graphicsView_3.plot(x, y, name="plot", pen=None, symbol='o', symbolSize=0, symbolBrush=(QColor(31, 119, 180)))
                    else:
                        self.configurations["plt3"].setData(x, y)
                except Exception as error:
                    logger.write("[buildGraph] error = " + str(error), status=False)

            else:
                try:
                    if not self.configurations["saveRange_isChecked"]:
                        maxX = max(x)
                        self.configurations["X_start_2"] = min(x) - int(maxX * 0.03)
                        self.configurations["X_end_2"] = maxX + int(maxX * 0.03)

                        maxY = max(y)
                        self.configurations["Y_start_2"] = min(y) - int(maxY * 0.07)
                        self.configurations["Y_end_2"] = maxY + int(maxY * 0.07)

                    gui.ex.graphicsView_2.setXRange(self.configurations["X_start_2"], self.configurations["X_end_2"], padding=0)
                    gui.ex.graphicsView_2.setYRange(self.configurations["Y_start_2"], self.configurations["Y_end_2"], padding=0)

                    if self.configurations["plt2"] is None:
                        self.configurations["plt2"] = gui.ex.graphicsView_2.plot(x, y, name="plot", pen=pen, symbol='o', symbolSize=0, symbolBrush=(QColor(31, 119, 180)))
                    else:
                        self.configurations["plt2"].setData(x, y)

                except Exception as error:
                    logger.write("[buildGraph] error = " + str(error), status=False)
        except Exception as error:
            logger.write("[buildGraph] error: " + str(error), status=False)

    def graphs_choose_record(self):  # to update *Graphs_Channel*
        try:
            record = gui.ex.test_points_configurations_groupbox_record_combobox.currentIndex() + 1

            gui.ex.test_points_configurations_groupbox_channel_combobox.blockSignals(True)
            WriteStream.write(["test_points_configurations_groupbox_channel_combobox.clear()"])  # signal show (off) ^
            time.sleep(0.1)
            gui.ex.test_points_configurations_groupbox_channel_combobox.blockSignals(False)

            counter = -1
            for i in range(1, int(self.configurations["json_packet_replay"]["Record_Info_" + str(record)]["Number_Of_Active_Ch_per_record_per_packet"], 16) + 1, 1):
                WriteStream.write(["test_points_configurations_groupbox_channel_combobox.addItem", str(i)])
                counter += 1
            # # update configuration
            # self.configurations["channel_max"] = counter
        except Exception as error:
            logger.write("[graphs_choose_record] error: " + str(error), status=False)

    def updatePenStyle(self):
        try:
            if eval("gui.ex.test_points_configurations_groupbox_line_graph_checkbox.isChecked()"):
                if self.configurations["plt"] is not None:
                    self.configurations["plt"].setPen(pyqtgraph.mkPen(color=QColor(255, 127, 14), width=1))
                if self.configurations["plt2"] is not None:
                    self.configurations["plt2"].setPen(pyqtgraph.mkPen(color=QColor(255, 127, 14), width=1))
            else:
                if self.configurations["plt"] is not None:
                    self.configurations["plt"].setPen(None)
                if self.configurations["plt2"] is not None:
                    self.configurations["plt2"].setPen(None)
        except Exception as error:
            logger.write("[updatePenStyle] error: " + str(error), status=False)

    def updateSaveRange(self):
        try:
            self.configurations["saveRange_isChecked"] = gui.ex.checkBox_TP_Graphs_saveRange_0.isChecked()
        except Exception as error:
            logger.write("[updateSaveRange] error: " + str(error), status=False)

    def updateApplyToEverything(self):
        try:
            self.configurations["applyToEverything_isChecked"] = gui.ex.checkBox_TP_Graphs_applyToEverything_0.isChecked()
        except Exception as error:
            logger.write("[updateApplyToEverything] error: " + str(error), status=False)

    def saveRange_1(self):
        try:
            coords = gui.ex.graphicsView_1.visibleRange().getCoords()
            self.configurations["X_start_1"] = coords[0]
            self.configurations["X_end_1"] = coords[2]
            self.configurations["Y_start_1"] = coords[1]
            self.configurations["Y_end_1"] = coords[3]

            if self.configurations["applyToEverything_isChecked"]:
                self.configurations["X_start_2"] = self.configurations["X_start_1"]
                self.configurations["X_end_2"] = self.configurations["X_end_1"]
                self.configurations["Y_start_2"] = self.configurations["Y_start_1"]
                self.configurations["Y_end_2"] = self.configurations["Y_end_1"]

                gui.ex.graphicsView_2.setXRange(self.configurations["X_start_2"], self.configurations["X_end_2"], padding=0)
                gui.ex.graphicsView_2.setYRange(self.configurations["Y_start_2"], self.configurations["Y_end_2"], padding=0)
        except Exception as error:
            logger.write("[saveRange_1] error: " + str(error), status=False)

    def resetRange(self):
        try:
            maxX = max(self.configurations["x"])
            self.configurations["X_start_1"] = min(self.configurations["x"]) - int(maxX * 0.03)
            self.configurations["X_end_1"] = maxX + int(maxX * 0.03)

            maxY = max(self.configurations["y"])
            self.configurations["Y_start_1"] = min(self.configurations["y"]) - int(maxY * 0.07)
            self.configurations["Y_end_1"] = maxY + int(maxY * 0.07)

            gui.ex.graphicsView_1.setXRange(self.configurations["X_start_1"], self.configurations["X_end_1"], padding=0)
            gui.ex.graphicsView_1.setYRange(self.configurations["Y_start_1"], self.configurations["Y_end_1"], padding=0)

            ######

            maxX = max(self.configurations["x"])
            self.configurations["X_start_2"] = min(self.configurations["x"]) - int(maxX * 0.03)
            self.configurations["X_end_2"] = maxX + int(maxX * 0.03)

            maxY = max(self.configurations["y"])
            self.configurations["Y_start_2"] = min(self.configurations["y"]) - int(maxY * 0.07)
            self.configurations["Y_end_2"] = maxY + int(maxY * 0.07)

            gui.ex.graphicsView_2.setXRange(self.configurations["X_start_2"], self.configurations["X_end_2"], padding=0)
            gui.ex.graphicsView_2.setYRange(self.configurations["Y_start_2"], self.configurations["Y_end_2"], padding=0)
        except Exception as error:
            logger.write("[resetRange] error: " + str(error), status=False)

    def resetGraph(self):
        try:
            self.configurations["x"] = []

            self.configurations["plt"].setData([], [])
            self.configurations["plt2"].setData([], [])
        except Exception as error:
            logger.write("[resetGraph] error: " + str('{err}'.format(err=error)), status=False)

    def mouseMoved_1(self, evt):
        try:
            if self.configurations["plt"] is None or len(self.configurations["x"]) == 0:
                return

            # print("evt = " + str(evt))
            lastcycle = False
            pos = evt[0]
            # print("pos = " + str(pos))
            if gui.ex.graphicsView_1.sceneBoundingRect().contains(pos):
                mousePoint = self.vb.mapSceneToView(pos)
                # print("mousePoint = " + str(mousePoint))
                closest = self.GetClose(TP_index=0, x=float(mousePoint.x()), y=float(mousePoint.y()))
                # print("closest = " + str(closest))
                if not closest == lastcycle:
                    w = gui.ex.graphicsView_1.scene().views()[0]
                    # print("w = " + str(w))
                    pt = w.mapToGlobal(QtCore.QPoint(self.configurations["plt"].mapToDevice(pyqtgraph.Point(closest[0])).x(), self.configurations["plt"].mapToDevice(pyqtgraph.Point(closest[1])).y()))
                    # print("pt = " + str(pt))
                    lastcycle = closest

                    QtWidgets.QToolTip.showText(pt, "(" + str(lastcycle).replace("[", "").replace("]", "") + ")", gui.ex.graphicsView_1)
                    gui.ex.graphicsView_1.setStyleSheet('''QToolTip {
                                              background-color: #8ad4ff;
                                              color: black;
                                              border: #8ad4ff solid 1px
                                              }''')

        except Exception as error:
            logger.write("[mouseMoved] Error: " + str(error), status=False)

    def mouseMoved_2(self, evt):
        try:
            if self.configurations["plt2"] is None or len(self.configurations["x"]) == 0:
                return

            # print("evt = " + str(evt))
            lastcycle = False
            pos = evt[0]
            # print("pos = " + str(pos))
            if gui.ex.graphicsView_2.sceneBoundingRect().contains(pos):
                mousePoint = self.vb2.mapSceneToView(pos)
                # print("mousePoint = " + str(mousePoint))
                closest = self.GetClose(TP_index=0, x=float(mousePoint.x()), y=float(mousePoint.y()))
                # print("closest = " + str(closest))
                if not closest == lastcycle:
                    w = gui.ex.graphicsView_2.scene().views()[0]
                    # print("w = " + str(w))
                    pt = w.mapToGlobal(QtCore.QPoint(self.configurations["plt2"].mapToDevice(pyqtgraph.Point(closest[0])).x(), self.configurations["plt2"].mapToDevice(pyqtgraph.Point(closest[1])).y()))
                    # print("pt = " + str(pt))
                    lastcycle = closest

                    QtWidgets.QToolTip.showText(pt, "(" + str(lastcycle).replace("[", "").replace("]", "") + ")", gui.ex.graphicsView_2)
                    gui.ex.graphicsView_2.setStyleSheet('''QToolTip {
                                              background-color: #8ad4ff;
                                              color: black;
                                              border: #8ad4ff solid 1px
                                              }''')

        except Exception as error:
            logger.write("[mouseMoved] Error: " + str(error), status=False)

    def GetClose(self, TP_index, x, y):
        try:
            closest = sys.maxsize
            close_X = 1
            close_Y = 1
            index = 0
            for i in range(0, len(self.configurations["x"]), 1):
                delta = x - float(self.configurations["x"][index])
                if abs(delta) < closest:
                    closest = delta
                    close_X = self.configurations["x"][index]
                    close_Y = self.configurations["y"][index]
                index += 1
            return [close_X, close_Y]
        except Exception as error:
            logger.write("[GetClose] error: " + str(error), status=False)

    def stringToNetOrderedByteArray(self, s):
        try:
            return ''.join([''.join([s[i + 2], s[i + 3], s[i], s[i + 1]]) for i in range(0, len(s), 4)])
        except Exception as error:
            logger.write("[stringToNetOrderedByteArray] error: " + str(error), status=False)


class Load_File_Page:
    def __init__(self):
        gui.ex.pushButton_LoadFile_send_custom_msg_frame_send.clicked.connect(lambda: threading.Thread(target=self.send_custome_message).start())
        gui.ex.pushButton_LoadFile_send_custom_msg_frame_load.clicked.connect(lambda: threading.Thread(target=self.load_custome_message).start())
        gui.ex.pushButton_LoadFile_delete_load_file.clicked.connect(lambda: threading.Thread(target=self.delete_load_file_page).start())
        gui.ex.pushButton_LoadFile_load_file_send.clicked.connect(lambda: threading.Thread(target=self.send_file_packet).start())
        gui.ex.pushButton_LoadFile_destination_block_id_load_file.clicked.connect(lambda: threading.Thread(target=self.loading).start())

    def loading(self):
        try:

            WriteStream.write(["textEdit_LoadFile_destination_block_id_load_file.clear()"])
            gui.file_isLoaded = False
            WriteStream.write(["LoadFilePage"])

            while not gui.file_isLoaded:
                time.sleep(0.1)
            file = open(str(gui.load_file_page[0]), "r")
            contentFile = ""
            for currLine in file:
                contentFile += currLine

            file.close()

            WriteStream.write(["textEdit_LoadFile_destination_block_id_load_file.insertPlainText", str(contentFile)])

        except Exception as error:
            logger.write("[loading]" + str(error), status=False)

    def delete_load_file_page(self):
        try:
            WriteStream.write(["textEdit_LoadFile_destination_block_id_load_file.clear()"])
            gui.file_isLoaded = False
            gui.load_file_page = ""
            gui.ex.label_91.setText("")
            gui.ex.label_92.setText("")
        except Exception as error:
            logger.write("[delete_load_file_page] error: " + str(error), status=False)

    def send_file_packet(self):

        try:
            if script_page.sock is None:
                script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()),
                                        ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                        port=int(gui.ex.lineEdit_Configuration_computer_port.text()))
        except Exception as error:
            logger.write("Error Send File packet: " + str('{err}'.format(err=error)), status=False)

        try:
            file_type = gui.load_file_page[0].split(".")
            type = str(file_type[1])
            if type == "txt":
                dataFile = open(str(gui.load_file_page[0]), "r")
                file = json.load(open("Files\\Messages\\Load_File.json", "r"))

                data_size_in_Dword = 0
                data = ""

                for currLine in dataFile:
                    data += currLine
                    data_size_in_Dword += 1

                print(data_size_in_Dword)

                if data_size_in_Dword > 4000:
                    gui.ex.label_91.setText("Error : file size is : " + str(data_size_in_Dword))
                    gui.ex.label_92.setText("The file size can be \n until 4K Samples.")
                    WriteStream.write(["send_loadFile.setChecked", False])
                    return

                data_size_in_Dword = hex(data_size_in_Dword)
                h = data_size_in_Dword[2:].zfill(4)

                file["payload"]["Data_size_in_DWORDs"] = h
                destination = gui.ex.comboBox_LoadFile_destination_block_id.currentText()
                if destination == "0":
                    file["payload"]["Destination_Block_ID"] = "0000"
                elif destination == "1":
                    file["payload"]["Destination_Block_ID"] = "0001"
                elif destination == "2":
                    file["payload"]["Destination_Block_ID"] = "0002"

                arr_numbers_in_data = data.replace("\n", ",").split(",")

                build_arr = []

                bits = 16

                for i in range(len(arr_numbers_in_data)):
                    value = int(arr_numbers_in_data[i])
                    if value & (1 << (bits - 1)):
                        value += 1 << bits
                    value = hex(value)
                    value = (value[2:].upper().zfill(4))
                    build_arr.append(value)

                text = ""
                for i in range(len(build_arr)):
                    text += str(build_arr[i])

                file["payload"]["Data_to_Load"] = text

                packet = Packet(packet=file)
                script_page.sock.send(packet=packet.packetBuilded)
                recive_packet = script_page.sock.receive()
                WriteStream.write(["pushButton_LoadFile_load_file_send.setChecked", False])
                time.sleep(int(0.1))

            elif type == "csv":
                arr = []
                new = []
                build_arr_csv = []
                size = 0
                file_csv = json.load(open("Files\\Messages\\Load_File.json", "r"))
                with open(str(gui.load_file_page[0]), newline='') as csvfile:
                    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
                    for row in spamreader:
                        data_csv = ', '.join(row)
                        arr.append(data_csv)
                        size += 1

                for i in range(len(arr)):
                    print(arr[i])
                    x = str(arr[i]).split(",")
                    new.append(x[0])
                    new.append(x[1])

                if size > 4000:
                    gui.ex.label_91.setText("Error : file size is : " + str(size))
                    gui.ex.label_92.setText("The file size can be \n until 4K Samples.")
                    WriteStream.write(["send_loadFile.setChecked", False])
                    return

                message_len = size
                message_len = message_len * 4
                message_len += 36

                message_len = (str(hex(int(str(message_len), 10)))[2:]).zfill(4)

                file_csv["header"]["Packet_size_LSB"] = str(message_len)

                size = (str(hex(int(str(size), 10)))[2:])
                data_size = size.zfill(4)

                file_csv["payload"]["Data_size_in_DWORDs"] = str(data_size)
                destination_csv = gui.ex.comboBox_LoadFile_destination_block_id.currentText()
                if destination_csv == "0":
                    file_csv["payload"]["Destination_Block_ID"] = "0000"
                elif destination_csv == "1":
                    file_csv["payload"]["Destination_Block_ID"] = "0001"
                elif destination_csv == "2":
                    file_csv["payload"]["Destination_Block_ID"] = "0002"

                bits = 16

                for i in range(len(new)):
                    value = int(new[i])
                    if value & (1 << (bits - 1)):
                        value += 1 << bits
                    value = hex(value)
                    value = (value[2:].upper().zfill(4))
                    build_arr_csv.append(value)

                text_csv = ""
                for i in range(len(build_arr_csv)):
                    text_csv += str(build_arr_csv[i])

                file_csv["payload"]["Data_to_Load"] = text_csv

                packet_csv = Packet(packet=file_csv)
                script_page.sock.send(packet=packet_csv.packetBuilded)
                recive_packet_csv = script_page.sock.receive()
                WriteStream.write(["send_loadFile.setChecked", False])
                time.sleep(int(0.1))

        except Exception as error:
            logger.write("Error Send File packet: " + str('{err}'.format(err=error)), status=False)

    def load_custome_message(self):
        try:
            gui.custome_message_Is_loaded = False
            WriteStream.write(["Custome_message"])

            while not gui.custome_message_Is_loaded:
                time.sleep(0.1)
            print("custome message path is " + str(gui.load_custome_message[0]))
            path = gui.load_custome_message[0].split("/")
            name_of_file = path[len(path) - 1]
            gui.ex.lineEdit_LoadFile_send_custom_msg_frame_file_name.setText(name_of_file)
            gui.ex.lineEdit_LoadFile_send_custom_msg_frame_file_name.setStyleSheet("color:white;")
            file = open(str(gui.load_custome_message[0]), "r")

        except Exception as error:
            logger.write("[load_costume_message]" + str(error), status=False)

    def send_custome_message(self):
        try:
            if script_page.sock is None:
                script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()),
                                        ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                        port=int(gui.ex.lineEdit_Configuration_computer_port.text()))
        except Exception as error:
            logger.write("[send_custome_message] error: " + str('{err}'.format(err=error)), status=False)

        try:
            custome_packet = json.load(open(str(gui.load_custome_message[0]), "r"))

            packet = Packet(packet=custome_packet)
            script_page.sock.send(packet=packet.packetBuilded)
            packetRecive_custome_message = script_page.sock.receive()

            time.sleep(int(0.1))
            WriteStream.write(["pushButton_LoadFile_send_custom_msg_frame_send.setChecked", False])

        except Exception as error:
            logger.write("[send_custome_message] error: " + str(error), status=False)


class HW_Tests_Page:
    def __init__(self):
        gui.ex.hw_tests_send_btn.clicked.connect(lambda: threading.Thread(target=hw_test.Hw_test_message).start())

    def Hw_test_message(self):

        try:
            if script_page.sock is None:
                script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                        ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                        port=int(gui.ex.lineEdit_Configuration_udp_port.text()))
        except Exception as error:
            logger.write("Error Hw_test_message: " + str('{err}'.format(err=error)), status=False)

        try:
            Hw_test = json.load(open("Files\\Messages\\HW_Tests.json", "r"))

            # Test DDR

            test_ddr = gui.ex.hw_tests_frame_test_ddr_combobox.currentText()
            if test_ddr == "Disable test":
                Hw_test["payload"]["Test_DDR"] = "0000"
            elif test_ddr == "Enable test":
                Hw_test["payload"]["Test_DDR"] = "0001"

            # Test AXI DMA Simple Mode

            test_axi_simple_mode = gui.ex.hw_tests_frame_test_axi_dma_simple_mode_combobox.currentText()
            if test_axi_simple_mode == "Disable test":
                Hw_test["payload"]["Test_Axi_DMA_Simple_Mode"] = "0000"
            elif test_axi_simple_mode == "Enable test":
                Hw_test["payload"]["Test_Axi_DMA_Simple_Mode"] = "0001"

            # Test AXI DMA SG Mode

            test_axi_SG_mode = gui.ex.hw_tests_frame_test_axi_dma_sg_mode_combobox.currentText()
            if test_axi_SG_mode == "Disable test":
                Hw_test["payload"]["Test_Axi_DMA_SG_Mode"] = "0000"
            elif test_axi_SG_mode == "Enable test":
                Hw_test["payload"]["Test_Axi_DMA_SG_Mode"] = "0001"

            # test ZDMA Simple mode
            test_ZDMA_simple_mode = gui.ex.hw_tests_frame_test_zdma_simple_mode_combobox.currentText()
            if test_ZDMA_simple_mode == "Disable test":
                Hw_test["payload"]["Test_ZDMA_Simple_Mode"] = "0000"
            elif test_ZDMA_simple_mode == "Enable test":
                Hw_test["payload"]["Test_ZDMA_Simple_Mode"] = "0001"

            # Test ZDMA SG Mode

            test_ZDMA_SG_mode = gui.ex.hw_tests_frame_test_zdma_sg_mode_combobox.currentText()
            if test_ZDMA_SG_mode == "Disable test":
                Hw_test["payload"]["Test_ZDMA_SG_Mode"] = "0000"
            elif test_ZDMA_SG_mode == "Enable test":
                Hw_test["payload"]["Test_ZDMA_SG_Mode"] = "0001"

            test_intc = gui.ex.hw_tests_frame_test_intc_combobox.currentText()
            if test_intc == "Disable test":
                Hw_test["payload"]["Test_INTC"] = "0000"
            elif test_intc == "Enable test":
                Hw_test["payload"]["Test_INTC"] = "0001"

            packet = Packet(packet=Hw_test)
            script_page.sock.send(packet=packet.packetBuilded)
            packetRecive = script_page.sock.receive()
            WriteStream.write(["hw_tests_send_btn.setChecked", False])
            # logger.write("Recive packet" + str(packetRecive))
            time.sleep(int(0.1))

        except Exception as error:
            logger.write("Error OperationPacket_LO1: " + str('{err}'.format(err=error)), status=False)


class Keysight:

    def check_connection(self, name: str):
        try:
            # name  - take it from the gui
            rm = pyvisa.ResourceManager()
            try:
                N9010B = rm.open_resource('TCPIP0::' + name + '::hislip0::INSTR', open_timeout=0)
                return_val = True
            except:
                return_val = False
            rm.close()
            return return_val
        except Exception as error:
            logger.write("[check_connection] error: " + str(error), status=False)

    def Tx_power(self, spectrumIP: str, recallTxPowerNB: int, offset: float, _freq: int, nameOfCheck: str):
        try:
            rm = pyvisa.ResourceManager()
            N9010B = rm.open_resource('TCPIP0::' + spectrumIP + '::hislip0::INSTR')

            N9010B.write('*RCL %d' % recallTxPowerNB)  # CCDF

            N9010B.write(':DISPlay:WINDow:TRACe:Y:SCALe:RLEVel:OFFSet %G' % offset)
            N9010B.write(':SENSe:POWer:RF:RANGe:OPTimize IMMediate')
            N9010B.write(':INITiate:CONTinuous %d' % 0)  # singel
            N9010B.write(':FORMat:TRACe:DATA %s,%d' % ('REAL', 32))  # for read data
            N9010B.write(':FORMat:BORDer %s' % 'SWAPped')  # for read data

            N9010B.write(':SENSe:FREQuency:CENTer %G' % _freq)
            time.sleep(2)
            N9010B.write(':SENSe:POWer:RF:RANGe:OPTimize IMMediate')

            N9010B.write(':SENSe:PSTatistic:COUNts %d' % 200000)

            N9010B.write(':INITiate:PSTatistic')
            N9010B.timeout = 60000
            temp_values = N9010B.query_ascii_values('*OPC?')

            # num = int(temp_values[0])
            # N9010B.timeout = 60000

            try:
                pStatistic = N9010B.query_binary_values(':FETCh:PSTatistic?', 'f', False)
            except Exception as error:
                logger.write("Keysight [Tx_power]" + str(error), status=False)

            time.sleep(1)
            N9010B.write(':MMEMory:STORe:SCReen "%s"' % nameOfCheck)
            N9010B.close()
            rm.close()
            return pStatistic
        except Exception as error:
            logger.write("Keysight [Tx_power] error: " + str(error), status=False)

    def ACPR(self, spectrumIP: str, recall_acpr: int, offset: float, freq: int, ref_level: float, nameOfCheck: str):
        try:
            rm = pyvisa.ResourceManager()
            N9010B = rm.open_resource('TCPIP0::' + spectrumIP + '::hislip0::INSTR')

            N9010B.write('*RCL %d' % recall_acpr)  # Set Recall
            # load recall file

            # N9010B.write(' :MMEMory:LOAD:STATe' & ("Recall_Tx\\" + str(gui.ex.comboBox_recallTx.currentText())))

            N9010B.write(':SENSe:ACPower:AVERage:COUNt %d' % 5)

            N9010B.write(':DISPlay:ACPower:VIEW:WINDow:TRACe:Y:SCALe:RLEVel %G' % ref_level)
            N9010B.write(':DISPlay:WINDow:TRACe:Y:SCALe:RLEVel:OFFSet %G' % offset)
            N9010B.write(':TRIGger:SEQuence:ATRigger %G' % 5)  # auto trig
            N9010B.write(':SENSe:FREQuency:CENTer %G' % freq)
            time.sleep(2)
            N9010B.write(':SENSe:POWer:RF:RANGe:OPTimize IMMediate')

            N9010B.write(':INITiate:CONTinuous %d' % 0)
            N9010B.write(':FORMat:TRACe:DATA %s,%d' % ('REAL', 32))
            N9010B.write(':FORMat:BORDer %s' % 'SWAPped')
            # Ref level

            N9010B.timeout = 1000000
            acp = N9010B.query_binary_values(':READ:ACP1?', 'f', False)

            temp_values = N9010B.query_ascii_values(':CALCulate:ACPower:MARKer:Y?')
            value = temp_values[0]

            for i in range(0, 3, 1):
                error3 = N9010B.query_binary_values(':READ:ACP3?')
                if int(error3[12]) or int(error3[13]) or int(error3[14]) or int(error3[15]):
                    logger.write("False acpr")

                    metchAtten = float(str(N9010B.query(':SENSe:POWer:RF:ATTenuation?')).replace("\n", ""))
                    logger.write(("metchAtten= " + str(metchAtten)))
                    N9010B.write(':SENSe:POWer:RF:ATTenuation %G' % (metchAtten - 3.0))  # Mech Atten = 6
                    N9010B.write(':INITiate:CONTinuous %d' % 1)
                    N9010B.write(':INITiate:CONTinuous %d' % 0)

                    acp = N9010B.query_binary_values(':READ:ACP1?', 'f', False)

                else:
                    break

                logger.write(("error3= " + str(error3)))

            N9010B.write(':MMEMory:STORe:SCReen "%s"' % nameOfCheck)

            N9010B.close()
            rm.close()
            return [acp, value]
        except Exception as error:
            logger.write("Keysight [ACPR] error: " + str(error), status=False)

    def Harmonic(self, spectrumIP: str, offset: float, _freq: int, bandwidth: str, nameOfCheck: str):
        try:
            ref_level = 35.0
            rm = pyvisa.ResourceManager()

            # load recall file

            N9010B = rm.open_resource('TCPIP0::' + spectrumIP + '::hislip0::INSTR')
            # N9010B.write(':MMEMory:LOAD:STATe' & ("Recall_Tx\\" + str(gui.ex.comboBox_recallTx.currentText())))

            N9010B.write(':INITiate:HARMonics')
            N9010B.write(':DISPlay:HARMonics:VIEW:WINDow:TRACe:Y:SCALe:RLEVel %G' % ref_level)

            N9010B.write(':DISPlay:WINDow:TRACe:Y:SCALe:RLEVel:OFFSet %G' % offset)
            N9010B.write(':FORMat:TRACe:DATA %s,%d' % ('REAL', 32))  # for read data
            N9010B.write(':FORMat:BORDer %s' % 'SWAPped')  # for read data
            N9010B.write(':SENSe:HARMonics:FREQuency:FUNDamental:AUTO %d' % 1)
            N9010B.write(':SENSe:HARMonics:FREQuency:FUNDamental %G' % _freq)
            N9010B.write(':SENSe:HARMonics:FREQuency:FUNDamental:AUTO %d' % 0)

            N9010B.write(':SENSe:POWer:RF:RANGe:OPTimize IMMediate')

            if bandwidth == '25 K':
                N9010B.write(':SENSe:HARMonics:BANDwidth:RESolution %G' % 25000.0)  # Res BW = BW
            if bandwidth == '50 K':
                N9010B.write(':SENSe:HARMonics:BANDwidth:RESolution %G' % 50000.0)  # Res BW = BW
            if bandwidth == '1 M':
                N9010B.write(':SENSe:HARMonics:BANDwidth:RESolution %G' % 1000000.0)  # Res BW = BW
            if bandwidth == '2 M':
                N9010B.write(':SENSe:HARMonics:BANDwidth:RESolution %G' % 2000000.0)  # Res BW = BW
            if bandwidth == '4 M':
                N9010B.write(':SENSe:HARMonics:BANDwidth:RESolution %G' % 4000000.0)  # Res BW = BW
            if bandwidth == '8 M':
                N9010B.write(':SENSe:HARMonics:BANDwidth:RESolution %G' % 8000000.0)  # Res BW = BW

            time.sleep(3)
            N9010B.write(':SENSe:HARMonics:AVERage:STATe %d' % 1)

            N9010B.write(':INITiate:HARMonics')
            N9010B.write(':INITiate:CONTinuous %d' % 0)

            N9010B.timeout = 60000  # 60 sec
            temp_values = N9010B.query_ascii_values('*OPC?')

            # N9010B.timeout = 40000
            temp_values = N9010B.query_ascii_values(':READ:HARMonics:AMPLitude10:ALL?')

            logger.write(("temp_values= " + str(temp_values)))
            N9010B.timeout = 20000

            arr = []

            for index in range(0, 10, 1):
                arr.append(temp_values[index])

            time.sleep(0.5)
            N9010B.write(':MMEMory:STORe:SCReen "%s"' % nameOfCheck)
            N9010B.close()
            rm.close()
            return arr
        except Exception as error:
            logger.write("Keysight [Harmonics] error: " + str(error), status=False)

    def Spurious(self, spectrumIP: str, offset: float, _freq: int, nameOfCheck: str):
        try:
            rm = pyvisa.ResourceManager()
            N9010B = rm.open_resource('TCPIP0::' + spectrumIP + '::hislip0::INSTR')

            # # load recall file
            #
            # N9010B.write (' :MMEMory:LOAD:STATe' & ("Recall_Tx\\" + str(gui.ex.comboBox_recallTx.currentText())))

            N9010B.write(':SENSe:FREQuency:CENTer %G' % _freq)
            N9010B.write(':DISPlay:WINDow:TRACe:Y:SCALe:RLEVel:OFFSet %G' % offset)
            N9010B.write(':DISPlay:WINDow:TRACe:Y:SCALe:RLEVel %G' % 40.0)
            N9010B.write(':SENSe:BWIDth:RESolution %G' % 30000.0)
            N9010B.write(':SENSe:FREQuency:SPAN %G' % 100000000.0)
            N9010B.write(':SENSe:AVERage:COUNt %d' % 6)
            N9010B.write(':TRACe:TYPE %s' % 'AVERage')

            N9010B.write(':CALCulate:MARKer:PEAK:TABLe:STATe %d' % 1)  # open table

            N9010B.write(':FORMat:TRACe:DATA %s,%d' % ('REAL', 32))
            N9010B.write(':FORMat:BORDer %s' % 'SWAPped')

            N9010B.write(':INITiate:CONTinuous %d' % 0)

            time.sleep(2)

            N9010B.write(':INITiate:RESTart')

            time.sleep(2)

            N9010B.write(':CALCulate:MARKer1:MAXimum')

            peaks = N9010B.query_binary_values(':CALCulate:DATA1:PEAKs? %G,%G' % (-20.0, 0.0), 'f', False)
            print("peaks[1]= " + str(peaks[1]))

            N9010B.write(':CALCulate:MARKer:PEAK:THReshold %G' % (float(peaks[1]) - 70.0))
            N9010B.write(':CALCulate:MARKer:PEAK:EXCursion %G' % 0.0)

            peaksResults = N9010B.query_binary_values(':CALCulate:DATA1:PEAKs? %G,%G' % (float(peaks[1]) - 65.0, 0.0), 'f', False)

            time.sleep(3)
            N9010B.write(':MMEMory:STORe:SCReen "%s"' % nameOfCheck)

            N9010B.close()
            rm.close()

            return peaksResults
        except Exception as error:
            logger.write("Keysight [Spurious] error: " + str(error), status=False)

    def FrequencyAccuracy(self, spectrumIP: str, offset: float, _freq: int, nameOfCheck: str):
        try:
            rm = pyvisa.ResourceManager()
            N9010B = rm.open_resource('TCPIP0::' + spectrumIP + '::hislip0::INSTR')

            # load recall file

            # N9010B.write(' :MMEMory:LOAD:STATe' & ("Recall_Tx\\" + str(gui.ex.comboBox_recallTx.currentText())))

            N9010B.write(':SENSe:FREQuency:CENTer %G' % _freq)

            N9010B.write(':SENSe:FREQuency:SPAN %G' % 1000.0)
            N9010B.write(':CALCulate:MARKer:CPSearch:STATe %d' % 1)

            N9010B.write(':DISPlay:WINDow:TRACe:Y:SCALe:RLEVel:OFFSet %G' % offset)
            N9010B.write(':DISPlay:WINDow:TRACe:Y:SCALe:RLEVel %G' % 35.0)

            N9010B.write(':SENSe:BANDwidth:RESolution:AUTO %d' % 1)
            N9010B.write(':SENSe:AVERage:COUNt %d' % 5)
            N9010B.write(':TRACe:TYPE %s' % 'AVERage')

            N9010B.write(':INITiate:CONTinuous %d' % 0)
            N9010B.write(':INITiate:RESTart')

            N9010B.timeout = 60000  # 60 sec
            temp_values = N9010B.query_ascii_values('*OPC?')

            N9010B.write(':FORMat:TRACe:DATA %s,%d' % ('REAL', 32))
            N9010B.write(':FORMat:BORDer %s' % 'SWAPped')

            temp_values = N9010B.query_ascii_values(':CALCulate:MARKer:X?')
            freq1 = int(temp_values[0])
            N9010B.write(':SENSe:FREQuency:CENTer ' + str(freq1))

            N9010B.write(':SENSe:FREQuency:SPAN %G' % 100.0)

            N9010B.write(':INITiate:RESTart')
            temp_values = N9010B.query_ascii_values('*OPC?')

            temp_values = N9010B.query_ascii_values(':CALCulate:MARKer:X?')
            freq = temp_values[0]

            temp_values = N9010B.query_ascii_values(':CALCulate:MARKer:Y?')
            real = temp_values[0]

            N9010B.write(':MMEMory:STORe:SCReen "%s"' % nameOfCheck)

            N9010B.close()
            rm.close()

            return [freq, real]
        except Exception as error:
            logger.write("Keysight [FrequenctAccuracy] error: " + str(error), status=False)

    def Attenuator(self, spectrumIP: str, offset: float, antena: int, modulation: str, bandwidth: str, _freq: int, attenuator: int):
        try:
            rm = pyvisa.ResourceManager()
            N9010B = rm.open_resource('TCPIP0::' + spectrumIP + '::hislip0::INSTR')

            # load recall file

            # N9010B.write(' :MMEMory:LOAD:STATe' & ("Recall_Tx\\" + str(gui.ex.comboBox_recallTx.currentText())))

            N9010B.write(':SENSe:FREQuency:CENTer %G' % _freq)
            N9010B.write(':DISPlay:WINDow:TRACe:Y:SCALe:RLEVel:OFFSet %G' % offset)

            N9010B.write(':SENSe:BANDwidth:RESolution:AUTO %d' % 1)
            N9010B.write(':SENSe:FREQuency:SPAN %G' % 10000000.0)
            N9010B.write(':SENSe:AVERage:COUNt %d' % 500)

            N9010B.write(':FORMat:TRACe:DATA %s,%d' % ('REAL', 32))
            N9010B.write(':FORMat:BORDer %s' % 'SWAPped')
            N9010B.write(':TRACe:TYPE %s' % 'AVERage')
            time.sleep(3)

            N9010B.write(':INITiate:CONTinuous %d' % 0)

            N9010B.write(':CALCulate:MARKer1:MAXimum')
            time.sleep(2)

            temp_values = N9010B.query_ascii_values(':CALCulate:MARKer1:X?')
            freq = temp_values[0]

            temp_values = N9010B.query_ascii_values(':CALCulate:MARKer1:Y?')
            real = temp_values[0]

            ans = [freq, real]
            print("ans= " + str(ans))
            time.sleep(8)

            N9010B.write(':CALCulate:MARKer:MODE %s' % 'DELTa')

            for i in range(0, 5, 1):
                item = QtWidgets.QTableWidgetItem(str(i))

                # item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)
                # icon = QtGui.QIcon("Images/right arrow.png")
                # item.setIcon(icon)
                # WriteStream.write(["tableWidget_attenuator.setVerticalHeaderItem", i, item])

                time.sleep(2)
                _txAtt = str(attenuator)

                if antena == 1:
                    msg5 = automation_tx.configFrequencyForMsg56(automation_tx.massage5, _txAtt)
                    logger.write((str(automation_tx.sendMessage(msg5))) + "\n")

                else:
                    msg6 = automation_tx.configFrequencyForMsg56(automation_tx.massage6, _txAtt)
                    logger.write((str(automation_tx.sendMessage(msg6))) + "\n")

                #
                N9010B.write(':INITiate:RESTart')
                # N9010B.write(':TRACe:TYPE %s' % ('AVERage'))
                time.sleep(3)
                temp_values = N9010B.query_ascii_values(':CALCulate:MARKer1:Y?')
                real = temp_values[0]
                print("_txAtt= " + str(_txAtt) + ", real= " + str(real))
                ans.append(real)
                print("ans1= " + str(ans))

                time.sleep(1)
                nameOfCheck = "Attenuator[Antena" + str(antena) + "_modulation_" + str(modulation) + "_bandwidth_" + str(bandwidth) + "_freq_" + str(_freq) + "_amplitude_" + str(_txAtt) + "]"

                N9010B.write(':MMEMory:STORe:SCReen "%s"' % nameOfCheck)

            N9010B.close()
            rm.close()

            return ans
        except Exception as error:
            logger.write("Keysight [Attenuator] error: " + str(error), status=False)


class Automation_Rx:
    def __init__(self):

        self.toStop = False
        self.json_results = {}
        # self.ps = None
        self.psIP = ""
        # self.ps_connect = False
        self.Signal = ""
        try:
            self.Signal = json.load(open("Config\\config.json", "r"))["Config"]["SignalGenerator"]
            WriteStream.write(["lineEdit_Configuration_signal_generator_ip.setText", self.Signal])

        except Exception as error:
            logger.write("[Automation_Page_Init]" + str(error), status=False)

        self.numOfRowOnTable = 0

    def WriteRegister(self, Board_ID, Address, Value, Timeout):
        script_page.WriteRegister(Board_ID, Address, Value, Timeout)

    def ReadRegister(self, Board_ID, Address, Timeout):
        script_page.ReadRegister(Board_ID, Address, Timeout)

    def old_msg_navassa(self, Resource_ID, Tx_attenuation, rxGainIndex, carriar_freq, operation):
        try:
            if script_page.sock is None:
                script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()),
                                        ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                        port=int(gui.ex.lineEdit_Configuration_computer_port.text()))
        except Exception as error:
            logger.write("Error Opertion: " + str('{err}'.format(err=error)), status=False)

        try:
            navassa_operation_old_icd = json.load(open("Files\\Messages\\navassa_operation_old.json", "r"))

            if Resource_ID == "Navassa 1 Tx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0000"
            elif Resource_ID == "Navassa 1 Rx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0001"
            elif Resource_ID == "Navassa 1 Tx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0002"
            elif Resource_ID == "Navassa 1 Rx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0003"
            elif Resource_ID == "Navassa 2 Tx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0004"
            elif Resource_ID == "Navassa 2 Rx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0005"
            elif Resource_ID == "Navassa 2 Tx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0006"
            elif Resource_ID == "Navassa 2 Rx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0007"
            elif Resource_ID == "Navassa 3 Tx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0008"
            elif Resource_ID == "Navassa 3 Rx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0009"
            elif Resource_ID == "Navassa 3 Tx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000A"
            elif Resource_ID == "Navassa 3 Rx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000B"
            elif Resource_ID == "Navassa 4 Tx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000C"
            elif Resource_ID == "Navassa 4 Rx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000D"
            elif Resource_ID == "Navassa 4 Tx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000E"
            elif Resource_ID == "Navassa 4 Rx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000F"

            # TX attenuation
            Tx_attenuation = hex(int(float(Tx_attenuation) * 1000)).zfill(4)[2:]
            navassa_operation_old_icd["payload"]["Tx_Attenuation"] = str(Tx_attenuation)

            # Rx Gain Index
            rx = hex(int(rxGainIndex))[2:]
            rx_gain = rx.zfill(4)
            navassa_operation_old_icd["payload"]["Rx_Gain_Index"] = str(rx_gain)

            navassa_operation_old_icd["payload"]["Operation"] = "0001"

            # carriar frequency
            carriar_freq = hex(int(float(carriar_freq) * 1000000)).zfill(8)[2:]
            navassa_operation_old_icd["payload"]["Carrier_Freq_Lsb"] = str(carriar_freq[4:8])
            navassa_operation_old_icd["payload"]["Carrier_Freq_Msb"] = str(carriar_freq[:4])

            # radio channel control
            navassa_operation_old_icd["payload"]["Radio_Channel_Control_Interface"] = "0000"

            # Rx NCO Enable
            navassa_operation_old_icd["payload"]["Rx_NCO_Enable"] = "0000"

            # Rx NCO Freq
            rx_nco_freq = hex(int(gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_nco_freq_old_icd.text()))[2:]
            rx_freq = str(rx_nco_freq.zfill(8))
            navassa_operation_old_icd["payload"]["Rx_NCO_Frequency_Lsb"] = rx_freq[4:8]
            navassa_operation_old_icd["payload"]["Rx_NCO_Frequency_Msb"] = rx_freq[:4]

            # BBDC Rejection - 0000

            # operation

            # operation = gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_operation_old_icd.currentText()
            if operation == "Disable":
                navassa_operation_old_icd["payload"]["Operation"] = "0000"
            elif operation == "Enable":
                navassa_operation_old_icd["payload"]["Operation"] = "0001"

            Freq_change_mode = gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_freq_mode_old_icd.currentText()
            if Freq_change_mode == "Non Hopping":
                navassa_operation_old_icd["payload"]["Frequency_Change_Mode"] = "0000"
            elif Freq_change_mode == " Hopping":
                navassa_operation_old_icd["payload"]["Frequency_Change_Mode"] = "0001"

            print(navassa_operation_old_icd)

            packet = Packet(packet=navassa_operation_old_icd)
            script_page.sock.send(packet=packet.packetBuilded)
            recive_packet = script_page.sock.receive()
            WriteStream.write(["pushButton_Navassa_Config_Navassa_Operation_send_navassa_old_icd.setChecked", False])
            time.sleep(int(0.1))

        except Exception as error:
            logger.write("Error  " + str('{err}'.format(err=error)), status=False)

    def run(self, index_test):
        try:
            curr_params = runningView.get_test_params(row=index_test)
            runningView.json_results[index_test] = {**curr_params, "Results": {}}

            self.toStop = False
            # self.PS_IP = str(gui.ex.lineEdit_Configuration_power_supply_ip.text())
            # self.PS_PORT = int(gui.ex.lineEdit_Configuration_power_supply_port.text())
            self.Signal = str(gui.ex.lineEdit_Configuration_signal_generator_ip.text())

            if not signalGenerator.isConncted:
                signalGenerator.connect(self.Signal)
            if not vsa.isConncted:
                vsa.connect()
            # try:
            #     if self.ps is None:
            #         self.ps = PS(IP=self.PS_IP, Port=self.PS_PORT)
            #         self.ps.connect()
            #         self.ps_connect = True if self.ps.connect() else False
            #
            # except Exception as error:
            #     logger.write("[run]ps not connect" + str(error), status=False)
            #     return False
            # Navasaa operation
            self.old_msg_navassa(Resource_ID=curr_params["Resource ID"], Tx_attenuation=curr_params["TX Attenuation"], rxGainIndex=curr_params["RX Gain Index"], carriar_freq=curr_params["Frequency"], operation="Enable")

            # Script for WBN
            try:
                exec(compile(open("Files\\Automation\\RF_PATH_RX/" + str(curr_params["RF PATH"]), "rb").read(), "RF_PATH/" + str(curr_params["RF PATH"]), 'exec'))
            except Exception as error:
                logger.write("Automation Rx [run] " + index_test + " Error RF_PATH: " + str('{err}'.format(err=error)), status=False)
                return False

            try:
                exec(compile(open("Files\\Automation\\Route_Mictor/" + str(curr_params["Route Mictor To"]), "rb").read(), "Route_Mictor/" + str(curr_params["Route Mictor To"]),
                             'exec'))
            except Exception as error:
                logger.write("Error Route_Mictor: " + str('{err}'.format(err=error)), status=False)
                return False

            if curr_params["Type"] == "Sensitivity":
                return self.sensitivity(curr_params, index_test)
            elif curr_params["Type"] == "Dynamic Range":
                return self.dynamicRange(curr_params, index_test)
            return False
        except Exception as error:
            logger.write("[Automation RX - run]" + str('{err}'.format(err=error)), status=False)
            return False

    def sensitivity(self, curr_params, index_test):
        try:
            current = ""
            voltage = ""
            if runningView.ps_connect:
                runningView.ps.sock.send("I2O?;".encode())
                respond = runningView.ps.sock.recv(1024)
                current = str(respond.decode()).replace("\r", "").replace("\n", "")

                runningView.ps.sock.send("V2O?;".encode())
                respond = runningView.ps.sock.recv(1024)
                voltage = str(respond.decode()).replace("\r", "").replace("\n", "")

            amplitudeFromJSON = runningView.getAmplitudeFromJSON(float(curr_params["Frequency"]) * 1000000, curr_params["Antena"])
            name_of_pic = curr_params["Type"] + "_antena_" + curr_params["Antena"] + "_modulation_" + curr_params["Modulation"] + \
                          "_frequency_" + curr_params["Frequency"].replace(".", "").replace(" ", "") + "_amplitude_" + curr_params["Amplitude"] + \
                          "_filterAlpha_" + curr_params["Filter Alpha"] + "_symbolRate_" + curr_params["Symbol Rate"]

            # Config signal generator
            signalGenerator.setFrequency(float(curr_params["Frequency"]))
            signalGenerator.setAmplitude(float(curr_params["Amplitude"]) + amplitudeFromJSON)
            signalGenerator.timeCustom(1)
            signalGenerator.setModulationType(curr_params["Modulation"])
            signalGenerator.setFilterAlpha(float(curr_params["Filter Alpha"]))
            signalGenerator.setSymbolRate(float(curr_params["Symbol Rate"]))
            signalGenerator.setOff()
            # off

            # VSA
            vsa.loadSetup(curr_params["Recall Setup"])
            time.sleep(6)
            vsa.initiate()
            time.sleep(6)
            NoiseFloor = math.floor(vsa.getRef() * 100) / 100

            signalGenerator.setOn()

            time.sleep(6)
            vsa.initiate()
            time.sleep(6)
            SignalPower = math.floor(vsa.getRef() * 100) / 100
            evm = math.floor(vsa.getEVM() * 100) / 100
            path_picture_to_show = vsa.savePng(name_of_pic)
            time.sleep(1)

            signalGenerator.setOff()

            n0 = -174
            snr = math.floor(float(SignalPower - NoiseFloor) * 100) / 100
            bw = math.floor(((float(curr_params["Symbol Rate"]) * 1000000) * (float(curr_params["Filter Alpha"]) + 1)) * 100) / 100
            NF = math.floor((float(curr_params["Amplitude"]) - n0 - 10 * math.log10(bw) - snr) * 100) / 100
            gain = math.floor(float(SignalPower - float(curr_params["Amplitude"])) * 100) / 100

            results = {"Cable_Loss": float(amplitudeFromJSON), "Noise_Floor": float(NoiseFloor), "Signal_Power": float(SignalPower),
                       "SNR": float(snr), "EVM": float(evm), "N_F": float(NF), "BW": str(bw), "Gain": float(gain), "Picture": path_picture_to_show}

            runningView.json_results[index_test] = {**curr_params, "Voltage": voltage, "Current": current, "Results": results}

            runningView.table_result_set_cell(text=str(curr_params["Frequency"].replace(" ", "")), row=index_test, col=0, enabled=False)
            runningView.table_result_set_cell(text=str(snr), row=index_test, col=1, enabled=False)
            runningView.table_result_set_cell(text=str(NF), row=index_test, col=2, enabled=False)
            runningView.table_result_set_cell(text=str(gain), row=index_test, col=3, enabled=False)
            runningView.table_result_set_cell(text=str(voltage), row=index_test, col=4, enabled=False)
            runningView.table_result_set_cell(text=str(current), row=index_test, col=5, enabled=False)
            runningView.table_result_set_cell(text="Click For Results", row=index_test, col=6, enabled=False)
            self.old_msg_navassa(Resource_ID=curr_params["Resource ID"], Tx_attenuation=curr_params["TX Attenuation"], rxGainIndex=curr_params["RX Gain Index"], carriar_freq=curr_params["Frequency"], operation="Disable")
            return True

        except Exception as error:
            logger.write("[sensitivity] Error: " + str('{err}'.format(err=error)), status=False)
            return False

    def dynamicRange(self, curr_params, index_test):
        pass

    def update_details_table(self, index_test, params):
        try:
            gui.ex.tableWidget_Details_titles.setRowCount(1)
            gui.ex.tableWidget_Details.setRowCount(1)

            action.set_vertical_header_item(obj="tableWidget_Details_titles", text="Test " + str(index_test + 1), index=0, curr_params=params, icon="forbidden.png", show_toolTip=False)

            curr_test = params if runningView.is_load_old_result else runningView.json_results[index_test]

            runningView.table_details_table_set_cell(text=str(curr_test["Type"]), row=0, col=0, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Antena"]), row=0, col=1, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Modulation"]), row=0, col=2, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Frequency"]), row=0, col=3, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Resource ID"]), row=0, col=4, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["RF PATH"]), row=0, col=5, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Route Mictor To"]), row=0, col=6, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Amplitude"]), row=0, col=7, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Filter Alpha"]), row=0, col=8, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Symbol Rate"]), row=0, col=9, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["TX Attenuation"]), row=0, col=10, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["RX Gain Index"]), row=0, col=11, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Recall Setup"]), row=0, col=12, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)

            action.set_vertical_header_item(obj="tableWidget_Details", text="Results", index=0, curr_params=params, icon="-).png", show_toolTip=False)

            if curr_test["Type"] == "Sensitivity":
                gui.ex.tableWidget_Details.setColumnCount(9)
                gui.ex.tableWidget_Details.setHorizontalHeaderLabels(["Voltage", "Current", "Cable Loss", "Noise Floor", "Signal Power", "SNR", "EVM", "N_F", "BW", "Gain"])
                WriteStream.write(["tableWidget_Details.horizontalHeader()", 10])

                runningView.table_details_set_cell(text=str(curr_test["Voltage"]), row=0, col=0, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Current"]), row=0, col=1, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Cable_Loss"]), row=0, col=2, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Noise_Floor"]), row=0, col=3, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Signal_Power"]), row=0, col=4, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["SNR"]), row=0, col=5, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["EVM"]), row=0, col=6, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["N_F"]), row=0, col=7, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["BW"]), row=0, col=8, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Gain"]), row=0, col=9, enabled=False)
            try:
                gui.ex.label_spectral_pic.setPixmap(QtGui.QPixmap(curr_test["Results"]["Picture"]))
                WriteStream.write(["label_spectral_pic.setHidden", False])
            except Exception as error:
                logger.write("Error setPixmap on gui: " + str(error), status=False)
        except Exception as error:
            logger.write("[update_details_table Automation RX] error: " + str('{err}'.format(err=error)), status=False)


class Automation_Tx:
    def __init__(self):

        # self.pathFileResults = "Files\\json_results_Tx"

        self.patern = {
            "Unit": "",
            "Rev": "",
            "FPGA_LPTR": "",
            "Steps": []
        }

        self.Tx_Sock_isActive = False

        self.Computer_IP = ""
        self.Device_IP = ""
        self.Port = ""

        # gui.ex.lineEdit_configuration_Spectrome_IP.setText(str(gui.ex.lineEdit_Configuration_spectrum_ip.text()))

        self.spectrumIP = ""
        self.keysight_connect = False

        # self.ps = None
        self.psIP = ""
        # self.ps_connect = False

        self.recallTxPowerNB = 14  # CCDF NB

        self.recallAcpr_QAM4_1M = 6
        self.recallAcpr_QAM4_2M = 7
        self.recallAcpr_QAM4_4M = 8
        self.recallAcpr_QAM4_8M = 9

        # self.pathFileResults = "Results"
        self.pathFileResultsSpectral = ""

        self.navassa1_msg3 = "48-00-00-00-00-00-12-00-01-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-50-00-00-00-D3-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.navassa1_msg4 = "48-00-00-00-00-00-12-00-02-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-4E-00-00-00-86-03-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.navassa1_msg5_tactical = "48-00-00-00-00-00-12-00-3A-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-52-00-00-00-DC-05-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.navassa1_msg6_tactical = "48-00-00-00-00-00-12-00-3B-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-54-00-00-00-02-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"

        self.navassa1_msg7 = "48-00-00-00-00-00-12-00-04-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-86-00-00-00-38-1C-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.navassa1_msg8 = "48-00-00-00-00-00-12-00-05-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-86-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.navassa1_msg9 = "48-00-00-00-00-00-12-00-06-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-86-00-00-00-02-01-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.navassa1_msg9_tactical = "48-00-00-00-00-00-12-00-3F-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-86-00-00-00-32-01-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"

        self.navassa1_msg10 = "48-00-00-00-00-00-12-00-07-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-86-00-00-00-07-1C-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.navassa1_msg11 = "48-00-00-00-00-00-12-00-08-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-86-00-00-00-00-9E-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.navassa1_msg12 = "48-00-00-00-00-00-12-00-09-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-66-00-00-00-FF-34-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.navassa1_msg13 = "48-00-00-00-00-00-12-00-0A-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-68-00-00-00-02-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.navassa1_msg14 = "48-00-00-00-00-00-12-00-0B-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-66-00-00-00-FF-35-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.navassa1_msg15 = "48-00-00-00-00-00-12-00-0C-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-68-00-00-00-01-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"

        self.massage1 = "48-00-00-00-00-00-12-00-40-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-03-00-80-38-07-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.massage2 = "F4-00-00-00-00-00-16-00-00-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-00-24-F4-00-00-48-E8-01-18-0D-8F-00-02-00-04-00-03-00-00-7D-00-00-02-00-02-00-00-00-00-FD-43-14-00-00-00-00-00-FD-43-14-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-FF-00-00-00-01-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-00-00-00-00-00-00-00-00-F7-E5-1B-00-00-12-F8-00-FF-00-00-00-01-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-00-00-00-00-00-00-00-00-F7-E5-1B-00-00-12-F8-00-00-00-00-00-E8-03-00-00-00-00-01-00-00-00-00-00-00-00-00-00-E8-03-00-00-00-00-01-00-00-00-00-00-00-00-02-00-05-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"

        self.massage2_navassa1 = "F4-00-00-00-00-00-16-00-00-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-00-24-F4-00-00-48-E8-01-18-0D-8F-00-02-00-04-00-03-00-00-7D-00-00-02-00-02-00-00-00-00-FD-43-14-00-00-00-00-00-FD-43-14-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-FF-00-00-00-01-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-00-00-00-00-00-00-00-00-F7-E5-1B-00-00-12-F8-00-FF-00-00-00-01-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-00-00-00-00-00-00-00-00-F7-E5-1B-00-00-12-F8-00-00-00-00-00-E8-03-00-00-00-00-01-00-00-00-00-00-00-00-00-00-E8-03-00-00-00-00-01-00-00-00-00-00-00-00-02-00-05-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.massage2_navassa2 = "F4-00-00-00-00-00-16-00-00-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-01-00-00-24-F4-00-00-48-E8-01-18-0D-8F-00-02-00-04-00-03-00-00-7D-00-00-02-00-02-00-00-00-00-FD-43-14-00-00-00-00-00-FD-43-14-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-FF-00-00-00-01-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-00-00-00-00-00-00-00-00-F7-E5-1B-00-00-12-F8-00-FF-00-00-00-01-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-00-00-00-00-00-00-00-00-F7-E5-1B-00-00-12-F8-00-00-00-00-00-E8-03-00-00-00-00-01-00-00-00-00-00-00-00-00-00-E8-03-00-00-00-00-01-00-00-00-00-00-00-00-02-00-05-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"

        self.massage3 = "48-00-00-00-00-00-12-00-41-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-60-00-00-00-2B-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.massage4 = "48-00-00-00-00-00-12-00-42-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-5E-00-00-00-C9-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.massage5 = "48-00-00-00-00-00-12-00-43-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-4A-00-00-00-3F-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.massage6 = "48-00-00-00-00-00-12-00-44-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-5A-00-00-00-3F-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"

        self.spacialMsg1 = "48-00-00-00-00-00-12-00-95-02-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-62-00-00-00-78-05-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.spacialMsg2 = "48-00-00-00-00-00-12-00-96-02-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-64-00-00-00-02-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"

        self.massage7 = "48-00-00-00-00-00-12-00-45-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-66-00-00-00-FF-34-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.massage8 = "48-00-00-00-00-00-12-00-46-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-68-00-00-00-04-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.massage9 = "48-00-00-00-00-00-12-00-47-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-66-00-00-00-FF-35-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.massage10 = "48-00-00-00-00-00-12-00-48-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-01-00-68-00-00-00-08-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.massage11 = "4C-00-00-00-00-00-17-00-00-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-06-00-80-85-B5-0D-38-18-00-00-FF-00-00-00-E8-03-00-00-00-00-01-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"
        self.massage12 = "48-00-00-00-00-00-12-00-49-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-04-00-00-80-88-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"

        self.massageCW_navassa1 = "C4-0F-00-00-00-00-13-00-00-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-E8-03-01-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-00-00-7E-5A"
        self.massageQAM4_1M_navassa1 = ""
        self.massageQAM4_2M_navassa1 = ""
        self.massageQAM4_4M_navassa1 = ""
        self.massageQAM4_8M_navassa1 = "24-3C-00-00-00-00-13-00-00-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-0F-01-00-A5-C7-D7-C8-31-CC-0F-B9-3A-D1-07-B6-B2-D4-3B-BD-B1-D4-51-C9-89-D0-5D-D4-85-C9-0E-DA-BB-C2-F2-D8-D6-BF-7D-D2-39-C3-F7-C9-69-CC-E4-C2-B0-D7-D0-BF-5D-DF-B8-C1-5A-DE-68-C8-0D-D3-43-D3-FD-C0-FA-E1-41-B0-A5-F4-88-AA-2A-0B-CC-B6-40-24-95-D5-B7-3C-9D-FF-9A-4F-D3-27-66-57-3A-40-1B-50-BE-3F-3F-39-6E-26-03-17-21-FE-BE-F1-EE-D6-A7-D3-C1-C0-8C-C5-BD-C4-99-CB-41-E1-91-E3-6C-0A-3C-05-06-2F-FE-24-BE-3F-D5-37-A7-35-2B-37-22-15-0F-23-FB-EB-FF-01-7C-CB-4C-DE-20-C1-33-C2-F8-D0-38-B4-2A-F4-1A-B5-FD-1B-46-C0-1E-38-44-CE-52-3D-18-D8-D1-29-0B-DA-A4-05-BD-D4-1B-DF-34-CC-FC-C4-70-C5-F9-C0-D5-C3-75-D4-9B-C7-B4-F8-FC-CD-FC-21-EB-D2-22-44-5D-D3-B4-56-03-CF-48-57-77-C8-78-49-CB-C3-D9-34-43-C4-0A-22-59-CA-E4-17-36-D3-90-19-E8-D9-F2-25-DD-D9-4B-38-82-D1-C3-49-A7-C3-71-53-CD-B6-5F-50-AA-B2-12-3F-C5-BC-3F-22-AC-D5-4E-00-1E-F8-B8-E1-8D-1A-89-CE-88-32-DF-CB-9B-38-1D-DA-2A-2B-8D-F4-12-0F-B4-12-00-EE-EA-2A-12-D3-5A-35-23-C7-61-2E-1C-CE-8F-17-1F-E6-FB-F6-91-08-31-D5-78-2C-8F-BA-35-49-D0-AC-A8-58-9E-AD-51-58-60-BA-5F-49-33-CD-E0-2F-C4-DE-7E-11-7F-E8-32-F4-90-E6-E8-DC-2F-D9-83-CE-DD-C4-46-C9-50-B1-DE-CA-24-A7-32-CF-EB-AC-E3-D1-73-C4-03-D0-68-E9-6D-C9-10-12-0D-C1-2E-32-F1-BB-56-3F-34-BF-0D-35-B3-CD-12-17-76-E6-8F-F0-A1-04-44-D0-1C-21-EB-C2-4C-35-0B-CE-C6-3D-72-ED-B0-3B-99-14-25-34-8D-33-CC-2D-74-3D-AD-2D-F7-2D-AB-34-40-0B-E8-3E-8F-E3-65-45-61-C7-43-41-8B-C2-2D-2F-3D-D7-67-11-0E-FD-77-EF-78-24-8D-D3-4B-3D-9F-C6-4C-3D-F7-CC-56-24-84-E4-41-FC-C1-05-CA-D4-AD-26-4B-BD-86-3E-E4-BE-CD-48-65-D9-61-46-FB-03-6C-3C-05-31-B7-31-4C-53-B7-2B-61-62-5F-2C-A7-5C-AC-31-91-46-CC-36-F1-27-3E-36-C5-08-08-2C-EC-EE-44-17-6A-DD-67-FA-19-D5-97-DA-E6-D5-3C-BE-A6-DF-6A-AB-01-F2-71-A6-90-0B-D3-B0-E9-28-C6-C8-65-44-5E-E9-22-57-64-0B-1B-5B-DC-26-84-4D-05-35-6B-30-4E-32-B2-0A-AF-1F-46-E6-C1-02-04-CD-6A-E4-81-C5-52-CE-E2-D0-EC-C7-A0-EA-1B-D4-4A-0A-3A-F0-A6-26-F2-14-EE-38-97-38-EE-3E-28-52-56-3B-E0-5B-00-34-87-54-1D-2F-35-3F-5D-30-D6-21-46-37-28-03-68-3F-05-E9-51-42-7B-D7-80-3A-AA-D0-22-26-1D-D5-5A-08-22-E4-99-E8-CE-FB-29-D0-C9-18-D4-C6-2C-36-09-D0-F0-4D-8E-E9-1A-5A-3D-0C-7D-56-8F-2E-70-42-DA-47-BB-21-00-53-20-FC-8F-4F-6B-DB-02-41-85-C8-A6-2C-86-C8-25-17-DF-DA-EE-02-4B-F9-14-F0-B8-19-9A-DD-7C-31-4E-CB-C0-38-28-BB-F9-2C-46-B1-81-11-65-B2-38-EE-6A-C1-B5-CC-44-DD-2A-B5-39-00-0D-AC-2D-21-4E-B1-95-36-48-C1-EC-39-C9-D6-3F-2A-40-ED-A0-0C-2D-02-47-EA-30-15-1F-CD-EB-26-28-BC-6D-37-21-B9-08-45-88-C0-54-4C-AF-CB-82-49-F3-D3-65-3A-9C-D5-2D-20-1A-D1-E4-FF-30-CA-12-E1-A0-C5-0E-CB-6F-C6-04-C2-45-CC-1D-C5-90-D3-BA-CE-73-D7-F1-D6-7E-D4-44-D7-D7-CA-E4-CD-BA-BE-0C-BF-F9-B6-6A-B3-12-BA-3D-B4-21-CB-C3-C6-13-E8-00-E9-F4-09-93-11-35-27-F5-32-24-37-E8-40-0D-35-D5-35-DB-21-B4-15-92-03-FD-EC-02-E3-E2-CB-9E-C8-C6-BF-BB-B9-AD-CD-46-B7-0C-F0-28-BE-05-19-0F-C9-1E-38-AC-D2-02-41-8C-D7-63-30-E1-D6-F4-0C-26-D2-22-E4-09-CC-14-C4-22-C7-B6-B5-12-C5-5F-B9-25-C6-8C-C7-81-C9-1F-D5-AF-CD-16-D9-26-D1-06-D1-BA-D2-40-C2-E4-D1-15-B7-E3-CE-A6-B9-B1-CA-99-CE-D9-C6-48-F2-FE-C4-B6-19-3F-C6-EF-36-9E-CA-FB-3E-B5-D0-B2-2E-FB-D5-5F-0C-A9-D7-70-E5-FD-D3-26-C9-58-CB-87-C2-B1-C0-11-D4-EC-B8-E0-F6-38-B9-88-1D-FA-C4-5E-39-19-DC-FF-3F-6F-FA-EB-2E-C0-18-EB-0B-F1-2E-5E-E2-B2-36-B3-BE-A1-2D-07-AA-13-16-88-A7-3C-F6-75-B4-1C-D6-5D-CA-0A-BD-62-E2-BD-AF-FB-F7-7D-AF-0C-0A-91-BA-0C-1A-84-CD-E9-29-8A-E4-D5-39-82-FC-39-47-41-13-6C-4D-4D-27-E3-47-66-37-C8-34-34-42-B1-16-58-46-61-F4-D6-42-93-D6-90-37-88-C4-86-25-F4-C0-CE-0E-B8-C8-37-F6-32-D4-D5-DE-B1-DA-87-CB-AF-D6-96-BE-BE-C8-58-B9-D8-B7-D8-BB-6F-AE-86-C4-95-B5-3D-D0-38-D0-B9-DA-CD-F8-B9-DF-AA-22-80-DC-D2-3E-35-D1-55-42-80-C1-6A-2B-C6-B3-ED-02-2E-AF-3C-D9-DA-B8-A7-BF-76-D1-16-C1-35-F4-2C-DD-DE-17-2D-08-CD-31-CA-2F-C8-39-F3-42-4C-2D-4B-39-D5-10-E0-16-8F-EE-8C-EA-D0-D2-83-C7-A6-C7-FA-BC-2F-D1-78-CF-21-EC-EB-F6-00-0F-29-22-85-2D-7A-3E-DF-3C-C0-3F-41-37-A3-25-8B-1D-92-FB-B4-F6-AF-D3-4F-CD-ED-BE-4C-AC-D8-C5-E8-9B-26-E5-B9-9F-6D-0F-26-B6-05-33-22-D9-76-41-E5-FF-3C-35-0B-21-A0-13-CF-34-20-EA-EE-36-CA-C8-C6-27-0F-BC-6A-0C-7F-C8-6E-ED-DB-E9-93-D4-77-15-E3-C9-77-3E-23-D1-24-5A-82-E8-BD-62-37-09-2F-58-DC-29-F3-3E-BC-41-07-1E-DC-4B-D9-FC-83-48-D2-E1-99-3C-8B-D1-4F-2F-65-CE-F7-26-5B-D8-7D-26-FB-EC-A7-2C-B9-07-36-35-C8-22-54-3B-82-38-0E-3C-EC-44-B0-37-E3-46-4D-31-64-40-E4-2C-BA-35-1C-2D-DF-2B-C7-31-B0-26-FF-37-B4-27-CA-3B-E3-2D-62-3A-60-36-ED-33-C5-3D-BC-2B-43-41-AB-26-48-3F-9A-28-74-37-0F-32-23-2A-5B-3F-06-18-B8-49-0F-02-16-4A-C8-E9-4E-3C-B9-D1-51-21-77-BD-4A-FF-0A-B1-A0-DF-D3-AF-9A-CB-40-BB-00-C9-E7-D1-1D-D8-78-EF-DC-F3-AD-0D-D9-13-D4-25-77-2F-91-32-C5-40-21-31-15-46-F3-21-DC-41-5B-08-26-39-AF-E9-43-31-1F-CC-BA-2D-8D-B5-1C-2F-70-AA-10-33-10-AD-64-35-F9-BC-A2-31-F4-D6-C0-24-A6-F5-47-0E-D2-12-C1-F0-06-29-50-D1-3F-35-8B-B6-D2-37-CE-A6-28-34-76-A6-58-2F-73-B6-FB-2D-A5-D3-2A-32-54-F7-75-3A-CA-18-62-42-A9-2F-4B-44-55-36-D5-3B-AF-2B-04-28-7F-13-01-0C-68-F5-4B-EE-B6-DA-97-D6-A2-CB-51-CB-04-CD-A4-CF-0D-DF-B0-E2-64-FD-FE-FF-92-20-EE-20-1E-40-67-3E-C8-54-5D-52-42-5A-E2-58-01-50-B8-50-0C-39-7D-3B-F2-1A-77-1D-38-FC-D0-FC-A6-E2-47-E0-DB-D1-54-CD-8C-CA-6A-C6-9D-CA-E2-C9-1B-CE-60-D2-C6-D0-D9-D8-AE-CF-9F-D7-65-CA-33-CD-33-C3-93-BD-3C-BE-0B-B1-DC-BF-C2-B0-D5-CA-50-C2-09-DF-57-E4-53-F9-F5-0D-87-14-88-31-43-2B-11-42-C8-39-E9-38-2A-3F-34-19-5C-3D-50-EF-20-38-34-CC-5C-33-78-BE-8D-31-13-CC-F4-32-8C-EF-A1-35-0F-1A-4E-36-9C-39-A8-31-B7-40-72-25-47-2C-4C-11-F7-04-F2-F6-8D-DB-09-DA-B3-C1-8A-BF-5D-C2-E7-AC-2B-DD-DC-A6-A4-06-12-B0-38-2D-F2-C7-C0-40-02-EA-3C-39-79-0E-0C-1A-01-2C-2E-F0-78-3A-A5-CC-C2-35-7C-BD-88-1F-52-C8-F8-FE-B1-E8-55-DE-9A-12-28-C7-DA-37-8C-BE-C6-4D-3B-C3-01-51-61-CE-CC-45-F3-D6-39-35-31-D6-A8-28-39-CB-AA-25-E3-BB-EF-2B-42-B2-F7-35-CB-B7-E2-3B-4C-D0-0A-37-25-F7-D0-24-43-20-90-07-CC-3C-9B-E5-7E-41-CD-C6-02-2C-E5-B1-A3-04-A4-AA-58-DB-3B-B1-47-C1-F3-C2-7F-C1-78-DB-13-DC-29-F6-E5-05-E9-0E-39-2D-43-22-4C-41-58-2D-84-39-DF-2D-39-19-97-22-39-EE-0A-0C-DF-CA-4D-ED-2A-BE-28-CC-62-CD-38-B0-F6-F1-16-A1-62-1C-EE-A3-DA-3A-6F-B9-C5-40-F0-DC-E2-2B-4F-05-EF-04-80-27-CD-DB-0A-3A-DF-C0-29-38-8F-BE-7C-23-8F-D5-9D-03-46-FD-87-E3-D6-27-EE-CD-E3-47-B3-C9-8D-55-D2-D7-C2-50-74-F3-22-40-05-14-6B-2D-72-30-1F-21-49-42-64-1F-87-47-18-27-AD-42-48-33-1D-39-04-3E-98-30-10-43-F0-2C-41-41-A5-2E-17-3A-06-33-0D-30-73-35-B0-24-40-31-9A-17-7C-23-F4-06-18-0C-2F-F1-1E-EE-07-D7-FC-CE-A3-BC-39-B5-F7-A8-D1-A6-68-A3-A1-A7-90-B0-35-B8-81-CF-59-D5-FA-F8-8D-F8-28-21-82-19-86-3B-32-30-85-3F-27-37-1B-2C-2E-2D-A7-08-B5-15-8D-E2-BC-F7-56-C8-7F-DB-1D-C4-AF-C7-86-D7-4A-BF-F8-FA-EF-C0-74-20-E2-C7-19-39-5D-CE-09-3B-3B-D0-5F-25-C0-CC-8E-00-D4-C6-04-DB-A0-C3-6D-C3-25-C8-F3-C2-EF-D6-E2-D9-E2-EE-EC-FF-8B-0B-E2-27-CE-26-31-45-1D-3B-C4-50-5D-45-37-4B-A6-45-B3-3B-D1-3E-0F-2C-20-35-27-24-AD-2C-96-26-37-28-2E-30-A3-28-46-3A-22-2D-98-3E-C3-33-A3-3A-22-3A-08-31-FD-3D-01-28-D3-3D-EC-25-5F-39-94-2D-DD-31-24-3C-F7-29-DF-49-1B-25-80-4D-2D-26-A7-40-1E-2E-51-23-E1-3A-B7-FC-74-47-E6-D8-4D-4D-0D-C4-DA-46-86-C5-19-32-9F-DC-26-12-9C-00-DA-EE-06-24-68-D2-CA-39-A8-C5-24-3A-A8-CC-46-25-EF-E4-D3-02-59-06-6F-DE-41-26-07-C3-B7-3B-C0-B6-DF-42-24-B9-0C-3E-3D-C4-28-34-D1-CF-1C-2D-48-D5-E2-2D-7F-D2-22-36-71-CA-58-40-98-C3-8A-44-C7-C4-31-3C-0A-D2-A4-25-C3-EA-52-05-E4-09-6F-E4-F3-27-78-CD-F7-3D-1E-C8-03-48-42-D6-5F-46-1B-F3-FE-3C-EF-14-99-31-5E-30-59-29-18-3C-0B-27-B5-33-8F-2A-CA-18-84-31-22-F2-B2-38-AA-C9-6D-3D-AE-A9-58-3E-4A-9A-47-3B-66-9F-81-34-C9-B7-05-2A-55-DD-3E-1B-71-06-8A-07-6E-28-43-EF-70-3A-B4-D4-17-38-58-BC-0E-23-F2-AB-CF-02-C5-A8-75-E2-71-B5-29-CD-6A-D0-51-CA-BE-F3-EB-DA-7E-16-1F-F9-62-2F-39-1A-C1-37-74-32-C7-2D-24-39-2D-15-A8-2B-09-F6-13-0E-48-DA-6D-E9-9F-CA-42-C8-05-CC-FB-B2-78-DE-3B-AD-4E-FD-45-B5-CA-20-46-C5-65-40-D4-D5-FE-54-95-E0-6B-5A-27-E2-32-50-BE-DA-47-39-9A-CD-16-1B-B6-BF-12-FC-3A-B6-1C-E2-20-B5-1C-D1-4C-BE-14-CA-22-D1-FF-CA-B0-EA-9C-CF-5B-06-05-D3-0E-1F-9C-D1-A3-30-A6-CA-2C-39-DB-C0-99-39-96-B9-5E-35-C4-BA-0E-31-48-C8-6C-30-D8-E1-A8-34-59-02-A0-3B-2D-21-9C-40-11-35-51-3E-8F-37-51-31-88-27-EB-19-D7-09-70-FC-96-E7-B9-DF-BD-CA-7A-CA-66-BA-86-C0-61-B8-5A-C1-E6-C0-7A-C8-B4-CC-A0-CF-87-D4-B2-D1-6A-D4-3B-CD-73-CD-24-C5-19-C5-74-BF-9D-C2-7D-C2-99-CB-D4-D1-57-E1-4F-EC-1C-00-F8-0B-A5-20-03-28-17-3B-DE-37-F8-49-44-36-F1-4B-FA-22-8E-43-D8-02-5E-35-21-DE-68-25-E7-BD-63-15-8A-A9-83-04-05-A5-ED-F0-60-B0-02-DA-3E-C8-23-C2-0C-E7-D9-AE-54-06-10-A7-00-20-02-B0-56-2F-3F-CA-A6-31-4E-F0-BC-26-C4-17-EF-10-A5-34-C2-F4-CA-3D-FD-D7-89-30-6F-C0-0D-12-92-B2-B1-ED-94-B0-DA-D0-05-BA-11-C6-4C-CC-15-D1-AE-E3-9F-ED-66-FC-0E-11-8D-13-72-2E-5D-27-3D-3B-E4-36-E3-32-71-41-1A-18-19-46-5D-F3-C3-43-97-CF-96-39-41-B6-B5-27-66-AC-C5-0F-8D-B1-F9-F4-A5-C0-6F-DB-48-D2-2C-C7-78-DF-03-BB-BD-E3-F4-B7-37-DE-38-BD-6B-D1-EC-C8-2F-C2-07-D9-24-B6-07-EC-32-B2-19-01-4C-B9-90-17-AD-CB-12-2E-9C-E6-F1-41-DC-04-42-4F-BF-1F-DD-51-C2-30-08-47-65-33-1E-2F-A2-26-61-0E-79-0D-63-EC-4A-EE-0D-D2-FA-D0-C1-C6-76-BC-C3-CD-81-B4-E4-E4-94-B8-23-05-5E-C4-18-25-98-D1-4F-3C-7E-DA-3A-46-E4-DB-96-43-1D-D6-8F-39-62-CC-2E-2F-25-C3-21-2A-22-BE-53-2C-26-BF-68-33-F4-C5-5B-3A-32-D1-5F-3C-A4-DF-A1-37-E0-F0-7A-2E-29-05-66-26-4E-1C-26-25-72-34-66-2D-72-49-9C-3C-A6-55-69-4B-EE-53-78-50-25-42-D8-44-DF-22-C0-27-77-FD-F2-FF-0C-DC-CA-D9-1D-C8-87-C2-28-C7-C8-C2-9B-D8-94-DA-33-F6-C7-00-68-16-64-26-1A-30-73-3C-E0-3D-1D-3A-9B-3F-53-20-BA-39-81-F9-B3-32-55-D5-D5-2F-5A-C2-E9-32-1A-C8-9A-39-3B-E4-BD-3E-94-0B-D2-3C-C8-2E-8D-30-61-40-5E-1A-D6-39-7D-FE-89-1D-8B-E3-36-F5-87-D0-B0-CD-C8-CA-FA-B1-A0-D4-B0-A7-D0-EC-1C-AE-BC-0E-EC-BF-3E-33-60-D6-F9-51-57-EC-13-63-DA-FF-2F-61-A9-11-48-4B-55-23-C4-25-15-35-05-FA-9D-44-35-D4-93-4D-9C-BF-72-4B-96-C2-EE-3B-D2-DB-B5-20-0E-02-8C-FF-02-27-D2-E0-81-3C-D1-CC-05-3A-FE-C8-4F-20-31-D6-79-F9-76-F0-25-D5-8C-10-36-C2-48-2E-A5-C8-19-43-03-E6-C0-4B-57-0E-D3-48-FA-30-08-3E-88-3F-B7-30-E6-33-17-26-CC-12-C2-21-BE-E9-EC-24-64-C9-40-2E-A8-BE-62-3A-9D-CD-E5-44-49-F0-67-49-B0-19-BF-44-9C-3B-E3-35-87-4C-61-1E-16-4B-43-02-B6-3D-4C-E7-D6-2E-A4-D3-99-27-4D-CC-7D-2B-B1-D3-F4-36-D4-E8-5F-41-56-07-6B-41-6F-28-C4-31-9B-44-F3-13-7D-55-18-F0-7B-57-C4-D1-9C-4A-55-C3-51-32-E2-C9-5A-14-4F-E3-1A-F7-60-07-C9-DF-0E-2B-30-D1-A8-44-33-CB-14-4F-49-CB-04-4B-A7-CD-DF-3D-C4-CE-0D-2F-A8-CC-F5-24-98-C7-D4-22-00-C2-2D-28-8C-BF-BA-31-D0-C3-3C-3B-E2-D0-30-41-53-E6-C4-41-E2-00-D3-3C-0B-1B-21-33-58-2E-79-25-22-35-3F-14-48-2C-AD-FF-60-14-88-E8-06-F2-EC-D0-00-CD-7E-BC-6A-AE-BF-AF-53-9E-A2-AE-68-A1-E5-BA-6D-B7-F7-D2-09-DB-F1-F1-08-03-EC-10-DE-24-39-29-B8-37-B6-36-23-37-32-39-75-24-5F-34-71-06-21-2E-3C-E7-FD-2B-2D-D1-9A-30-85-CB-75-3A-25-D8-5C-44-EE-F2-9E-47-10-13-01-3F-D0-2D-53-29-F3-39-67-0A-A0-32-1D-EA-DB-18-B9-D1-24-F3-92-C8-71-CB-61-D1-37-AC-5F-E9-75-9D-48-09-88-A2-14-28-7D-B9-1F-3E-EE-DB-A2-47-F9-00-8A-45-C4-1F-7B-3C-B7-31-87-32-EA-33-9E-2C-7A-27-AE-2C-C5-10-16-31-EE-F5-7B-35-1A-DD-A5-34-E1-CA-90-2A-5A-C1-F5-15-E4-BF-F6-F8-CB-C3-A8-D8-6E-C9-C4-BB-97-CD-EA-A8-9F-CE-DF-A4-09-CD-2A-B1-59-CB-7E-CB-37-CD-03-EE-16-D6-9F-10-D0-E7-E4-2A-9D-01-54-36-DB-1F-4F-30-BC-3C-0E-1B-C0-51-3E-FD-90-59-2B-E0-A6-51-09-CD-3F-3B-30-CA-4B-1B-1F-D9-35-F9-24-F6-FD-DC-9C-19-18-CD-6A-3A-BF-CC-B4-50-32-DB-06-58-19-F4-20-50-F1-10-5B-3C-FA-2A-16-22-16-3D-CF-06-07-45-B4-EE-AA-43-05-DC-49-3C-43-CF-37-33-DC-C7-53-2C-DA-C4-CE-29-3F-C5-CD-2B-0D-C8-B1-30-1C-CC-FF-35-06-D0-76-39-55-D2-E9-39-F9-D1-8D-37-C7-CE-B7-33-B4-C9-36-30-BC-C4-83-2E-5E-C2-2F-2F-EF-C4-B9-31-FA-CD-DE-34-DD-DD-31-37-9F-F3-B3-37-1C-0D-45-36-37-27-A8-33-27-3E-1A-31-EE-4D-C6-2F-13-53-3D-30-7D-4B-3B-32-71-37-CC-34-1D-1A-BA-36-76-F9-25-37-08-DD-DB-35-F8-CB-6E-33-D5-CA-EE-30-FA-D9-77-2F-3E-F5-BA-2F-26-15-BE-31-57-31-E5-34-54-43-2A-38-9A-48-62-3A-1D-43-67-3A-16-38-22-37-AC-2D-81-2F-6F-28-93-22-BE-29-DA-0F-B2-2F-EB-F7-78-36-04-DD-6A-3A-30-C3-D4-39-C4-AF-9F-35-03-A8-9D-30-5B-AF-DE-2D-BB-C5-FD-2E-DE-E6-47-33-F2-0A-19-38-A7-28-59-3A-0D-38-3E-38-3B-35-79-32-AE-21-0D-2C-CB-03-E3-28-9E-E4-B2-2B-95-CC-4A-34-93-C0-27-3F-66-C0-92-46-6D-C7-EE-44-FC-CE-36-37-8C-D1-8E-1E-4E-CD-0C-00-0A-C5-EF-E2-D5-BE-CE-CD-48-C1-0E-C4-43-D0-B0-C4-D1-EA-00-CB-F4-0A-D9-D0-97-27-7F-D1-D0-37-CC-CB-22-36-D2-C2-87-22-7E-BC-61-02-F7-BE-84-DE-BC-CD-33-C0-C3-E7-3C-AE-5A-07-47-AB-F5-23-CA-B5-1E-35-72-C9-73-35-28-E1-84-24-D9-F8-F9-06-49-0E-F8-E4-D7-20-66-C7-85-30-0D-B5-EE-3C-AA-B0-B7-44-75-B8-E1-45-26-C7-AA-3E-0C-D6-9F-2E-5D-DF-44-17-03-E0-05-FC-4A-D8-58-E1-7C-CB-84-CB-94-BE-84-BD-99-B6-6D-B8-30-B7-99-BB-BD-C1-5A-C5-2D-D5-E5-D3-57-EE-EB-E5-BE-08-A1-FA-70-1F-4D-11-DD-2D-7C-28-A6-30-88-3D-46-26-A7-4C-AA-0F-D3-51-6C-F0-44-4A-9B-CE-D6-35-C3-B1-D8-17-4D-A1-BA-F6-6B-A2-7D-DA-3A-B6-66-CA-C4-D8-BA-CA-85-01-4A-DB-86-25-7E-F7-9C-3A-D7-17-CE-3A-58-34-A4-26-01-47-5D-05-45-4D-C5-E2-33-48-38-CB-37-3B-41-C7-2B-2A-6A-D8-A9-17-8D-F8-70-04-FC-1B-04-F0-C2-35-37-DA-5C-3C-A6-C4-18-2D-41-B3-D1-0C-61-AB-C7-E5-99-B1-9D-C3-3E-C7-1C-AF-C6-E8-76-AB-09-0E-27-B6-80-2C-1A-C9-E1-3A-00-DE-AB-34-12-F1-23-1C-18-02-DD-F9-42-13-E0-D9-94-26-64-C7-62-3B-E1-C8-5D-4D-DC-DD-D4-55-6A-FF-CB-4E-0A-23-70-36-A6-3E-2E-11-1B-4C-21-E9-FE-4A-D4-CA-F1-3F-7C-C0-2B-32-AD-CD-49-28-76-ED-CE-25-D9-13-45-2A-3B-32-2D-32-FC-3C-16-39-07-30-CC-3B-6B-10-B8-39-5A-EA-C0-34-5D-CC-02-30-BC-C1-1B-2E-59-CE-D4-2F-99-ED-D4-33-A9-14-81-37-0A-37-7A-38-64-4B-E7-35-B8-4E-16-31-B4-44-D7-2C-53-35-17-2C-FF-28-3A-30-F1-24-17-38-74-29-08-40-7F-32-30-43-4E-3A-63-3D-81-3C-FC-2C-4E-38-C4-13-B9-30-87-F6-DC-2A-82-DB-01-2B-25-C8-20-32-2F-BF-E7-3C-E1-BF-F0-44-81-C6-89-43-14-CE-E5-34-7A-D2-25-1A-05-D2-40-F9-DF-CD-C7-DA-26-C9-62-C6-15-C7-9C-BF-36-C9-77-C4-80-CE-78-CE-C3-D3-BB-D5-50-D5-C6-D4-0E-D1-42-CB-03-C8-61-BE-5F-BE-9E-B6-05-BA-C3-BB-07-C0-FE-D0-3E-D2-C3-F2-1D-EE-9C-17-61-0D-A8-33-6A-28-58-3D-45-39-59-31-07-3E-03-14-7D-39-93-EF-B1-31-F5-CF-0D-2D-F0-BD-48-2F-D2-BB-A1-37-0A-C5-1B-41-CA-D0-BC-44-86-D6-CE-3C-2C-D2-B8-27-2D-C6-2D-09-5E-BA-1C-E9-2C-B8-E7-D0-E9-C5-F5-C7-4A-E3-0D-D1-C8-08-7C-E9-4F-2A-33-0A-15-3C-5B-2A-86-37-3F-42-3E-1E-85-4D-A1-F9-0B-4C-58-D7-4C-41-16-C4-CE-32-E3-C6-40-26-A6-DE-ED-1F-14-03-B8-21-40-28-D9-2A-56-43-2C-38-7C-4E-FC-44-5E-4A-24-4C-0D-3D-6D-49-CA-2E-E6-3A-58-26-D6-21-6C-26-E1-02-2D-2D-18-E5-CC-35-13-D0-44-3B-9F-C9-EB-3A-C6-D3-A0-35-F6-EB-1F-2F-C7-0B-E0-2B-12-2B-90-2E-87-42-66-36-D8-4D-1B-3F-8C-4C-A2-42-58-41-CF-3B-50-30-D6-28-00-1D-5E-0C-24-09-BF-EC-DC-F4-A1-D1-D9-DF-F9-C0-F2-CA-C4-BC-09-B9-6B-C2-AB-AE-23-CC-67-B0-9B-D3-85-C0-D5-D4-3A-DD-C6-CF-4B-00-0E-C8-8E-20-D6-C2-D5-34-F0-C3-28-37-8F-CB-0E-27-E3-D5-E6-09-CC-DC-4E-E9-0D-DB-FA-CF-73-CF-4C-C6-46-BE-BE-CF-21-B0-12-EA-73-AE-48-0E-06-BF-FA-32-9C-E0-1F-4F-69-0A-6B-5C-EA-2E-99-58-26-41-7F-45-3A-3A-27-28-B5-1C-4E-07-17-F4-D8-E9-90-D0-6C-D5-7D-C0-8C-CD-71-CA-1D-D3-57-EA-82-E4-0E-13-FF-FD-C7-33-81-1A-05-3F-9C-34-3D-30-89-47-A0-0D-06-50-7C-E5-D7-4C-3E-C8-E5-3E-AE-C1-E2-28-41-D4-A5-0E-61-F8-58-F4-BE-1F-A9-DD-2A-3B-2B-CD-6A-40-F2-C3-AD-2D-8B-C1-80-09-3D-C4-A2-DF-92-C9-4B-BC-FD-CE-0E-A8-7B-D2-BA-A5-03-D3-BF-B2-A8-D0-62-C9-68-CC-7D-E3-CB-C7-83-FC-78-C4-27-12-E4-C3-D2-23-3D-C7-93-31-6B-CF-3B-3B-0D-DD-30-40-3D-F0-AE-3F-27-08-3D-39-96-22-F6-2C-C0-3B-73-1B-BD-4E-A2-05-A6-56-DB-EC-2B-50-3E-D3-20-3B-22-BC-4A-1B-1D-AC-E8-F7-1E-A8-EB-D9-99-B3-44-C9-7A-CE-4D-CA-C8-F3-39-DC-1C-1A-42-F9-24-36-B2-18-A1-3E-F4-31-55-30-99-3F-0C-10-10-41-8C-E9-67-3A-83-CB-29-32-D9-C1-44-2E-BF-D0-44-31-B6-F2-1A-39-79-1A-FF-3F-42-38-19-3F-32-40-C9-31-15-2F-2C-18-82-0B-B7-F7-BC-E2-9B-D9-DD-C2-77-C7-D4-B4-B8-C7-00-B9-10-DB-C5-C7-21-FC-CE-D5-6E-21-E6-D9-BD-40-94-D1-8C-52-52-C2-46-54-C6-B6-4D-48-5B-B9-27-34-C9-CE-C1-1D-2B-F3-FA-08-19-1B-BB-F6-4E-38-C5-E5-CD-3F-AE-D4-BC-2E-E0-C3-D7-0B-67-B6-C0-E4-1E-B1-80-C8-5E-B8-90-C1-6B-CD-05-D2-F2-EC-51-F3-8C-0F-82-19-4F-2C-6D-38-60-3C-69-48-E5-3D-B0-48-F7-34-A4-3E-CE-29-91-32-E8-24-9A-2B-E8-2A-A9-2C-05-3A-94-33-73-4A-92-3A-C3-51-1F-3B-D9-47-F9-30-3D-2B-DB-1B-AB-02-7A-FF-06-DB-F6-E1-48-C2-91-C9-9A-C1-AC-BA-28-D9-9C-B6-9B-FF-BE-BB-98-25-5B-C6-ED-3B-EB-D1-C2-39-58-DA-3D-20-E9-DC-F9-F9-D3-D8-9A-D6-63-CF-5D-C4-C2-C3-5C-CA-3E-BA-D2-E5-36-B7-80-0B-C9-BD-67-2C-AD-CE-C4-3B-AA-E7-E5-33-13-04-FD-17-21-1E-93-F2-E5-30-58-D1-03-3A-3C-C0-73-3A-88-C5-FE-35-40-E0-89-31-04-09-E9-30-AF-34-1B-35-B2-57-C3-3B-1E-69-19-40-B6-64-05-3D-C2-4B-6E-2F-B2-24-E1-17-94-F9-CF-FA-AC-D5-5D-DF-86-C2-25-CD-13-C5-CA-C9-D1-DB-27-D7-BF-FE-B9-F2-8D-21-43-16-9B-37-75-39-8A-38-FD-53-A6-23-87-5F-9F-00-36-59-E6-DC-56-42-9F-C6-27-20-F2-C6-CA-FA-32-DE-5D-DB-7D-03-A6-C9-25-28-EA-C9-94-3D-79-DB-2A-3B-9B-F8-A8-21-09-18-8B-FA-AB-2F-C5-D3-B7-37-C5-B9-39-2D-6A-B2-FC-12-23-BB-74-F0-E2-CA-19-CF-F2-D6-38-B7-52-D8-6F-AD-00-CF-C7-B1-DA-C1-A1-C0-0F-BB-E0-D4-F8-C2-3A-EA-B2-DB-99-FE-98-FF-FD-11-55-23-1C-25-89-3A-9C-37-EC-3C-0C-47-A9-29-34-4F-84-07-C8-4B-E7-E1-BA-3A-2F-C4-04-1E-5F-B5-DC-FB-03-B6-1D-DD-EA-C0-5F-CA-2B-CE-EF-C8-DE-D6-E8-D8-E4-D7-3F-F5-87-D2-AB-15-15-CB-A1-31-36-C6-24-43-74-C6-66-48-14-CB-AA-43-C3-D0-BC-39-8C-D3-CC-2F-15-D1-9B-29-0B-CA-8E-28-0A-C2-E3-2B-29-BE-89-31-CA-C2-2F-37-C0-D1-FB-3A-76-E9-E6-3B-7D-05-C1-39-2F-20-28-35-9D-34-78-2F-05-40-9F-2A-79-42-C3-28-54-3E-7C-2B-23-37-E2-32-54-30-DE-3C-3D-2C-43-45-B8-2B-FF-46-41-2E-06-3E-78-32-52-29-B5-36-ED-0B-7F-39-5C-EC-E8-39-62-D2-C5-37-E9-C3-BC-33-6C-C2-2B-2F-37-CA-DE-2B-E8-D3-7D-2B-E3-D7-E4-2E-1C-D2-84-35-7C-C4-2B-3D-80-B6-67-42-02-B2-7A-41-6F-BE-B3-37-9E-DC-A9-24-4E-05-B6-0A-4F-2B-8D-EE-B3-40-CD-D5-DB-3C-1B-C5-BE-20-83-BE-3F-F7-CB-C0-27-D1-10-C8-52-BE-6F-CF-E6-C6-19-D3-A0-E7-C9-D1-EB-12-16-CD-75-36-5E-C8-FE-42-DA-C6-F8-32-CB-C9-08-0D-A0-CF-4A-E1-B8-D4-6C-C2-4A-D5-A6-BD-A1-CF-0F-D5-89-C5-C6-FE-14-BC-39-29-A1-B9-BD-42-04-C3-FA-40-18-D9-F5-24-D9-F7-1A-FA-BA-17-CA-D0-9E-30-00-B7-37-3D-7A-B2-37-3D-E5-BE-50-35-DB-D0-F0-2C-FB-DB-AA-2A-3D-D9-F7-30-6F-CA-E2-3C-3A-B9-35-47-35-B2-C8-47-64-BE-7E-39-3F-DE-12-1D-C2-08-75-F9-E8-2E-70-D9-26-42-86-C7-F2-3A-BF-C9-4C-1C-37-DF-C6-F2-47-00-55-CF-51-21-42-C0-E6-36-56-CB-A7-39-90-EB-89-28-85-13-A6-08-0D-33-0C-E3-D8-3D-9B-C1-22-30-09-AC-C6-0F-2B-A6-76-E9-A2-AF-90-CB-D5-C4-C5-C0-78-E0-B1-CC-0E-FD-54-EB-12-16-3F-13-9F-28-41-39-A6-33-F3-53-D6-37-0E-5E-3A-37-F9-56-90-34-F9-41-6C-32-AA-24-5D-32-62-05-68-34-D9-E9-24-37-28-D6-7A-38-10-CC-DC-36-A6-CA-4F-32-94-CE-B7-2C-1C-D3-36-29-D0-D3-A5-2A-7C-CE-E1-31-70-C4-BF-3C-6E-BA-52-46-06-B7-94-48-C1-BF-F0-3E-45-D6-86-28-D3-F6-3F-09-F1-18-EB-E8-41-32-BD-D0-79-3A-05-C8-BE-2E-7D-D1-FD-12-36-EA-63-F0-B1-0A-BD-D1-A2-29-30-BF-41-3F-39-BB-DC-47-3D-C2-B3-44-BE-CC-E7-3A-32-D3-F7-30-A9-D1-EF-2B-95-C9-6A-2D-EF-C0-14-33-3C-BF-D5-37-DA-C9-09-36-44-E1-DC-29-84-00-EE-12-F8-1E-92-F4-87-33-CF-D4-E7-37-88-BA-9E-2A-6F-AB-2E-0F-8B-AA-A5-EC-99-B7-49-CB-60-CF-65-B2-B0-EC-C5-A6-9F-09-25-AA-C4-20-4A-BB-17-2E-7A-D6-6B-2F-34-F6-97-24-3A-14-6E-0F-EA-2A-8E-F3-D0-36-FB-D5-D6-37-6D-BC-9C-31-4F-AC-40-2A-86-A9-F8-27-4C-B5-2A-2E-94-CD-69-3B-3D-ED-74-49-48-0D-84-4F-E5-26-3F-46-99-35-AA-2B-BD-38-1F-05-B5-33-25-DE-88-2C-31-C4-61-29-13-C1-CB-2D-5C-D6-E9-38-12-FC-81-45-57-23-F9-4B-4A-3C-AA-45-9B-3C-22-30-03-24-E5-0E-8A-FC-D4-EA-76-D6-20-CF-82-C1-0D-C5-49-C6-2C-D0-BB-E2-93-EC-1E-0B-10-10-11-2F-CF-2D-55-40-15-3B-75-38-1F-33-DA-1A-AF-18-C5-F2-98-F4-25-CE-21-D2-BF-B7-AA-BA-3B-B3-82-B2-91-BC-F8-B7-DC-CA-E5-C4-FA-D4-CA-D1-D6-D5-08-D9-70-CE-BD-D8-F6-C4-DC-D2-8C-C1-7E-CB-54-CA-92-C6-7D-E0-00-C6-85-FF-0E-C9-D7-1E-28-CD-EB-34-79-CF-97-3A-83-CE-6C-2D-E6-CA-4D-10-27-C7-6F-EA-B4-C6-2E-C5-8D-CC-90-A9-40-DA-1D-9E-77-EF-6D-A5-FC-09-AB-BD-28-26-FE-E0-6B-3F-D8-06-08-51-F0-25-E6-56-9C-36-9F-4E-F8-34-91-38-3E-22-82-18-B1-04-6E-F5-01-E6-FC-D7-60-D0-16-C8-3C-CB-36-CA-AF-D8-9A-DD-8E-F4-2D-FC-A7-15-92-1C-B0-30-84-35-FF-3B-58-41-B4-32-08-40-58-16-E1-36-59-EE-D5-2D-A0-C5-8E-2B-2E-A7-1C-32-E7-9A-BA-3D-6F-A3-69-46-C1-BD-C1-43-71-E2-39-31-F2-07-03-11-3E-25-EE-EB-10-34-38-CE-2C-32-9D-C2-9C-21-BB-CD-D4-07-CB-EB-51-EC-C8-11-BF-D6-91-31-3C-CD-4F-3F-EB-D2-DE-35-2E-E7-79-18-CB-05-FC-F0-DC-27-C0-CB-74-45-EC-B2-9C-57-11-AB-1B-5A-97-B2-8F-4C-B3-C3-7A-32-D1-D7-31-12-A8-EA-00-F3-8C-FB-0A-DB-84-0C-8D-CD-CD-1F-2A-CA-41-35-59-CD-21-49-F4-D1-00-55-53-D3-91-52-29-CF-FE-3E-7D-C6-2B-1D-59-BD-B1-F5-43-B9-44-D4-00-BF-80-C3-7C-D0-BF-C8-9E-EB-CA-E1-88-0A-54-05-43-25-52-26-4E-34-B4-38-21-33-DD-35-C6-21-F0-1E-E8-04-54-FC-4B-E4-8A-DA-45-C8-A3-C5-1C-B7-1D-C5-21-B3-9B-D9-62-BA-16-FD-BA-C7-49-25-E5-D4-49-47-C2-DC-DC-5A-E1-DC-7D-5C-FD-D5-91-4D-4D-CB-22-33-19-C1-E5-13-40-BB-53-F6-30-BC-76-DF-8D-C4-83-D2-7F-D3-F4-D0-4A-E7-C8-DA-DC-FD-98-EE-08-15-72-09-8E-2A-D9-26-14-3C-2C-41-3F-47-AA-52-1E-4A-E1-56-B6-43-16-4C-7B-34-1B-34-69-1E-1D-14-BA-04-6F-F3-22-EB-97-D9-FE-D4-4B-CC-B7-C4-0C-CE-8C-BB-B8-DD-C1-B9-28-F7-03-BF-87-14-BA-CA-D5-2F-1F-DC-2E-44-05-F2-80-4E-8F-0A-BB-4D-0A-23-97-42-2D-38-33-2F-AF-46-A0-16-1A-4C-65-FC-76-47-FE-E3-93-39-50-D0-D3-24-38-C3-85-0C-4C-BD-1B-F4-0D-BE-84-DE-6F-C4-CF-CD-72-CF-1C-C3-95-DE-A7-BE-BB-F1-E7-BF-98-08-89-C5-D2-21-6E-CD-5A-3A-DF-D4-93-4D-10-D9-5C-56-01-D8-D6-50-64-D1-48-3C-26-C7-36-1C-3B-BD-12-F8-86-B8-59-D9-2C-BD-A1-C8-DF-CC-A8-CA-EE-E5-72-DE-7E-03-57-FD-20-1F-17-1D-13-33-2C-33-5E-3C-3E-38-E4-3B-64-2A-DD-35-86-0D-ED-2F-C3-E9-96-2E-9D-C8-26-33-F7-B1-19-3B-F3-A9-13-41-73-B0-47-3F-03-C2-29-32-AA-D9-3B-1A-B8-F2-25-FC-F5-09-0B-DF-DC-1D-B9-C9-06-2E-F7-BF-42-3A-1B-C1-F9-41-91-C8-02-44-07-D0-19-3F-63-D2-96-32-1C-CE-0C-1F-01-C6-7D-06-E9-BF-1D-EC-08-C2-AC-D3-FF-CF-B2-C0-05-E9-D5-B5-EF-07-75-B4-28-25-96-BC-BC-39-F7-CC-1F-42-43-E3-7A-3F-63-FC-EC-36-E9-14-11-2F-9A-29-F1-2C-07-38-AE-31-1E-3F-01-3A-6C-3F-BC-3F-F0-3A-A4-3C-86-34-65-2D-05-2F-42-13-69-2C-CF-F3-46-2D-C3-D6-C2-30-E7-C2-14-35-72-BB-4F-38-F7-BE-29-39-5A-C8-6E-37-46-D1-FE-33-09-D5-5A-30-73-D2-0D-2E-FE-CB-14-2E-2F-C6-8E-30-FA-C4-BA-34-8F-C9-39-39-80-D1-5D-3C-F6-D7-71-3C-3C-D8-F0-37-7B-D0-BD-2D-4B-C3-64-1D-29-B7-72-07-F7-B3-CB-ED-69-BF-B7-D3-FA-D9-86-BD-F5-FD-B1-AF-FC-20-B3-AD-C7-37-DA-B8-89-3A-94-CF-3C-28-77-ED-59-07-31-0C-AB-E3-03-25-05-CA-73-32-94-C3-A3-31-B2-D2-F2-22-5D-F2-C1-09-7F-18-7F-EB-F1-39-62-CE-73-4E-1B-B8-09-53-C9-AC-01-4A-5C-AE-D1-38-53-BC-12-25-E9-D3-11-12-A1-F0-19-00-30-0D-98-ED-A5-24-5B-D9-A9-33-97-C4-65-39-7F-B3-CE-37-FB-AB-E8-32-FB-B2-42-2F-AA-C9-12-30-E8-EB-BB-35-ED-10-6E-3D-05-2E-13-42-5E-3A-6D-3E-67-32-7D-2F-42-19-35-16-CD-F7-8F-F7-8D-D9-D7-DA-B0-C8-DA-C6-B8-CA-20-BF-ED-DE-70-C2-12-FF-6A-CB-E5-21-0A-D3-55-3E-F9-D3-48-4E-35-CD-17-50-B5-C2-65-46-BD-BB-C1-36-74-BF-A5-27-50-D1-7A-1E-13-EF-39-1E-53-11-C7-26-7E-2E-1E-35-FF-3E-18-44-9C-40-D9-4D-78-37-60-4D-01-2C-28-40-DB-26-3C-27-80-2C-61-07-C1-3A-11-E8-79-49-69-D1-44-4E-9B-C9-9F-41-D0-D2-11-23-48-EA-58-FA-30-09-D8-D4-F1-26-34-C0-29-3C-6A-C4-28-45-05-E0-EC-42-28-08-42-3A-C2-2C-6C-31-FF-3E-50-2D-70-37-67-2F-31-19-38-35-AD-F0-93-39-7F-CE-EF-36-98-C0-D6-29-91-CC-7A-12-79-ED-AC-F4-01-16-85-D6-01-36-56-BE-F8-40-B9-B0-D0-32-80-AF-01-11-BB-B9-CF-E7-87-CC-F9-C4-2B-E4-30-B2-0D-FD-B2-B1-2F-14-43-BE-54-27-51-CE-00-35-A8-D8-81-3C-9B-D8-20-3E-D4-CF-2B-3B-2D-C5-D1-35-3E-C1-92-30-4D-CA-89-2D-6B-E1-AF-2D-03-02-8F-30-D6-23-8E-34-65-3E-B5-37-34-4C-93-38-6B-4C-E3-36-51-42-95-33-0B-33-4C-30-DD-22-91-2E-4C-13-2A-2F-18-03-D5-31-FA-EF-89-35-1C-D9-ED-38-FB-C0-CD-3A-82-AD-37-3A-08-A6-50-36-05-B0-1E-2E-E8-CB-98-20-B0-F3-1E-0D-29-1C-51-F4-A7-38-C5-D8-CA-3F-17-BF-63-2F-13-AD-BB-0D-FE-A7-8C-E7-99-B2-4D-CB-AA-CB-B0-C3-C1-ED-77-D3-75-10-6E-F4-D0-2A-D2-19-13-36-5C-35-D0-2F-BE-3C-AC-1A-68-2D-7C-FD-19-0D-37-E1-2D-E7-5F-CE-CB-C7-B6-CA-22-B7-DE-D7-9E-B6-2A-F3-27-C1-73-16-20-CE-96-39-A6-D5-58-54-2C-D4-35-60-DB-CB-F6-59-49-C3-A3-42-27-C2-85-1F-91-CD-22-F9-9B-E5-21-D9-2F-05-96-C7-2F-24-90-C8-DC-3A-C6-DA-F0-44-F9-F7-0B-43-1F-17-12-3A-93-2F-B0-30-29-3C-49-2C-D5-3C-AC-2E-38-36-73-35-3A-2F-43-3B-AB-2D-41-3A-73-33-A2-2E-8E-3D-4B-18-57-45-E0-FA-A3-43-6D-DC-42-34-49-C3-62-18-21-B4-B4-F6-D9-B0-2C-D9-94-B8-46-C9-95-C8-57-CC-7F-DD-62-E1-4A-F4-4D-01-B4-0A-51-21-1A-1F-A0-36-16-30-E1-39-45-3C-67-29-73-42-54-09-1D-42-0A-E2-12-3C-95-BD-B2-32-E8-A4-95-29-BC-9D-7D-24-6A-A9-FC-25-D9-C4-3F-2E-5A-E9-93-3A-2F-0E-03-46-A0-2A-D8-4A-19-38-A4-44-F0-33-15-32-30-20-CE-15-15-03-06-F6-1E-E5-B9-DA-3A-CE-3A-CB-0C-C3-DA-CB-61-C3-86-DC-86-CA-CD-F8-92-D1-5B-19-B3-D2-4A-36-1C-CC-77-49-2C-C1-F8-4F-1D-B9-65-4A-B8-BB-D5-3B-65-CD-38-28-6B-EC-CC-12-C4-10-62-FD-D4-2E-8F-E8-F9-3B-B4-D4-1A-33-12-C3-1C-17-53-B6-2C-F2-FF-B1-04-D2-16-B9-AA-C2-59-CC-E4-C9-25-E9-35-E5-7E-09-36-0B-7B-25-93-2F-A6-35-ED-47-75-35-8D-4F-D2-24-7E-48-2C-08-CD-39-02-E7-F1-2B-76-C9-14-25-DF-B5-DE-26-30-AF-88-2E-D2-B4-F4-36-AD-C3-88-3B-CD-D7-72-3A-D8-ED-43-35-C0-03-BD-2F-95-18-9D-2D-A9-2B-81-30-C1-3B-F4-36-BA-46-F8-3C-05-4A-C3-3D-B4-43-CB-35-8E-33-35-24-A3-1B-29-0B-06-00-F2-EE-B0-E5-8B-D4-09-D1-3B-C0-9F-C4-C5-B4-91-C0-3D-B3-DA-C2-4F-BB-46-C8-A2-CB-B3-CD-0A-E2-06-D1-9F-FB-96-D1-E2-14-F5-CF-3A-2A-60-CD-BD-38-10-CB-1A-3F-C8-C9-1F-3E-B9-C9-8B-38-A1-CA-16-32-09-CC-09-2E-76-CD-EF-2D-84-CE-24-31-E6-CE-59-35-6B-CE-EB-37-17-CD-50-37-3D-CB-F1-33-90-C9-EF-2F-E4-C8-ED-2D-D9-C9-88-2F-6D-CC-43-34-C5-CF-9A-39-52-D2-40-3C-70-D2-F7-39-35-CF-0C-33-35-C9-A3-2A-B2-C2-68-25-2A-BF-3C-27-35-C2-E9-30-1E-CE-0E-3F-D1-E2-EE-4A-88-FD-08-4D-8B-19-6A-40-A0-31-4B-25-AF-41-B8-01-ED-47-C8-DF-07-45-05-CA-50-3B-67-C7-64-2D-94-D8-FA-1C-65-F7-6E-0A-13-19-5E-F5-08-32-FD-DD-D7-39-59-C6-E9-2D-C8-B2-E6-11-FB-A8-03-EE-DD-AD-F2-CB-10-C3-C9-B3-35-E5-E8-A9-FF-0B-8B-AE-67-2C-B7-BE-61-3C-E2-D5-B5-36-8B-EF-6C-1D-30-08-97-F9-96-1D-51-D8-85-2E-03-C6-56-3A-B0-C9-A7-40-26-E2-41-41-5F-06-21-3C-DB-28-76-31-B8-3C-A2-21-78-3A-46-0D-91-22-78-F5-DF-FC-24-DC-4E-D5-5F-C4-3B-B7-53-B2-87-A9-7E-AA-DF-AC-52-B0-BE-BC-8C-C4-5A-D2-0C-E4-F1-E7-DE-07-F9-FA-D2-26-21-0C-47-38-85-1D-31-37-26-30-23-24-22-42-53-05-BA-4E-75-E4-40-50-17-CB-01-43-06-BF-B8-27-3E-C0-4D-04-56-C9-3F-E2-47-D2-60-CB-64-D4-45-C6-AC-CD-E1-D3-F0-C1-59-EF-2F-B9-06-10-C1-BB-CA-2C-1E-CE-3B-3F-18-EE-73-45-FC-12-E4-41-B3-30-8A-39-A2-3C-7F-31-28-32-0A-2D-E2-14-D0-2C-90-EF-68-2F-13-D0-9F-32-25-C2-C5-34-F5-CA-57-35-74-E7-DF-34-E4-0D-5B-34-F1-31-89-34-7F-49-7C-35-2D-50-9F-36-49-48-F0-36-05-39-2A-35-DD-2A-E6-2F-FD-23-A5-25-0C-26-33-15-43-2E-44-FE-72-37-5B-E2-CB-3C-71-C5-32-3C-AF-AD-E8-36-05-A2-7E-30-BE-A7-BE-2C-F5-BF-9C-2D-05-E6-50-32-0D-10-DC-37-B0-31-C1-3A-55-40-FC-38-4E-37-35-33-21-1A-85-2C-BD-F3-F6-28-AB-D2-5B-2B-98-C3-9C-33-4D-CC-52-3E-56-E9-EA-45-3A-0F-E3-44-FA-2E-31-38-0A-3C-B8-20-49-31-20-03-01-13-31-E6-13-ED-3F-D0-31-CE-D6-C4-1F-C2-8A-C3-53-CD-7C-C8-AD-EB-41-CE-9A-12-5A-D0-93-35-27-CD-03-4B-94-C6-81-4F-29-C1-5D-46-FE-C1-60-37-7B-CC-02-2B-CA-E0-BE-26-A8-FB-05-2B-8D-17-78-33-B4-2E-1F-39-1E-3D-84-35-D0-41-60-25-DA-3E-E6-09-42-38-56-E8-44-32-27-C8-B5-2F-A8-B0-02-31-E6-A6-28-34-86-AC-8A-35-A9-BF-42-31-B8-DB-92-24-A6-FA-EE-0E-48-16-73-F2-6F-29-AE-D3-B5-30-B7-B8-02-2B-C9-A7-B0-19-9A-A5-55-00-E2-B3-26-E4-58-D0-E3-CA-C3-F4-8C-B9-37-18-10-B3-64-31-7A-B7-67-39-CF-C3-30-2E-DE-D2-93-13-BC-DE-6F-F2-B3-E2-EF-D5-E9-DC-E1-C7-2F-CF-50-CD-A1-BE-B5-E4-1C-B2-A0-06-F5-AF-92-28-B1-BB-ED-40-8A-D4-82-4A-57-F5-31-46-F8-15-08-3A-CF-2D-34-2E-81-36-37-29-11-2E-F2-2C-6E-17-E8-35-6B-F9-F5-3C-58-DC-B6-3A-37-C7-0E-2B-7C-BD-36-0F-4A-BE-5D-ED-4D-C5-24-CE-E0-CC-1E-B9-8B-D0-FA-B1-E3-CE-91-B7-04-CA-3F-C5-8C-C6-A3-D5-87-C9-56-E5-32-D6-45-F4-86-EC-D4-04-00-09-70-19-C9-25-D7-31-BA-3C-AF-49-6E-49-74-59-98-4A-82-59-52-42-FE-45-34-35-AA-21-BB-28-1A-F6-8E-21-D2-D0-21-22-44-BE-1C-2A-BC-C4-92-36-74-E1-F0-42-2D-09-47-4A-68-2C-A7-48-6F-3D-44-3C-CA-35-18-26-D6-18-E0-09-5D-F2-66-ED-D5-D1-22-D7-20-C4-96-CC-76-CE-C4-D0-70-EC-28-E3-FE-11-C1-FF-56-30-08-20-C1-3B-A7-3C-FF-2F-69-4F-A1-11-BE-54-06-EC-69-4C-F7-CC-27-39-B8-BF-89-1F-56-C9-90-04-68-E7-59-EC-59-11-6E-D9-79-3B-B4-CC-9E-5A-D2-C5-1F-67-C5-C3-88-5E-44-C5-C6-43-F2-C8-08-1E-62-CD-CE-F6-21-D1-A0-D7-E1-D2-C8-C7-D3-D1-8A-CA-08-CE-2A-DE-9E-C8-2A-FC-B3-C3-F7-1A-D8-C1-A9-30-69-C5-15-36-DC-CF-32-29-50-E1-D1-0D-6D-F8-51-EC-92-12-92-CE-39-2C-4A-BC-7C-41-3C-B8-B1-4E-7F-BF-0A-51-27-CB-48-47-A4-D3-57-32-51-D4-99-15-9E-CD-A0-F6-DB-C4-2D-DC-AA-C1-93-CC-46-CA-F1-CB-60-E0-C9-DA-00-00-A1-F5-07-21-E8-15-9B-3A-D7-33-E1-46-C7-48-61-45-F2-50-E7-3A-39-4C-0B-2F-85-3D-8B-28-2C-29-3F-2A-24-13-1D-32-D0-FD-B0-3A-E9-E9-48-3E-62-D7-32-3A-B5-C6-63-30-CD-B9-95-26-DD-B3-48-23-1A-B8-15-2A-00-C8-35-39-EE-E1-8E-49-FB-00-85-51-4D-1E-5A-49-7E-33-2C-2F-12-3D-A2-08-D9-3B-5E-E1-86-34-99-C6-8C-2D-CB-C1-2E-2C-92-D4-FF-31-9E-F7-0A-3C-59-1D-10-44-1E-37-5C-43-F8-3A-E7-35-8E-27-76-1C-9F-04-97-FC-EE-DF-7A-DE-D1-C7-94-C9-A2-C5-84-C1-3C-DA-B9-C4-CD-FD-4D-CD-F4-22-EB-D3-D7-3B-4F-D3-2A-3F-E6-CA-38-2B-3F-BF-1C-06-10-B8-25-DB-9F-BC-AD-B6-2A-D0-0F-A2-D1-EF-23-A1-22-13-E9-B1-10-2F-2D-CE-35-3A-27-EE-9C-30-F6-0A-86-15-0B-20-76-F2-4C-2B-CD-D3-5D-2C-69-C4-C0-23-DA-C9-65-12-B4-E2-F5-F9-6A-07-79-DD-45-2D-C0-C1-2E-4A-F0-AC-CA-57-0D-A5-E2-54-DB-AD-CD-44-F6-C6-56-2D-1B-EB-39-14-24-11-49-FD-B5-2E-E6-E9-9C-3B-B7-D9-B0-34-14-CC-F8-1C-44-C1-8F-FC-F1-BA-92-DD-8D-BB-61-C8-0E-C5-A5-C0-AD-D7-47-C4-41-F1-E9-CC-9C-0D-1F-D3-C3-27-FE-D1-65-3B-7E-C9-0F-46-97-BE-87-47-01-B9-3F-41-91-BF-4E-35-C3-D4-73-25-01-F5-A8-12-7C-17-6D-FD-4D-31-8F-E6-B0-39-F5-CF-93-2D-DD-BC-00-11-49-B1-EC-ED-B3-B0-B1-D0-99-BC-B3-C3-77-D3-CD-CB-DC-F0-D5-E6-92-0E-BA-0C-8F-26-94-32-F4-34-64-4E-49-39-17-5A-73-36-D6-54-5E-31-57-42-DC-2E-C0-28-93-31-2B-0E-C6-38-CE-F6-8B-40-56-E4-61-43-80-D6-86-3C-58-CC-30-2A-56-C5-B1-0E-C5-C1-24-F0-47-C2-A2-D6-E2-C6-A0-C9-36-CE-60-CD-6C-D5-78-E1-1C-D9-DC-00-CB-D6-7B-23-69-CE-C0-40-E6-C2-1A-52-84-B9-AF-54-09-B8-AA-49-59-C2-31-35-A0-D8-84-1C-D3-F6-29-04-EC-15-C3-EE-7D-2E-02-DD-92-3B-86-CE-A8-3C-23-C3-C8-35-C3-BB-B6-2D-6B-BA-D4-2A-5D-C1-0E-30-B3-D1-4C-3B-3E-EA-18-46-43-07-6D-48-5C-23-7C-3C-2D-39-C9-21-30-45-33-FE-CE-46-29-DC-21-40-C9-C6-97-34-70-C5-13-27-A4-D8-97-18-BE-F9-1F-08-8C-1D-ED-F3-D9-38-98-DB-E9-44-C6-C1-F3-41-6F-AC-77-36-25-A3-CE-2B-E1-AB-7A-29-AF-C7-67-31-E0-F0-D1-3E-E9-1B-85-48-12-3B-5C-45-A1-43-F6-30-7C-32-7D-0E-12-0E-08-E8-76-E4-C6-CA-28-C6-80-C1-7C-BF-E2-CF-5A-D3-99-F0-C8-F9-33-17-E9-22-F8-34-7B-3D-A9-3E-23-3E-D0-30-5F-24-BC-10-F8-FA-E7-E9-85-D3-09-C9-F7-BE-00-B7-45-C6-B7-B5-76-E6-3D-C0-CE-11-C5-CD-A9-35-0D-D6-84-42-23-D5-BF-32-EA-CC-08-0D-D4-C3-90-E1-9E-C1-08-C3-9D-CB-95-BE-47-E2-26-D6-0B-01-AE-FF-47-20-82-29-76-38-F0-41-05-45-B8-3E-C7-45-3D-21-64-3E-BE-F5-62-34-04-CE-BC-2C-00-BA-16-2A-79-C1-48-2C-74-E1-1B-31-22-0E-C4-35-3F-38-3E-38-46-53-0B-38-E3-59-FE-35-BA-4E-7F-33-BC-39-BC-31-8B-23-2F-31-5E-11-9B-31-41-03-76-32-75-F5-50-33-E5-E3-05-34-BD-CD-A1-34-28-B7-1F-35-28-A8-49-35-F0-A8-CA-34-7E-BD-7E-33-A4-E2-B9-31-28-0E-4D-30-1F-32-30-30-43-42-E9-31-19-39-10-35-79-1A-3F-38-6F-F2-A4-39-9B-D0-EF-37-19-C2-39-33-50-CC-5B-2D-DF-EA-55-29-71-11-F9-29-B5-30-55-30-76-3C-AD-3A-52-30-8A-44-3E-11-2E-48-5F-EB-D4-40-2C-CD-EC-2C-EC-C1-57-0F-B2-CD-F2-EE-52-EC-8A-D4-83-13-E5-C7-12-37-FE-CC-76-4D-94-E2-D6-52-94-02-B3-49-42-24-16-39-2B-3F-49-29-C9-4D-9C-20-D0-4E-6B-21-BA-44-EA-29-FB-33-A1-35-C7-20-99-3F-75-0D-3A-44-38-FA-2B-42-3D-E6-05-3A-6C-D1-41-2D-DA-BD-22-1D-E9-AF-3C-0A-F4-AC-D2-F4-D4-B8-C6-DD-73-D3-69-C7-9B-F7-AB-B5-D7-1B-32-AD-60-35-B5-B1-FF-3B-31-C4-6B-2D-C5-E1-9E-0E-FA-03-75-EA-51-22-EB-CD-D6-34-61-C3-AA-36-CE-CE-A1-27-56-EC-4B-0C-08-12-5F-EC-DC-33-22-D0-66-48-C7-BD-44-4C-AB-B7-D6-42-10-BC-1F-34-51-C6-CF-28-E5-D0-4C-26-77-D7-8A-2C-1F-D8-AC-36-9E-D3-F8-3D-83-CC-9D-3D-D8-C5-75-35-F9-C1-3C-2A-12-C2-22-23-56-C6-D2-25-A4-CE-F0-32-16-DB-DA-44-1D-EC-A0-51-DF-01-77-4F-4B-1B-A6-39-61-35-9E-13-3E-4B-90-E8-33-57-58-C7-A9-54-5C-BC-2E-42-01-CC-C3-22-3B-F0-AC-FD-88-1A-AB-DC-AA-39-02-C9-CA-40-53-C8-F5-2C-6C-DA-71-06-1C-F9-67-DD-FC-19-13-C3-E4-31-79-C2-AB-38-BF-DB-DE-2B-25-04-6C-0F-9E-2A-18-EC-0F-3F-2C-CC-0F-39-D3-B7-55-1B-63-B2-65-F2-B2-B9-31-CF-8A-C7-07-C0-80-D4-D7-CA-05-DB-0D-EB-5D-D9-C6-13-C8-D1-2D-35-F0-C8-A6-42-6D-C3-49-37-98-C3-0D-17-9F-C8-87-EC-32-CF-95-C4-71-D3-C7-A9-01-D3-69-A1-4E-CE-E3-AA-43-C8-3B-C1-AE-C4-A8-DD-1B-C6-F4-F9-3B-CC-EB-11-D5-D3-98-23-49-D8-C7-2E-0C-D6-5B-34-D5-CC-CF-35-6E-C0-03-35-7A-B7-F9-33-B1-B8-5B-34-C2-C7-CA-36-4C-E3-4C-3A-F9-04-37-3C-DF-23-01-39-23-38-B6-2D-51-3E-7F-19-C1-38-88-FE-77-2E-A7-E1-C9-27-D6-C8-53-2A-19-B9-16-36-B8-B4-24-45-CA-BA-2C-4E-16-C8-D2-48-E3-D8-F4-31-BF-EA-CF-0D-3F-FD-F5-E6-3C-11-6B-CA-25-27-58-C2-3D-3D-A1-D1-0D-4F-67-F2-87-56-01-18-A7-4E-D7-33-50-36-1F-3B-00-12-1E-2B-3A-EB-31-0A-94-CD-45-E5-7D-C2-BA-CA-6A-CD-D6-C4-2F-EA-E0-D5-47-0E-70-F7-A8-2C-0D-1D-96-3A-DD-38-7D-33-9A-40-3F-1A-F8-30-A7-F7-54-0E-A4-D6-CA-E2-10-C0-A3-BA-AF-B7-76-A0-8D-BB-56-9A-B1-C5-A6-A8-36-CF-A6-C6-5C-D3-40-EC-3B-D1-3E-10-BD-CB-80-2A-FC-C7-AA-35-F6-CA-29-30-91-D7-75-1C-9A-ED-88-00-F1-09-87-E4-8C-27-C3-D0-D4-40-79-CB-EF-50-FF-D6-B8-54-EC-F0-5B-4B-B6-12-86-36-A7-33-3C-1A-90-4B-02-FC-53-55-AD-E1-1B-50-C4-CF-0F-3F-19-C8-98-27-22-C9-0E-0F-89-CE-E4-F8-E0-D2-16-E6-FE-D1-FA-D5-F3-CA-E1-C7-CC-C0-96-BC-7C-B9-BA-B6-5C-BB-BE-B9-35-CA-F9-C7-1B-E5-C4-E0-1B-06-D0-FF-15-24-2E-1E-FA-35-CE-34-2B-36-55-3F-9B-24-04-3E-C3-06-99-35-86-E5-20-2D-E9-C9-A7-2A-EF-B9-4D-30-F6-B6-1B-3B-E1-BD-47-44-FD-C8-56-44-93-D2-C0-36-0B-D7-4C-1C-D8-D5-18-FB-F5-D0-17-DC-7A-CB-45-C7-03-C8-40-C0-92-C7-E1-C4-79-C9-7F-CE-FD-CB-3E-D5-63-CD-ED-D3-DB-CC-8E-CA-E4-CA-6C-BE-48-C9-A1-B7-91-CA-35-BD-54-D1-A4-D1-5F-DF-4A-F1-05-F5-88-13-9C-10-02-2E-4E-2E-96-38-86-48-61-30-04-59-89-18-A1-5A-C3-F8-33-4B-3B-DA-F9-2C-47-C4-C2-06-3B-BA-7A-E2-FD-BA-54-CA-4F-C2-5E-C5-F5-CA-CD-D4-D5-D0-15-F3-41-D2-80-15-32-D0-C3-2F-9F-CD-59-38-5D-CE-0D-2C-EA-D5-38-0F-5D-E6-42-EC-8F-FF-DD-CF-A6-1E-6A-C4-22-3E-52-CE-C9-56-AD-EA-6A-61-99-10-42-59-B1-34-3F-3E-2E-4D-13-16-15-55-59-EB-77-4D-A5-CA-61-3C-3A-BE-1F-2A-08-CA-17-1E-96-E9-4B-1C-14-11-78-24-70-31-BE-32-0D-3E-61-41-E1-31-CF-4A-AC-11-38-4B-58-EA-55-41-DD-CB-5D-2E-BF-C2-76-15-D3-D2-EC-FA-8E-F5-82-E3-A8-1C-C1-D3-01-38-3E-CF-52-3C-D3-D7-D0-27-E2-EC-E0-02-F9-0A-99-DC-19-2C-83-C4-D2-48-54-C4-0C-5A-1F-DC-0A-5B-87-02-F3-4A-A9-28-59-2D-F5-3F-67-09-95-3F-FC-E7-4F-27-1C-D1-FF-FE-C0-C9-31-D3-94-D2-77-B0-1F-E8-5E-9F-1C-04-56-A2-8C-1F-04-B6-C0-34-6A-D3-B4-40-BB-F2-6D-43-BA-0D-53-3F-07-21-F7-37-28-2C-D1-30-C3-30-49-2C-8E-31-50-2B-55-31-88-2D-3C-32-AA-31-42-35-18-36-02-3A-47-39-A6-3E-29-3A-46-40-6E-38-BD-3B-A5-34-DB-2E-25-30-9D-19-B0-2C-E9-FE-E2-2B-4B-E4-7C-2E-A6-D0-D9-33-22-CA-EF-39-05-D4-F1-3D-46-ED-7C-3D-6D-10-E1-37-ED-34-E0-2E-93-51-53-26-17-5F-C4-22-3F-5A-47-27-9D-44-8F-33-F2-23-42-43-69-00-0B-4F-51-E2-4A-4F-0F-D0-74-3F-C4-CC-AA-20-DA-D7-3A-FA-9D-ED-91-D7-62-08-23-C4-13-22-D1-C6-B0-35-C3-DE-76-40-2C-03-5F-42-47-26-D9-3D-8C-3A-CA-36-FD-37-19-31-71-1F-2F-2F-56-FA-FC-30-05-D7-DE-33-21-C3-8A-33-44-C6-B6-2B-51-DF-F3-19-3E-05-FD-FE-18-2B-06-DF-59-45-BD-C0-4E-4E-66-AB-BA-47-A0-A4-34-39-8D-AE-29-2C-10-C7-66-27-4C-E8-33-2C-44-0A-1A-36-F8-24-56-3D-71-32-97-3A-31-30-62-2A-B5-1F-99-0E-FB-05-8B-ED-49-EA-45-CF-71-D4-7A-BA-04-CB-49-B2-B3-D1-E2-B5-41-E8-D3-C1-4C-0A-28-D2-18-30-31-E4-4D-50-24-F7-58-62-63-0B-E4-60-FD-20-9A-4B-5E-36-9E-27-ED-47-5A-FE-FE-50-E8-DA-AB-4D-CC-C6-C2-3C-F8-C6-D2-20-2D-DA-F4-FF-4D-F9-1F-E2-99-19-C9-CE-2C-30-AE-CA-89-35-72-D6-07-28-A8-EE-4A-0C-F4-0C-B5-EB-07-2A-50-D1-AA-3F-2C-C6-44-4A-97-CE-90-49-DC-E8-53-40-03-0E-50-33-21-34-CA-27-5E-51-EC-21-C0-5E-AE-23-D4-59-55-2C-DF-44-AC-38-C2-25-02-44-11-04-90-49-14-E7-D9-45-31-D4-BB-37-2B-CE-DC-20-19-D5-4E-05-D4-E6-9D-EA-AF-FF-81-D6-25-1B-97-CD-75-34-53-D2-3F-47-6F-E4-29-50-D2-00-73-4D-00-22-6D-3F-04-41-8A-28-C9-56-F3-0C-B7-5D-8E-F1-44-53-C8-DA-04-39-75-CB-BD-14-3C-C4-5A-EF-B1-C3-90-D2-16-C7-09-C6-77-CB-E6-CC-A1-CE-75-E4-AB-CF-D1-04-EB-CE-4C-23-63-CD-DF-35-12-CC-6C-36-7B-CB-9D-24-8F-CB-C4-05-E6-CB-BD-E2-25-CC-C8-C4-3B-CC-91-B2-5E-CC-82-AE-C2-CC-E4-B6-5D-CD-80-C7-D6-CD-D1-DB-AF-CD-C9-F0-AC-CC-54-05-19-CB-90-19-CA-C9-5D-2D-B4-C9-1F-3F-4F-CB-84-4B-27-CE-85-4E-DB-D0-32-45-B9-D1-85-2F-B9-CF-34-11-3F-CB-12-F1-43-C6-32-D7-8C-C3-5E-CA-4B-C5-E5-CD-B0-CB-A2-E0-48-D4-6B-FD-BD-DA-D1-1C-C8-DA-6A-37-90-D2-E7-47-49-C4-5B-4C-21-B6-4F-46-2D-B0-E5-39-F7-B8-71-2C-2B-D2-E5-22-EE-F6-83-20-DF-1C-12-26-B2-37-AD-31-FE-3D-3B-3F-54-2D-85-49-BD-0B-9E-4B-C5-E5-6C-42-C1-C9-D4-2D-43-C2-27-11-FF-D1-87-F2-F5-F2-4D-D9-27-19-EC-CB-C8-37-FC-CD-85-46-17-DF-A2-44-F7-FA-9A-38-C6-1A-71-2C-28-37-9A-28-48-4A-B9-2F-1C-51-56-3D-BA-4B-0C-48-9C-3C-38-46-5F-27-F8-32-8A-0F-1B-11-D8-F7-95-EA-28-E2-A1-CC-D1-CF-3A-C2-1C-C2-51-CF-6B-BA-E9-EE-05-BA-D7-14-9A-C1-7F-32-CC-D0-8C-3C-FB-E5-42-2F-7B-FE-C9-0F-0A-17-F9-E9-74-2C-C4-CB-24-3C-20-C0-81-44-5A-CB-39-45-1A-EA-56-3F-27-13-43-35-DC-3A-85-2A-F1-56-05-23-3E-61-0A-22-C3-58-EC-28-14-41-17-36-B2-20-E7-44-17-FF-BF-4E-1A-E3-3D-4D-CE-D1-E1-3C-E1-CD-13-1F-5B-D7-8A-FA-BB-EB-8D-D9-65-06-7D-C6-91-21-D8-C7-A0-37-59-DD-99-44-8D-FF-32-47-29-22-29-41-7D-38-93-36-3A-3A-5E-2C-8D-26-95-26-4F-04-14-27-20-DF-1A-2D-A5-C2-DD-35-EA-B5-C9-3D-F4-B8-BA-41-6D-C5-DF-3F-15-D2-DB-37-4E-D7-4D-2A-B3-D2-3E-18-0F-C8-C8-02-5D-BF-46-EB-CB-C0-BF-D3-AC-D0-3C-BF-3F-ED-A0-B1-53-0F-AD-AE-66-2D-9F-B8-D0-3F-E3-CE-F5-43-85-ED-18-3D-D1-0D-70-32-05-28-87-2B-90-35-9D-2C-19-33-C0-34-76-21-66-3E-54-05-34-42-B1-E5-91-3A-BF-C9-47-26-F9-B6-26-09-0C-B0-53-EA-C6-B4-45-D1-DF-C2-CE-C2-19-D7-78-BF-4A-EE-DF-C3-E4-05-AD-CA-F7-1B-23-CF-ED-2E-0F-CF-43-3D-61-CB-7F-45-68-C7-67-46-2E-C7-64-3F-D4-CD-D5-30-89-DC-32-1C-4D-F2-E1-03-74-0C-DC-EA-4D-27-38-D4-BB-3E-B5-C2-B6-4E-6D-B8-DE-53-9C-B6-45-4C-76-BD-4A-38-22-CC-28-1B-D5-E0-BB-FA-04-F9-16-DE-C0-11-3F-CB-21-28-EE-C4-A9-39-45-C9-89-44-5B-D2-BF-47-B6-D8-16-43-B7-D6-13-37-81-CB-E1-24-F1-BB-3F-0E-DA-B0-7F-F5-27-B3-6C-DD-67-C7-06-C9-DE-EA-0E-BB-AC-13-86-B5-38-34-40-B9-A9-40-AD-C5-20-34-F4-D8-47-13-5C-F0-F9-EA-D0-08-55-CB-5C-1F-34-C1-8D-31-CB-D0-B3-3D-BE-F3-02-43-B0-1B-BB-41-2F-38-4B-3B-7B-3D-32-32-6D-29-B0-29-4F-04-09-25-5B-DD-77-26-70-C4-31-2E-9D-C3-E9-39-2C-DB-1C-45-BA-01-53-4A-27-28-01-45-9E-3F-63-33-32-3F-A6-17-DD-26-AC-F7-E1-FE-86-DB-22-D4-EF-CA-25-B3-B7-CA-CF-A3-21-DB-79-A7-BE-F7-BA-B9-EC-18-3C-D3-57-36-0C-ED-97-49-13-03-CC-4F-99-14-DD-49-1F-23-46-3B-55-30-30-28-4F-3C-BB-13-EC-44-4A-FF-AF-46-E9-EA-92-3E-9D-D6-CB-2B-BB-C3-BD-10-60-B5-78-F2-C8-AF-1C-D7-92-B6-B4-C3-B7-CA-A8-BA-3C-E9-3F-BB-4D-0B-A3-C2-14-28-95-CD-85-37-25-DA-34-35-6C-E8-F7-21-F8-F9-A4-03-20-10-09-E3-1F-2A-CC-C8-F8-43-7E-BA-05-57-FF-B8-27-5C-BF-C0-E2-4E-AE-CB-10-30-F0-D3-C6-06-36-D6-B4-DE-B6-D2-5D-C4-82-CC-6F-C0-A1-C7-12-D4-DF-C6-E1-F7-69-CA-47-1E-C5-CF-74-38-36-D3-22-3C-D8-D1-C9-27-6B-CB-6E-03-ED-C2-A1-DD-95-BD-B0-C5-AE-C0-71-C5-2A-CF-27-DD-0E-E8-4E-03-7F-06-6D-28-79-23-65-3D-74-38-94-39-E3-41-5A-1E-7D-40-78-F6-A0-38-A3-D1-3A-30-40-BE-1B-2C-DB-C3-F5-2D-97-E0-E7-33-7A-0A-BF-39-C6-33-68-3B-73-50-3E-37-4A-5A-27-2F-38-52-C8-27-7E-3E-2A-26-FF-26-E0-2C-85-11-20-3A-D4-FF-DF-47-24-F0-01-4E-9F-DF-EB-45-3A-CD-D6-2D-73-BB-67-0A-D7-AF-94-E5-7C-B0-1C-CB-C1-C0-F8-C3-E3-DE-A0-D2-BA-03-BF-F1-E6-24-F3-15-86-38-03-32-EB-38-C3-3B-AE-26-CF-2F-44-08-7C-12-56-E7-CC-ED-08-CD-4C-CD-C7-BE-9D-B9-D4-BC-7F-B5-09-C3-7C-BD-4C-CB-23-CA-64-D0-B5-D3-20-D0-96-D5-D1-CB-26-D0-68-C7-31-C8-86-C7-86-C4-91-CF-D2-CA-87-E0-23-DD-C7-F8-12-F9-AF-14-C3-18-A3-2F-2A-35-12-45-78-48-31-51-BA-4F-9E-51-37-4B-D7-45-8F-3D-89-2F-46-2A-99-12-7E-14-85-F4-4C-FE-2C-DB-F8-E8-12-CB-94-D5-C4-C5-91-C5-28-C9-E7-BA-27-D0-A3-B7-BA-D4-1D-BD-9F-D2-50-CB-89-C9-92-E0-C4-BD-DB-F9-9B-B6-87-13-2F-BB-2C-2A-E9-CE-35-3B-31-EF-21-45-A4-13-63-47-E5-30-1B-42-0A-3D-E0-35-B6-33-B9-23-17-18-30-0D-BF-F3-79-F4-C9-D2-62-DC-DD-BE-03-C8-5A-BB-3B-BA-54-C4-10-B5-E2-D0-4B-B9-B4-D7-4D-C6-C9-D3-31-DA-01-C7-27-F2-5D-B9-F6-0A-29-B5-7B-21-C2-C1-1A-33-86-DF-21-3E-CB-06-10-42-97-2A-B2-3F-ED-3D-08-39-72-39-E8-30-D4-1E-57-2A-71-F8-C0-27-5C-D5-3F-2A-53-C3-2B-31-41-C9-27-3A-A1-E4-B4-41-A6-0A-27-44-A9-2C-C5-3E-E7-3D-A2-30-2B-38-07-1B-B1-1D-2E-01-96-F7-71-E7-EC-D1-17-D2-23-B7-2A-C4-9C-AC-AE-BE-93-B1-76-C0-6A-C0-A4-C6-68-D1-B2-CD-C0-DD-9C-D2-91-E1-CD-D3-94-DC-78-D1-7D-D1-41-CD-9E-C4-62-C9-7D-BA-A0-C7-C2-B6-8E-C8-99-BB-63-CB-68-C9-72-CE-BC-DE-0E-D0-78-F8-70-CF-66-12-10-CD-2C-28-64-CA-84-36-0E-C9-4F-3C-F0-C9-06-3B-A7-CC-2D-36-A2-CF-EF-31-FD-D0-4D-31-97-CF-BA-34-D6-CB-C5-39-A1-C7-06-3C-81-C5-08-37-3C-C7-4D-28-A8-CC-90-10-5C-D3-BC-F3-AC-D7-93-D7-6D-D6-B2-C1-D9-CE-C5-B5-85-C3-B1-B4-D4-B9-F1-BC-EE-B7-C4-CB-17-C2-81-DE-90-D8-5F-F3-12-F7-61-09-3A-16-96-1F-6A-2E-48-34-DC-3A-A4-44-87-3B-44-4D-E6-34-50-4B-D1-2D-D1-3D-30-2C-80-26-26-32-B7-09-EC-3C-6D-ED-02-46-B9-D7-2E-46-51-CD-EC-38-8C-D0-D1-1E-08-E1-D0-FD-D8-FB-43-DF-0B-1C-77-CC-67-3B-40-CB-47-53-CF-DB-D6-5D-9B-F8-7B-57-42-18-43-40-93-30-AA-1C-A5-39-2D-F5-F7-2F-52-D4-37-15-8B-C3-9F-EF-DC-C7-49-C8-A3-DF-F4-A8-9D-02-B8-99-71-24-FD-9E-FF-38-2C-B8-D5-38-64-DF-01-24-92-0A-F2-01-EE-2D-54-DE-73-3F-4B-C4-3D-3A-FD-B9-9B-20-65-BE-CB-FB-62-CA-2E-D9-84-D4-A0-C5-CB-D5-9B-C8-2B-CD-27-E1-22-C0-E9-05-17-B8-8A-28-AC-BD-4C-3B-33-D4-8F-36-6E-F7-F8-1B-B5-1C-E3-F5-25-37-49-D3-01-3D-BD-C1-F6-2B-15-C8-5B-0A-F1-E3-D5-E4-1E-0B-77-C9-1C-30-56-C2-C3-47-E7-D1-89-4D-7C-F2-A1-44-02-19-AF-35-95-39-49-2A-F3-4B-5F-28-1A-4E-B0-2F-12-44-47-3A-62-35-A1-3F-89-29-E4-38-09-25-27-24-2D-28-59-05-CC-2F-83-E4-65-37-48-CA-71-3B-56-BC-C9-3A-50-BB-C4-36-11-C3-18-32-F4-CC-4A-2F-FB-D2-70-2F-64-D2-DB-31-9B-CC-BC-34-4B-C6-41-36-24-C5-93-35-5B-CD-3F-33-07-E0-D5-30-C6-FA-0C-30-A8-18-D1-31-E2-33-BD-35-70-47-09-3A-3C-50-25-3C-74-4D-85-39-4D-40-5B-30-70-2B-1F-20-57-12-C2-09-BA-F8-96-EF-03-E2-13-D5-D5-D0-6A-BE-90-C6-D4-AF-0C-C3-BF-AC-AE-C4-CB-B6-F4-C8-F8-CC-43-CD-50-EB-BD-CF-7B-0B-CD-CF-0D-26-25-CE-80-34-2F-CC-2D-33-41-CB-7B-22-D9-CB-E5-06-5E-CD-A6-E7-7A-CE-7D-CC-DE-CD-41-BB-22-CB-39-B6-40-C7-B5-BB-8D-C4-0B-C7-0C-C6-8B-D2-58-CE-90-D9-9F-DE-F8-D9-F1-F5-78-D4-4F-11-E2-CB-4A-2C-C9-C3-11-42-2E-BF-A2-4E-BE-BF-B8-4F-D2-C5-48-45-F6-D0-70-31-8E-E0-F0-17-08-F4-3C-FD-A7-0A-80-E5-DA-22-BF-D3-C5-39-3C-C9-51-4B-6B-C5-14-53-51-C6-D1-4D-39-C9-05-3B-A6-CB-C0-1D-1D-CC-53-FC-AD-CA-C5-DE-EE-C8-80-CC-85-C9-0C-CA-4E-CF-B0-D7-5B-DC-80-F1-15-F1-B2-10-BD-0B-D1-2D-80-28-E2-42-1D-42-C3-4C-11-53-62-4B-08-57-E2-40-33-4C-42-30-1F-34-2F-1C-B7-13-67-06-46-F2-01-F0-BB-D7-1E-DA-7F-CA-97-C6-96-CD-33-B8-B7-DF-24-B2-AA-FB-E6-B6-E8-19-0F-C7-FF-32-86-E0-E7-41-8E-FE-64-45-B3-1A-02-40-69-2E-B2-36-CC-34-A4-2E-00-2C-38-2B-CB-15-F2-2C-1D-F7-BA-31-D6-D6-45-36-14-BC-E6-37-75-AC-F5-35-DE-AA-09-32-FB-B6-0E-2F-97-CD-91-2F-A0-E9-2A-34-96-05-CB-3A-E4-1C-51-3F-E6-2C-2E-3D-42-35-61-31-8F-37-F3-1B-82-36-39-00-DC-34-C1-E3-85-34-61-CC-FA-35-3C-BE-54-38-78-BA-9D-39-24-BF-75-37-3C-C8-CF-2F-44-D1-8A-21-CD-D6-DA-0C-54-D7-8B-F3-5B-D3-E7-D8-C8-CC-42-C1-0B-C6-33-B1-62-C1-7D-AC-80-C0-E3-B4-8B-C4-60-C9-36-CE-10-E6-B1-DD-F8-04-70-F2-B7-1F-D9-0A-78-31-1E-24-87-38-7E-3A-D9-36-00-4A-34-31-72-4F-1F-2D-66-49-83-2E-BA-38-D4-35-7E-20-B0-3F-33-05-28-46-9A-EB-44-43-7C-D7-C8-33-D0-CA-02-19-77-C5-DD-F8-9E-C5-0A-DC-7D-C8-FA-CA-5B-CB-DD-CA-66-CC-CD-DB-4A-CB-D2-F8-46-C9-BE-19-D2-C8-02-36-DE-CC-77-47-D7-D7-05-4C-B3-EA-BA-45-48-04-7E-39-2A-21-0B-2D-38-3C-FF-24-C2-4F-A5-23-0A-57-C0-28-B4-4F-0C-32-B3-3A-2C-3C-52-1C-8F-43-55-FB-36-45-48-DF-3E-3F-90-CE-33-31-BD-CC-3B-1C-AC-D9-FD-02-AD-F1-2A-E9-AA-0E-AE-D2-E1-29-BC-C2-BE-3D-08-BB-42-47-82-BB-91-46-C7-C2-8F-3E-FB-CE-B8-33-BA-DE-A0-2A-76-F1-7A-26-21-07-42-28-26-1F-A4-2E-56-37-AC-36-88-4B-F1-3C-59-56-E5-3E-11-53-C8-3B-EC-3F-ED-34-C2-1F-34-2D-1A-FA-EE-27-3C-D9-97-27-DC-C6-CD-2C-89-C8-F5-35-5F-DD-A2-3F-F5-FD-A9-45-DF-1E-66-44-AB-34-E9-39-E8-37-A5-26-A2-27-6E-0D-61-09-E5-F2-BE-E6-80-DC-AA-C9-57-CF-E2-B8-06-CF-F5-B5-CA-DC-72-BD-E9-F6-FC-C8-AA-18-3B-D2-F6-3A-69-D5-B5-55-8C-D2-B4-61-1B-CD-C8-5A-53-CA-71-41-1F-CF-5C-1B-45-DE-52-F2-63-F7-9C-D1-E8-16-88-C2-E4-36-30-C9-6B-50-C4-E2-46-5D-17-06-88-59-8D-26-E5-44-73-38-52-23-3D-35-9E-FC-0A-1E-B9-DA-57-FB-FF-C6-F3-D9-23-C7-3F-C6-E9-DA-9D-C7-94-FB-CF-DD-B9-1D-54-01-00-35-8C-26-97-38-54-42-B7-26-31-4E-A2-05-55-4A-8F-E1-CA-3C-24-C8-3E-2E-44-C3-02-26-40-D5-FB-26-0F-F8-E7-2E-DC-1F-25-38-E2-3F-F3-3C-80-4F-92-3A-52-4D-B7-32-14-3F-93-2A-71-2E-EA-27-5A-24-B8-2D-FB-24-15-3A-50-2E-7D-46-C1-39-7F-4A-02-40-BF-3F-24-3D-5C-25-C9-32-20-01-5B-27-BE-DD-8F-22-C7-C6-F8-28-03-C4-EF-38-3B-D6-87-4A-ED-F6-D4-52-F2-1A-1D-49-10-37-9C-2B-6F-44-5B-01-ED-42-14-D8-86-38-C7-BE-01-2E-39-BF-8F-2A-65-D9-5B-30-D9-02-95-3B-BE-2A-58-44-B1-40-90-42-A7-3B-F6-31-CF-1D-75-14-BE-F3-C8-F1-1B-CF-90-D4-2F-BF-32-C6-77-CA-3D-CB-02-EC-E6-E1-A0-15-ED-02-FE-35-91-24-E1-3F-23-3E-88-2F-C7-4A-F0-0B-75-4A-A6-E3-15-41-A7-C6-6E-34-FA-BF-DA-29-C0-D1-B7-24-0C-F5-E3-25-64-1D-27-2C-0E-3E-12-35-EB-4E-BC-3D-D7-4E-54-43-F2-42-62-43-85-33-1D-3C-1E-28-E1-2C-B0-24-AC-16-BD-28-4B-FC-8E-30-EB-E1-95-37-0A-CC-B9-3A-24-BE-82-39-9B-B9-C4-35-88-BD-47-32-83-C7-2A-31-05-D5-DC-32-A6-E4-F0-35-8C-F6-C9-37-91-0B-92-35-AD-23-1A-2D-79-3C-5C-1D-D2-50-C2-06-1F-5A-49-EB-FD-52-91-CE-30-3A-AC-B5-64-14-67-A6-A6-EB-D1-A5-50-CC-52-B6-8C-C0-F6-D5-2B-CC-D1-FD-B0-EA-42-23-95-10-13-3B-79-2F-79-3D-9E-3B-7A-29-83-30-18-06-A3-12-63-E0-B3-ED-DC-C6-07-D0-CA-C3-FA-C4-DD-D8-A7-D0-19-FE-8C-EE-A9-24-74-13-C3-3C-D0-31-30-3C-A6-3E-BB-22-35-35-7B-FA-20-18-C3-D3-F9-EF-6B-BE-0A-C8-39-C3-B1-AA-68-E0-95-9E-AA-0A-65-A5-55-32-29-BC-3A-4A-A7-DC-39-4D-3E-FF-F2-3F-9E-1C-D9-2D-26-2F-37-23-BF-33-DA-26-4B-2A-9C-36-7D-15-4E-48-39-FA-CE-4E-6E-DE-D8-40-A3-C7-4C-1E-B0-B9-39-F1-F8-B5-1C-CA-92-BB-A9-B8-2F-C8-85-C4-44-D9-3F-E9-07-ED-A7-17-99-02-03-3C-66-19-94-46-1B-30-9B-32-EB-43-9C-08-AB-50-D4-DA-0B-52-4E-BD-76-45-08-BD-D0-2B-29-DA-20-0A-E6-07-AC-E8-15-32-88-D0-1F-46-96-C8-39-3B-FC-D2-4A-16-37-EC-B0-E7-0A-0C-FF-C3-20-28-DC-BA-55-37-20-D0-86-34-3D-FA-F9-1F-92-26-FC-FE-B8-41-0E-DA-05-40-52-BA-86-22-19-A7-5A-F6-3C-A4-C8-CE-88-B1-CA-BC-35-CB-C6-C7-17-EB-95-EA-51-0A-12-16-FA-22-CD-37-91-31-E2-41-CE-35-9D-30-9B-32-97-0B-07-2D-1C-E2-60-2A-A9-C4-0B-2E-65-BE-DC-37-2D-D1-C9-43-B8-F5-2A-4B-46-1F-6A-47-F7-40-1A-35-81-52-29-16-79-52-0D-F2-A9-45-9E-D3-27-34-20-C5-D1-25-0B-CC-86-1F-58-E6-2B-22-A6-0A-53-2B-5B-2B-E4-36-C5-3B-BB-40-1B-35-C1-45-67-19-34-44-F4-F2-83-3B-6E-D0-0C-2C-3B-BF-0F-17-52-C6-C0-FE-AD-E3-23-E6-69-0D-A3-D0-EC-35-48-C1-43-51-F8-B9-69-59-FE-BA-B9-4F-3E-C3-1C-3B-E6-D0-0C-24-56-E2-77-10-91-F6-78-01-07-0D-F4-F3-BD-24-A3-E3-66-3B-C9-CE-0F-4D-97-B8-E0-54-B2-A8-E8-4E-DF-A7-24-3A-50-BB-E4-19-ED-E0-B2-F5-96-0E-50-D7-4C-35-93-C7-09-47-2D-CB-E2-3C-B0-E0-9C-1A-BD-00-CE-ED-6E-20-C0-C8-04-35-DF-BA-88-37-1C-CA-03-27-25-F0-82-08-DD-1C-FF-E4-26-3D-2B-C6-18-43-3A-B3-1B-2C-ED-AE-1F-02-3D-B7-56-D7-A9-C6-50-BE-62-D6-E0-C1-90-E0-5F-E0-EE-E1-6A-0C-6F-DA-D0-32-F7-CC-F5-42-67-BE-0B-36-39-B4-EB-11-1C-B3-67-E6-AA-BD-4C-C6-80-D3-37-BF-FE-F0-D8-D3-D9-0F-FC-FA-A4-28-CA-23-DF-34-13-3D-06-31-8C-3C-E8-1D-E8-22-9F-00-2B-FB-0A-E1-C2-D5-42-C7-AD-C1-EA-B8-96-C6-5E-B7-2F-E2-94-BF-95-09-A0-CB-DC-2D-4B-D5-B2-41-95-D8-E4-3D-1A-D5-47-23-C2-CD-C0-F9-FE-C6-2D-CD-6D-C4-95-A9-0F-C7-D9-97-E9-CC-C4-9B-3C-D2-97-B3-A5-D3-DD-D8-12-D0-1A-02-71-C9-02-25-C5-C3-F5-38-F3-C2-44-39-6F-C8-B4-26-07-D2-A2-07-9C-DA-7E-E6-99-DC-AC-CE-10-D5-B2-C8-E8-C5-06-D7-E1-B5-DB-F4-2A-AE-87-17-52-B6-44-32-65-D0-F8-3A-0E-F7-00-2E-D7-1E-83-0F-55-3A-B4-E9-92-3F-A8-C8-81-2C-88-B5-5B-08-2D-B3-32-E1-98-BD-83-C6-57-CC-FE-C2-B6-D6-16-D8-C3-D7-4C-FD-66-D0-9D-23-A9-C6-97-3B-AA-C2-98-3B-B8-CA-AA-23-64-E0-5A-FD-C9-FF-B9-D7-41-21-4F-C1-93-3C-8E-C2-0C-4C-F1-DA-35-4E-DC-01-79-45-83-2A-3C-36-0A-49-7F-24-A1-56-42-12-0A-53-77-FF-3C-43-42-EB-23-2E-CA-D5-3E-19-6E-C1-A7-06-9B-B2-5E-F5-47-AE-43-E3-B4-B7-A9-CF-91-CE-E7-BC-5F-EE-14-B0-79-0F-EC-AE-70-29-EC-BC-B4-35-FA-D8-8C-31-DB-FC-BF-1E-D8-1E-B4-02-FD-34-90-E4-A8-38-0D-CB-10-29-CA-BA-AC-0B-7A-B5-6C-EA-E6-B9-67-D0-A6-C4-3E-C6-31-D1-72-CF-06-DB-96-E9-BD-DE-62-0D-E4-DA-3E-31-81-D0-3E-4C-0B-C3-9B-58-A1-B7-E0-54-B2-B3-AF-43-34-BB-50-2A-08-CF-B2-0E-2F-EC-B5-F5-43-0C-15-E2-26-27-60-D4-85-35-B3-CB-48-33-BF-C6-00-21-99-C4-CC-03-EE-C4-AC-E3-00-00-7E-5A"

        self.massageCW = "C4-0F-00-00-00-00-13-00-00-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-E8-03-02-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-FF-7F-00-00-00-00-7E-5A"
        self.massageQAM4_1M = ""
        self.massageQAM4_2M = ""
        self.massageQAM4_4M = ""
        self.massageQAM4_8M = "24-3C-00-00-00-00-13-00-00-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-0F-02-00-A5-C7-D7-C8-31-CC-0F-B9-3A-D1-07-B6-B2-D4-3B-BD-B1-D4-51-C9-89-D0-5D-D4-85-C9-0E-DA-BB-C2-F2-D8-D6-BF-7D-D2-39-C3-F7-C9-69-CC-E4-C2-B0-D7-D0-BF-5D-DF-B8-C1-5A-DE-68-C8-0D-D3-43-D3-FD-C0-FA-E1-41-B0-A5-F4-88-AA-2A-0B-CC-B6-40-24-95-D5-B7-3C-9D-FF-9A-4F-D3-27-66-57-3A-40-1B-50-BE-3F-3F-39-6E-26-03-17-21-FE-BE-F1-EE-D6-A7-D3-C1-C0-8C-C5-BD-C4-99-CB-41-E1-91-E3-6C-0A-3C-05-06-2F-FE-24-BE-3F-D5-37-A7-35-2B-37-22-15-0F-23-FB-EB-FF-01-7C-CB-4C-DE-20-C1-33-C2-F8-D0-38-B4-2A-F4-1A-B5-FD-1B-46-C0-1E-38-44-CE-52-3D-18-D8-D1-29-0B-DA-A4-05-BD-D4-1B-DF-34-CC-FC-C4-70-C5-F9-C0-D5-C3-75-D4-9B-C7-B4-F8-FC-CD-FC-21-EB-D2-22-44-5D-D3-B4-56-03-CF-48-57-77-C8-78-49-CB-C3-D9-34-43-C4-0A-22-59-CA-E4-17-36-D3-90-19-E8-D9-F2-25-DD-D9-4B-38-82-D1-C3-49-A7-C3-71-53-CD-B6-5F-50-AA-B2-12-3F-C5-BC-3F-22-AC-D5-4E-00-1E-F8-B8-E1-8D-1A-89-CE-88-32-DF-CB-9B-38-1D-DA-2A-2B-8D-F4-12-0F-B4-12-00-EE-EA-2A-12-D3-5A-35-23-C7-61-2E-1C-CE-8F-17-1F-E6-FB-F6-91-08-31-D5-78-2C-8F-BA-35-49-D0-AC-A8-58-9E-AD-51-58-60-BA-5F-49-33-CD-E0-2F-C4-DE-7E-11-7F-E8-32-F4-90-E6-E8-DC-2F-D9-83-CE-DD-C4-46-C9-50-B1-DE-CA-24-A7-32-CF-EB-AC-E3-D1-73-C4-03-D0-68-E9-6D-C9-10-12-0D-C1-2E-32-F1-BB-56-3F-34-BF-0D-35-B3-CD-12-17-76-E6-8F-F0-A1-04-44-D0-1C-21-EB-C2-4C-35-0B-CE-C6-3D-72-ED-B0-3B-99-14-25-34-8D-33-CC-2D-74-3D-AD-2D-F7-2D-AB-34-40-0B-E8-3E-8F-E3-65-45-61-C7-43-41-8B-C2-2D-2F-3D-D7-67-11-0E-FD-77-EF-78-24-8D-D3-4B-3D-9F-C6-4C-3D-F7-CC-56-24-84-E4-41-FC-C1-05-CA-D4-AD-26-4B-BD-86-3E-E4-BE-CD-48-65-D9-61-46-FB-03-6C-3C-05-31-B7-31-4C-53-B7-2B-61-62-5F-2C-A7-5C-AC-31-91-46-CC-36-F1-27-3E-36-C5-08-08-2C-EC-EE-44-17-6A-DD-67-FA-19-D5-97-DA-E6-D5-3C-BE-A6-DF-6A-AB-01-F2-71-A6-90-0B-D3-B0-E9-28-C6-C8-65-44-5E-E9-22-57-64-0B-1B-5B-DC-26-84-4D-05-35-6B-30-4E-32-B2-0A-AF-1F-46-E6-C1-02-04-CD-6A-E4-81-C5-52-CE-E2-D0-EC-C7-A0-EA-1B-D4-4A-0A-3A-F0-A6-26-F2-14-EE-38-97-38-EE-3E-28-52-56-3B-E0-5B-00-34-87-54-1D-2F-35-3F-5D-30-D6-21-46-37-28-03-68-3F-05-E9-51-42-7B-D7-80-3A-AA-D0-22-26-1D-D5-5A-08-22-E4-99-E8-CE-FB-29-D0-C9-18-D4-C6-2C-36-09-D0-F0-4D-8E-E9-1A-5A-3D-0C-7D-56-8F-2E-70-42-DA-47-BB-21-00-53-20-FC-8F-4F-6B-DB-02-41-85-C8-A6-2C-86-C8-25-17-DF-DA-EE-02-4B-F9-14-F0-B8-19-9A-DD-7C-31-4E-CB-C0-38-28-BB-F9-2C-46-B1-81-11-65-B2-38-EE-6A-C1-B5-CC-44-DD-2A-B5-39-00-0D-AC-2D-21-4E-B1-95-36-48-C1-EC-39-C9-D6-3F-2A-40-ED-A0-0C-2D-02-47-EA-30-15-1F-CD-EB-26-28-BC-6D-37-21-B9-08-45-88-C0-54-4C-AF-CB-82-49-F3-D3-65-3A-9C-D5-2D-20-1A-D1-E4-FF-30-CA-12-E1-A0-C5-0E-CB-6F-C6-04-C2-45-CC-1D-C5-90-D3-BA-CE-73-D7-F1-D6-7E-D4-44-D7-D7-CA-E4-CD-BA-BE-0C-BF-F9-B6-6A-B3-12-BA-3D-B4-21-CB-C3-C6-13-E8-00-E9-F4-09-93-11-35-27-F5-32-24-37-E8-40-0D-35-D5-35-DB-21-B4-15-92-03-FD-EC-02-E3-E2-CB-9E-C8-C6-BF-BB-B9-AD-CD-46-B7-0C-F0-28-BE-05-19-0F-C9-1E-38-AC-D2-02-41-8C-D7-63-30-E1-D6-F4-0C-26-D2-22-E4-09-CC-14-C4-22-C7-B6-B5-12-C5-5F-B9-25-C6-8C-C7-81-C9-1F-D5-AF-CD-16-D9-26-D1-06-D1-BA-D2-40-C2-E4-D1-15-B7-E3-CE-A6-B9-B1-CA-99-CE-D9-C6-48-F2-FE-C4-B6-19-3F-C6-EF-36-9E-CA-FB-3E-B5-D0-B2-2E-FB-D5-5F-0C-A9-D7-70-E5-FD-D3-26-C9-58-CB-87-C2-B1-C0-11-D4-EC-B8-E0-F6-38-B9-88-1D-FA-C4-5E-39-19-DC-FF-3F-6F-FA-EB-2E-C0-18-EB-0B-F1-2E-5E-E2-B2-36-B3-BE-A1-2D-07-AA-13-16-88-A7-3C-F6-75-B4-1C-D6-5D-CA-0A-BD-62-E2-BD-AF-FB-F7-7D-AF-0C-0A-91-BA-0C-1A-84-CD-E9-29-8A-E4-D5-39-82-FC-39-47-41-13-6C-4D-4D-27-E3-47-66-37-C8-34-34-42-B1-16-58-46-61-F4-D6-42-93-D6-90-37-88-C4-86-25-F4-C0-CE-0E-B8-C8-37-F6-32-D4-D5-DE-B1-DA-87-CB-AF-D6-96-BE-BE-C8-58-B9-D8-B7-D8-BB-6F-AE-86-C4-95-B5-3D-D0-38-D0-B9-DA-CD-F8-B9-DF-AA-22-80-DC-D2-3E-35-D1-55-42-80-C1-6A-2B-C6-B3-ED-02-2E-AF-3C-D9-DA-B8-A7-BF-76-D1-16-C1-35-F4-2C-DD-DE-17-2D-08-CD-31-CA-2F-C8-39-F3-42-4C-2D-4B-39-D5-10-E0-16-8F-EE-8C-EA-D0-D2-83-C7-A6-C7-FA-BC-2F-D1-78-CF-21-EC-EB-F6-00-0F-29-22-85-2D-7A-3E-DF-3C-C0-3F-41-37-A3-25-8B-1D-92-FB-B4-F6-AF-D3-4F-CD-ED-BE-4C-AC-D8-C5-E8-9B-26-E5-B9-9F-6D-0F-26-B6-05-33-22-D9-76-41-E5-FF-3C-35-0B-21-A0-13-CF-34-20-EA-EE-36-CA-C8-C6-27-0F-BC-6A-0C-7F-C8-6E-ED-DB-E9-93-D4-77-15-E3-C9-77-3E-23-D1-24-5A-82-E8-BD-62-37-09-2F-58-DC-29-F3-3E-BC-41-07-1E-DC-4B-D9-FC-83-48-D2-E1-99-3C-8B-D1-4F-2F-65-CE-F7-26-5B-D8-7D-26-FB-EC-A7-2C-B9-07-36-35-C8-22-54-3B-82-38-0E-3C-EC-44-B0-37-E3-46-4D-31-64-40-E4-2C-BA-35-1C-2D-DF-2B-C7-31-B0-26-FF-37-B4-27-CA-3B-E3-2D-62-3A-60-36-ED-33-C5-3D-BC-2B-43-41-AB-26-48-3F-9A-28-74-37-0F-32-23-2A-5B-3F-06-18-B8-49-0F-02-16-4A-C8-E9-4E-3C-B9-D1-51-21-77-BD-4A-FF-0A-B1-A0-DF-D3-AF-9A-CB-40-BB-00-C9-E7-D1-1D-D8-78-EF-DC-F3-AD-0D-D9-13-D4-25-77-2F-91-32-C5-40-21-31-15-46-F3-21-DC-41-5B-08-26-39-AF-E9-43-31-1F-CC-BA-2D-8D-B5-1C-2F-70-AA-10-33-10-AD-64-35-F9-BC-A2-31-F4-D6-C0-24-A6-F5-47-0E-D2-12-C1-F0-06-29-50-D1-3F-35-8B-B6-D2-37-CE-A6-28-34-76-A6-58-2F-73-B6-FB-2D-A5-D3-2A-32-54-F7-75-3A-CA-18-62-42-A9-2F-4B-44-55-36-D5-3B-AF-2B-04-28-7F-13-01-0C-68-F5-4B-EE-B6-DA-97-D6-A2-CB-51-CB-04-CD-A4-CF-0D-DF-B0-E2-64-FD-FE-FF-92-20-EE-20-1E-40-67-3E-C8-54-5D-52-42-5A-E2-58-01-50-B8-50-0C-39-7D-3B-F2-1A-77-1D-38-FC-D0-FC-A6-E2-47-E0-DB-D1-54-CD-8C-CA-6A-C6-9D-CA-E2-C9-1B-CE-60-D2-C6-D0-D9-D8-AE-CF-9F-D7-65-CA-33-CD-33-C3-93-BD-3C-BE-0B-B1-DC-BF-C2-B0-D5-CA-50-C2-09-DF-57-E4-53-F9-F5-0D-87-14-88-31-43-2B-11-42-C8-39-E9-38-2A-3F-34-19-5C-3D-50-EF-20-38-34-CC-5C-33-78-BE-8D-31-13-CC-F4-32-8C-EF-A1-35-0F-1A-4E-36-9C-39-A8-31-B7-40-72-25-47-2C-4C-11-F7-04-F2-F6-8D-DB-09-DA-B3-C1-8A-BF-5D-C2-E7-AC-2B-DD-DC-A6-A4-06-12-B0-38-2D-F2-C7-C0-40-02-EA-3C-39-79-0E-0C-1A-01-2C-2E-F0-78-3A-A5-CC-C2-35-7C-BD-88-1F-52-C8-F8-FE-B1-E8-55-DE-9A-12-28-C7-DA-37-8C-BE-C6-4D-3B-C3-01-51-61-CE-CC-45-F3-D6-39-35-31-D6-A8-28-39-CB-AA-25-E3-BB-EF-2B-42-B2-F7-35-CB-B7-E2-3B-4C-D0-0A-37-25-F7-D0-24-43-20-90-07-CC-3C-9B-E5-7E-41-CD-C6-02-2C-E5-B1-A3-04-A4-AA-58-DB-3B-B1-47-C1-F3-C2-7F-C1-78-DB-13-DC-29-F6-E5-05-E9-0E-39-2D-43-22-4C-41-58-2D-84-39-DF-2D-39-19-97-22-39-EE-0A-0C-DF-CA-4D-ED-2A-BE-28-CC-62-CD-38-B0-F6-F1-16-A1-62-1C-EE-A3-DA-3A-6F-B9-C5-40-F0-DC-E2-2B-4F-05-EF-04-80-27-CD-DB-0A-3A-DF-C0-29-38-8F-BE-7C-23-8F-D5-9D-03-46-FD-87-E3-D6-27-EE-CD-E3-47-B3-C9-8D-55-D2-D7-C2-50-74-F3-22-40-05-14-6B-2D-72-30-1F-21-49-42-64-1F-87-47-18-27-AD-42-48-33-1D-39-04-3E-98-30-10-43-F0-2C-41-41-A5-2E-17-3A-06-33-0D-30-73-35-B0-24-40-31-9A-17-7C-23-F4-06-18-0C-2F-F1-1E-EE-07-D7-FC-CE-A3-BC-39-B5-F7-A8-D1-A6-68-A3-A1-A7-90-B0-35-B8-81-CF-59-D5-FA-F8-8D-F8-28-21-82-19-86-3B-32-30-85-3F-27-37-1B-2C-2E-2D-A7-08-B5-15-8D-E2-BC-F7-56-C8-7F-DB-1D-C4-AF-C7-86-D7-4A-BF-F8-FA-EF-C0-74-20-E2-C7-19-39-5D-CE-09-3B-3B-D0-5F-25-C0-CC-8E-00-D4-C6-04-DB-A0-C3-6D-C3-25-C8-F3-C2-EF-D6-E2-D9-E2-EE-EC-FF-8B-0B-E2-27-CE-26-31-45-1D-3B-C4-50-5D-45-37-4B-A6-45-B3-3B-D1-3E-0F-2C-20-35-27-24-AD-2C-96-26-37-28-2E-30-A3-28-46-3A-22-2D-98-3E-C3-33-A3-3A-22-3A-08-31-FD-3D-01-28-D3-3D-EC-25-5F-39-94-2D-DD-31-24-3C-F7-29-DF-49-1B-25-80-4D-2D-26-A7-40-1E-2E-51-23-E1-3A-B7-FC-74-47-E6-D8-4D-4D-0D-C4-DA-46-86-C5-19-32-9F-DC-26-12-9C-00-DA-EE-06-24-68-D2-CA-39-A8-C5-24-3A-A8-CC-46-25-EF-E4-D3-02-59-06-6F-DE-41-26-07-C3-B7-3B-C0-B6-DF-42-24-B9-0C-3E-3D-C4-28-34-D1-CF-1C-2D-48-D5-E2-2D-7F-D2-22-36-71-CA-58-40-98-C3-8A-44-C7-C4-31-3C-0A-D2-A4-25-C3-EA-52-05-E4-09-6F-E4-F3-27-78-CD-F7-3D-1E-C8-03-48-42-D6-5F-46-1B-F3-FE-3C-EF-14-99-31-5E-30-59-29-18-3C-0B-27-B5-33-8F-2A-CA-18-84-31-22-F2-B2-38-AA-C9-6D-3D-AE-A9-58-3E-4A-9A-47-3B-66-9F-81-34-C9-B7-05-2A-55-DD-3E-1B-71-06-8A-07-6E-28-43-EF-70-3A-B4-D4-17-38-58-BC-0E-23-F2-AB-CF-02-C5-A8-75-E2-71-B5-29-CD-6A-D0-51-CA-BE-F3-EB-DA-7E-16-1F-F9-62-2F-39-1A-C1-37-74-32-C7-2D-24-39-2D-15-A8-2B-09-F6-13-0E-48-DA-6D-E9-9F-CA-42-C8-05-CC-FB-B2-78-DE-3B-AD-4E-FD-45-B5-CA-20-46-C5-65-40-D4-D5-FE-54-95-E0-6B-5A-27-E2-32-50-BE-DA-47-39-9A-CD-16-1B-B6-BF-12-FC-3A-B6-1C-E2-20-B5-1C-D1-4C-BE-14-CA-22-D1-FF-CA-B0-EA-9C-CF-5B-06-05-D3-0E-1F-9C-D1-A3-30-A6-CA-2C-39-DB-C0-99-39-96-B9-5E-35-C4-BA-0E-31-48-C8-6C-30-D8-E1-A8-34-59-02-A0-3B-2D-21-9C-40-11-35-51-3E-8F-37-51-31-88-27-EB-19-D7-09-70-FC-96-E7-B9-DF-BD-CA-7A-CA-66-BA-86-C0-61-B8-5A-C1-E6-C0-7A-C8-B4-CC-A0-CF-87-D4-B2-D1-6A-D4-3B-CD-73-CD-24-C5-19-C5-74-BF-9D-C2-7D-C2-99-CB-D4-D1-57-E1-4F-EC-1C-00-F8-0B-A5-20-03-28-17-3B-DE-37-F8-49-44-36-F1-4B-FA-22-8E-43-D8-02-5E-35-21-DE-68-25-E7-BD-63-15-8A-A9-83-04-05-A5-ED-F0-60-B0-02-DA-3E-C8-23-C2-0C-E7-D9-AE-54-06-10-A7-00-20-02-B0-56-2F-3F-CA-A6-31-4E-F0-BC-26-C4-17-EF-10-A5-34-C2-F4-CA-3D-FD-D7-89-30-6F-C0-0D-12-92-B2-B1-ED-94-B0-DA-D0-05-BA-11-C6-4C-CC-15-D1-AE-E3-9F-ED-66-FC-0E-11-8D-13-72-2E-5D-27-3D-3B-E4-36-E3-32-71-41-1A-18-19-46-5D-F3-C3-43-97-CF-96-39-41-B6-B5-27-66-AC-C5-0F-8D-B1-F9-F4-A5-C0-6F-DB-48-D2-2C-C7-78-DF-03-BB-BD-E3-F4-B7-37-DE-38-BD-6B-D1-EC-C8-2F-C2-07-D9-24-B6-07-EC-32-B2-19-01-4C-B9-90-17-AD-CB-12-2E-9C-E6-F1-41-DC-04-42-4F-BF-1F-DD-51-C2-30-08-47-65-33-1E-2F-A2-26-61-0E-79-0D-63-EC-4A-EE-0D-D2-FA-D0-C1-C6-76-BC-C3-CD-81-B4-E4-E4-94-B8-23-05-5E-C4-18-25-98-D1-4F-3C-7E-DA-3A-46-E4-DB-96-43-1D-D6-8F-39-62-CC-2E-2F-25-C3-21-2A-22-BE-53-2C-26-BF-68-33-F4-C5-5B-3A-32-D1-5F-3C-A4-DF-A1-37-E0-F0-7A-2E-29-05-66-26-4E-1C-26-25-72-34-66-2D-72-49-9C-3C-A6-55-69-4B-EE-53-78-50-25-42-D8-44-DF-22-C0-27-77-FD-F2-FF-0C-DC-CA-D9-1D-C8-87-C2-28-C7-C8-C2-9B-D8-94-DA-33-F6-C7-00-68-16-64-26-1A-30-73-3C-E0-3D-1D-3A-9B-3F-53-20-BA-39-81-F9-B3-32-55-D5-D5-2F-5A-C2-E9-32-1A-C8-9A-39-3B-E4-BD-3E-94-0B-D2-3C-C8-2E-8D-30-61-40-5E-1A-D6-39-7D-FE-89-1D-8B-E3-36-F5-87-D0-B0-CD-C8-CA-FA-B1-A0-D4-B0-A7-D0-EC-1C-AE-BC-0E-EC-BF-3E-33-60-D6-F9-51-57-EC-13-63-DA-FF-2F-61-A9-11-48-4B-55-23-C4-25-15-35-05-FA-9D-44-35-D4-93-4D-9C-BF-72-4B-96-C2-EE-3B-D2-DB-B5-20-0E-02-8C-FF-02-27-D2-E0-81-3C-D1-CC-05-3A-FE-C8-4F-20-31-D6-79-F9-76-F0-25-D5-8C-10-36-C2-48-2E-A5-C8-19-43-03-E6-C0-4B-57-0E-D3-48-FA-30-08-3E-88-3F-B7-30-E6-33-17-26-CC-12-C2-21-BE-E9-EC-24-64-C9-40-2E-A8-BE-62-3A-9D-CD-E5-44-49-F0-67-49-B0-19-BF-44-9C-3B-E3-35-87-4C-61-1E-16-4B-43-02-B6-3D-4C-E7-D6-2E-A4-D3-99-27-4D-CC-7D-2B-B1-D3-F4-36-D4-E8-5F-41-56-07-6B-41-6F-28-C4-31-9B-44-F3-13-7D-55-18-F0-7B-57-C4-D1-9C-4A-55-C3-51-32-E2-C9-5A-14-4F-E3-1A-F7-60-07-C9-DF-0E-2B-30-D1-A8-44-33-CB-14-4F-49-CB-04-4B-A7-CD-DF-3D-C4-CE-0D-2F-A8-CC-F5-24-98-C7-D4-22-00-C2-2D-28-8C-BF-BA-31-D0-C3-3C-3B-E2-D0-30-41-53-E6-C4-41-E2-00-D3-3C-0B-1B-21-33-58-2E-79-25-22-35-3F-14-48-2C-AD-FF-60-14-88-E8-06-F2-EC-D0-00-CD-7E-BC-6A-AE-BF-AF-53-9E-A2-AE-68-A1-E5-BA-6D-B7-F7-D2-09-DB-F1-F1-08-03-EC-10-DE-24-39-29-B8-37-B6-36-23-37-32-39-75-24-5F-34-71-06-21-2E-3C-E7-FD-2B-2D-D1-9A-30-85-CB-75-3A-25-D8-5C-44-EE-F2-9E-47-10-13-01-3F-D0-2D-53-29-F3-39-67-0A-A0-32-1D-EA-DB-18-B9-D1-24-F3-92-C8-71-CB-61-D1-37-AC-5F-E9-75-9D-48-09-88-A2-14-28-7D-B9-1F-3E-EE-DB-A2-47-F9-00-8A-45-C4-1F-7B-3C-B7-31-87-32-EA-33-9E-2C-7A-27-AE-2C-C5-10-16-31-EE-F5-7B-35-1A-DD-A5-34-E1-CA-90-2A-5A-C1-F5-15-E4-BF-F6-F8-CB-C3-A8-D8-6E-C9-C4-BB-97-CD-EA-A8-9F-CE-DF-A4-09-CD-2A-B1-59-CB-7E-CB-37-CD-03-EE-16-D6-9F-10-D0-E7-E4-2A-9D-01-54-36-DB-1F-4F-30-BC-3C-0E-1B-C0-51-3E-FD-90-59-2B-E0-A6-51-09-CD-3F-3B-30-CA-4B-1B-1F-D9-35-F9-24-F6-FD-DC-9C-19-18-CD-6A-3A-BF-CC-B4-50-32-DB-06-58-19-F4-20-50-F1-10-5B-3C-FA-2A-16-22-16-3D-CF-06-07-45-B4-EE-AA-43-05-DC-49-3C-43-CF-37-33-DC-C7-53-2C-DA-C4-CE-29-3F-C5-CD-2B-0D-C8-B1-30-1C-CC-FF-35-06-D0-76-39-55-D2-E9-39-F9-D1-8D-37-C7-CE-B7-33-B4-C9-36-30-BC-C4-83-2E-5E-C2-2F-2F-EF-C4-B9-31-FA-CD-DE-34-DD-DD-31-37-9F-F3-B3-37-1C-0D-45-36-37-27-A8-33-27-3E-1A-31-EE-4D-C6-2F-13-53-3D-30-7D-4B-3B-32-71-37-CC-34-1D-1A-BA-36-76-F9-25-37-08-DD-DB-35-F8-CB-6E-33-D5-CA-EE-30-FA-D9-77-2F-3E-F5-BA-2F-26-15-BE-31-57-31-E5-34-54-43-2A-38-9A-48-62-3A-1D-43-67-3A-16-38-22-37-AC-2D-81-2F-6F-28-93-22-BE-29-DA-0F-B2-2F-EB-F7-78-36-04-DD-6A-3A-30-C3-D4-39-C4-AF-9F-35-03-A8-9D-30-5B-AF-DE-2D-BB-C5-FD-2E-DE-E6-47-33-F2-0A-19-38-A7-28-59-3A-0D-38-3E-38-3B-35-79-32-AE-21-0D-2C-CB-03-E3-28-9E-E4-B2-2B-95-CC-4A-34-93-C0-27-3F-66-C0-92-46-6D-C7-EE-44-FC-CE-36-37-8C-D1-8E-1E-4E-CD-0C-00-0A-C5-EF-E2-D5-BE-CE-CD-48-C1-0E-C4-43-D0-B0-C4-D1-EA-00-CB-F4-0A-D9-D0-97-27-7F-D1-D0-37-CC-CB-22-36-D2-C2-87-22-7E-BC-61-02-F7-BE-84-DE-BC-CD-33-C0-C3-E7-3C-AE-5A-07-47-AB-F5-23-CA-B5-1E-35-72-C9-73-35-28-E1-84-24-D9-F8-F9-06-49-0E-F8-E4-D7-20-66-C7-85-30-0D-B5-EE-3C-AA-B0-B7-44-75-B8-E1-45-26-C7-AA-3E-0C-D6-9F-2E-5D-DF-44-17-03-E0-05-FC-4A-D8-58-E1-7C-CB-84-CB-94-BE-84-BD-99-B6-6D-B8-30-B7-99-BB-BD-C1-5A-C5-2D-D5-E5-D3-57-EE-EB-E5-BE-08-A1-FA-70-1F-4D-11-DD-2D-7C-28-A6-30-88-3D-46-26-A7-4C-AA-0F-D3-51-6C-F0-44-4A-9B-CE-D6-35-C3-B1-D8-17-4D-A1-BA-F6-6B-A2-7D-DA-3A-B6-66-CA-C4-D8-BA-CA-85-01-4A-DB-86-25-7E-F7-9C-3A-D7-17-CE-3A-58-34-A4-26-01-47-5D-05-45-4D-C5-E2-33-48-38-CB-37-3B-41-C7-2B-2A-6A-D8-A9-17-8D-F8-70-04-FC-1B-04-F0-C2-35-37-DA-5C-3C-A6-C4-18-2D-41-B3-D1-0C-61-AB-C7-E5-99-B1-9D-C3-3E-C7-1C-AF-C6-E8-76-AB-09-0E-27-B6-80-2C-1A-C9-E1-3A-00-DE-AB-34-12-F1-23-1C-18-02-DD-F9-42-13-E0-D9-94-26-64-C7-62-3B-E1-C8-5D-4D-DC-DD-D4-55-6A-FF-CB-4E-0A-23-70-36-A6-3E-2E-11-1B-4C-21-E9-FE-4A-D4-CA-F1-3F-7C-C0-2B-32-AD-CD-49-28-76-ED-CE-25-D9-13-45-2A-3B-32-2D-32-FC-3C-16-39-07-30-CC-3B-6B-10-B8-39-5A-EA-C0-34-5D-CC-02-30-BC-C1-1B-2E-59-CE-D4-2F-99-ED-D4-33-A9-14-81-37-0A-37-7A-38-64-4B-E7-35-B8-4E-16-31-B4-44-D7-2C-53-35-17-2C-FF-28-3A-30-F1-24-17-38-74-29-08-40-7F-32-30-43-4E-3A-63-3D-81-3C-FC-2C-4E-38-C4-13-B9-30-87-F6-DC-2A-82-DB-01-2B-25-C8-20-32-2F-BF-E7-3C-E1-BF-F0-44-81-C6-89-43-14-CE-E5-34-7A-D2-25-1A-05-D2-40-F9-DF-CD-C7-DA-26-C9-62-C6-15-C7-9C-BF-36-C9-77-C4-80-CE-78-CE-C3-D3-BB-D5-50-D5-C6-D4-0E-D1-42-CB-03-C8-61-BE-5F-BE-9E-B6-05-BA-C3-BB-07-C0-FE-D0-3E-D2-C3-F2-1D-EE-9C-17-61-0D-A8-33-6A-28-58-3D-45-39-59-31-07-3E-03-14-7D-39-93-EF-B1-31-F5-CF-0D-2D-F0-BD-48-2F-D2-BB-A1-37-0A-C5-1B-41-CA-D0-BC-44-86-D6-CE-3C-2C-D2-B8-27-2D-C6-2D-09-5E-BA-1C-E9-2C-B8-E7-D0-E9-C5-F5-C7-4A-E3-0D-D1-C8-08-7C-E9-4F-2A-33-0A-15-3C-5B-2A-86-37-3F-42-3E-1E-85-4D-A1-F9-0B-4C-58-D7-4C-41-16-C4-CE-32-E3-C6-40-26-A6-DE-ED-1F-14-03-B8-21-40-28-D9-2A-56-43-2C-38-7C-4E-FC-44-5E-4A-24-4C-0D-3D-6D-49-CA-2E-E6-3A-58-26-D6-21-6C-26-E1-02-2D-2D-18-E5-CC-35-13-D0-44-3B-9F-C9-EB-3A-C6-D3-A0-35-F6-EB-1F-2F-C7-0B-E0-2B-12-2B-90-2E-87-42-66-36-D8-4D-1B-3F-8C-4C-A2-42-58-41-CF-3B-50-30-D6-28-00-1D-5E-0C-24-09-BF-EC-DC-F4-A1-D1-D9-DF-F9-C0-F2-CA-C4-BC-09-B9-6B-C2-AB-AE-23-CC-67-B0-9B-D3-85-C0-D5-D4-3A-DD-C6-CF-4B-00-0E-C8-8E-20-D6-C2-D5-34-F0-C3-28-37-8F-CB-0E-27-E3-D5-E6-09-CC-DC-4E-E9-0D-DB-FA-CF-73-CF-4C-C6-46-BE-BE-CF-21-B0-12-EA-73-AE-48-0E-06-BF-FA-32-9C-E0-1F-4F-69-0A-6B-5C-EA-2E-99-58-26-41-7F-45-3A-3A-27-28-B5-1C-4E-07-17-F4-D8-E9-90-D0-6C-D5-7D-C0-8C-CD-71-CA-1D-D3-57-EA-82-E4-0E-13-FF-FD-C7-33-81-1A-05-3F-9C-34-3D-30-89-47-A0-0D-06-50-7C-E5-D7-4C-3E-C8-E5-3E-AE-C1-E2-28-41-D4-A5-0E-61-F8-58-F4-BE-1F-A9-DD-2A-3B-2B-CD-6A-40-F2-C3-AD-2D-8B-C1-80-09-3D-C4-A2-DF-92-C9-4B-BC-FD-CE-0E-A8-7B-D2-BA-A5-03-D3-BF-B2-A8-D0-62-C9-68-CC-7D-E3-CB-C7-83-FC-78-C4-27-12-E4-C3-D2-23-3D-C7-93-31-6B-CF-3B-3B-0D-DD-30-40-3D-F0-AE-3F-27-08-3D-39-96-22-F6-2C-C0-3B-73-1B-BD-4E-A2-05-A6-56-DB-EC-2B-50-3E-D3-20-3B-22-BC-4A-1B-1D-AC-E8-F7-1E-A8-EB-D9-99-B3-44-C9-7A-CE-4D-CA-C8-F3-39-DC-1C-1A-42-F9-24-36-B2-18-A1-3E-F4-31-55-30-99-3F-0C-10-10-41-8C-E9-67-3A-83-CB-29-32-D9-C1-44-2E-BF-D0-44-31-B6-F2-1A-39-79-1A-FF-3F-42-38-19-3F-32-40-C9-31-15-2F-2C-18-82-0B-B7-F7-BC-E2-9B-D9-DD-C2-77-C7-D4-B4-B8-C7-00-B9-10-DB-C5-C7-21-FC-CE-D5-6E-21-E6-D9-BD-40-94-D1-8C-52-52-C2-46-54-C6-B6-4D-48-5B-B9-27-34-C9-CE-C1-1D-2B-F3-FA-08-19-1B-BB-F6-4E-38-C5-E5-CD-3F-AE-D4-BC-2E-E0-C3-D7-0B-67-B6-C0-E4-1E-B1-80-C8-5E-B8-90-C1-6B-CD-05-D2-F2-EC-51-F3-8C-0F-82-19-4F-2C-6D-38-60-3C-69-48-E5-3D-B0-48-F7-34-A4-3E-CE-29-91-32-E8-24-9A-2B-E8-2A-A9-2C-05-3A-94-33-73-4A-92-3A-C3-51-1F-3B-D9-47-F9-30-3D-2B-DB-1B-AB-02-7A-FF-06-DB-F6-E1-48-C2-91-C9-9A-C1-AC-BA-28-D9-9C-B6-9B-FF-BE-BB-98-25-5B-C6-ED-3B-EB-D1-C2-39-58-DA-3D-20-E9-DC-F9-F9-D3-D8-9A-D6-63-CF-5D-C4-C2-C3-5C-CA-3E-BA-D2-E5-36-B7-80-0B-C9-BD-67-2C-AD-CE-C4-3B-AA-E7-E5-33-13-04-FD-17-21-1E-93-F2-E5-30-58-D1-03-3A-3C-C0-73-3A-88-C5-FE-35-40-E0-89-31-04-09-E9-30-AF-34-1B-35-B2-57-C3-3B-1E-69-19-40-B6-64-05-3D-C2-4B-6E-2F-B2-24-E1-17-94-F9-CF-FA-AC-D5-5D-DF-86-C2-25-CD-13-C5-CA-C9-D1-DB-27-D7-BF-FE-B9-F2-8D-21-43-16-9B-37-75-39-8A-38-FD-53-A6-23-87-5F-9F-00-36-59-E6-DC-56-42-9F-C6-27-20-F2-C6-CA-FA-32-DE-5D-DB-7D-03-A6-C9-25-28-EA-C9-94-3D-79-DB-2A-3B-9B-F8-A8-21-09-18-8B-FA-AB-2F-C5-D3-B7-37-C5-B9-39-2D-6A-B2-FC-12-23-BB-74-F0-E2-CA-19-CF-F2-D6-38-B7-52-D8-6F-AD-00-CF-C7-B1-DA-C1-A1-C0-0F-BB-E0-D4-F8-C2-3A-EA-B2-DB-99-FE-98-FF-FD-11-55-23-1C-25-89-3A-9C-37-EC-3C-0C-47-A9-29-34-4F-84-07-C8-4B-E7-E1-BA-3A-2F-C4-04-1E-5F-B5-DC-FB-03-B6-1D-DD-EA-C0-5F-CA-2B-CE-EF-C8-DE-D6-E8-D8-E4-D7-3F-F5-87-D2-AB-15-15-CB-A1-31-36-C6-24-43-74-C6-66-48-14-CB-AA-43-C3-D0-BC-39-8C-D3-CC-2F-15-D1-9B-29-0B-CA-8E-28-0A-C2-E3-2B-29-BE-89-31-CA-C2-2F-37-C0-D1-FB-3A-76-E9-E6-3B-7D-05-C1-39-2F-20-28-35-9D-34-78-2F-05-40-9F-2A-79-42-C3-28-54-3E-7C-2B-23-37-E2-32-54-30-DE-3C-3D-2C-43-45-B8-2B-FF-46-41-2E-06-3E-78-32-52-29-B5-36-ED-0B-7F-39-5C-EC-E8-39-62-D2-C5-37-E9-C3-BC-33-6C-C2-2B-2F-37-CA-DE-2B-E8-D3-7D-2B-E3-D7-E4-2E-1C-D2-84-35-7C-C4-2B-3D-80-B6-67-42-02-B2-7A-41-6F-BE-B3-37-9E-DC-A9-24-4E-05-B6-0A-4F-2B-8D-EE-B3-40-CD-D5-DB-3C-1B-C5-BE-20-83-BE-3F-F7-CB-C0-27-D1-10-C8-52-BE-6F-CF-E6-C6-19-D3-A0-E7-C9-D1-EB-12-16-CD-75-36-5E-C8-FE-42-DA-C6-F8-32-CB-C9-08-0D-A0-CF-4A-E1-B8-D4-6C-C2-4A-D5-A6-BD-A1-CF-0F-D5-89-C5-C6-FE-14-BC-39-29-A1-B9-BD-42-04-C3-FA-40-18-D9-F5-24-D9-F7-1A-FA-BA-17-CA-D0-9E-30-00-B7-37-3D-7A-B2-37-3D-E5-BE-50-35-DB-D0-F0-2C-FB-DB-AA-2A-3D-D9-F7-30-6F-CA-E2-3C-3A-B9-35-47-35-B2-C8-47-64-BE-7E-39-3F-DE-12-1D-C2-08-75-F9-E8-2E-70-D9-26-42-86-C7-F2-3A-BF-C9-4C-1C-37-DF-C6-F2-47-00-55-CF-51-21-42-C0-E6-36-56-CB-A7-39-90-EB-89-28-85-13-A6-08-0D-33-0C-E3-D8-3D-9B-C1-22-30-09-AC-C6-0F-2B-A6-76-E9-A2-AF-90-CB-D5-C4-C5-C0-78-E0-B1-CC-0E-FD-54-EB-12-16-3F-13-9F-28-41-39-A6-33-F3-53-D6-37-0E-5E-3A-37-F9-56-90-34-F9-41-6C-32-AA-24-5D-32-62-05-68-34-D9-E9-24-37-28-D6-7A-38-10-CC-DC-36-A6-CA-4F-32-94-CE-B7-2C-1C-D3-36-29-D0-D3-A5-2A-7C-CE-E1-31-70-C4-BF-3C-6E-BA-52-46-06-B7-94-48-C1-BF-F0-3E-45-D6-86-28-D3-F6-3F-09-F1-18-EB-E8-41-32-BD-D0-79-3A-05-C8-BE-2E-7D-D1-FD-12-36-EA-63-F0-B1-0A-BD-D1-A2-29-30-BF-41-3F-39-BB-DC-47-3D-C2-B3-44-BE-CC-E7-3A-32-D3-F7-30-A9-D1-EF-2B-95-C9-6A-2D-EF-C0-14-33-3C-BF-D5-37-DA-C9-09-36-44-E1-DC-29-84-00-EE-12-F8-1E-92-F4-87-33-CF-D4-E7-37-88-BA-9E-2A-6F-AB-2E-0F-8B-AA-A5-EC-99-B7-49-CB-60-CF-65-B2-B0-EC-C5-A6-9F-09-25-AA-C4-20-4A-BB-17-2E-7A-D6-6B-2F-34-F6-97-24-3A-14-6E-0F-EA-2A-8E-F3-D0-36-FB-D5-D6-37-6D-BC-9C-31-4F-AC-40-2A-86-A9-F8-27-4C-B5-2A-2E-94-CD-69-3B-3D-ED-74-49-48-0D-84-4F-E5-26-3F-46-99-35-AA-2B-BD-38-1F-05-B5-33-25-DE-88-2C-31-C4-61-29-13-C1-CB-2D-5C-D6-E9-38-12-FC-81-45-57-23-F9-4B-4A-3C-AA-45-9B-3C-22-30-03-24-E5-0E-8A-FC-D4-EA-76-D6-20-CF-82-C1-0D-C5-49-C6-2C-D0-BB-E2-93-EC-1E-0B-10-10-11-2F-CF-2D-55-40-15-3B-75-38-1F-33-DA-1A-AF-18-C5-F2-98-F4-25-CE-21-D2-BF-B7-AA-BA-3B-B3-82-B2-91-BC-F8-B7-DC-CA-E5-C4-FA-D4-CA-D1-D6-D5-08-D9-70-CE-BD-D8-F6-C4-DC-D2-8C-C1-7E-CB-54-CA-92-C6-7D-E0-00-C6-85-FF-0E-C9-D7-1E-28-CD-EB-34-79-CF-97-3A-83-CE-6C-2D-E6-CA-4D-10-27-C7-6F-EA-B4-C6-2E-C5-8D-CC-90-A9-40-DA-1D-9E-77-EF-6D-A5-FC-09-AB-BD-28-26-FE-E0-6B-3F-D8-06-08-51-F0-25-E6-56-9C-36-9F-4E-F8-34-91-38-3E-22-82-18-B1-04-6E-F5-01-E6-FC-D7-60-D0-16-C8-3C-CB-36-CA-AF-D8-9A-DD-8E-F4-2D-FC-A7-15-92-1C-B0-30-84-35-FF-3B-58-41-B4-32-08-40-58-16-E1-36-59-EE-D5-2D-A0-C5-8E-2B-2E-A7-1C-32-E7-9A-BA-3D-6F-A3-69-46-C1-BD-C1-43-71-E2-39-31-F2-07-03-11-3E-25-EE-EB-10-34-38-CE-2C-32-9D-C2-9C-21-BB-CD-D4-07-CB-EB-51-EC-C8-11-BF-D6-91-31-3C-CD-4F-3F-EB-D2-DE-35-2E-E7-79-18-CB-05-FC-F0-DC-27-C0-CB-74-45-EC-B2-9C-57-11-AB-1B-5A-97-B2-8F-4C-B3-C3-7A-32-D1-D7-31-12-A8-EA-00-F3-8C-FB-0A-DB-84-0C-8D-CD-CD-1F-2A-CA-41-35-59-CD-21-49-F4-D1-00-55-53-D3-91-52-29-CF-FE-3E-7D-C6-2B-1D-59-BD-B1-F5-43-B9-44-D4-00-BF-80-C3-7C-D0-BF-C8-9E-EB-CA-E1-88-0A-54-05-43-25-52-26-4E-34-B4-38-21-33-DD-35-C6-21-F0-1E-E8-04-54-FC-4B-E4-8A-DA-45-C8-A3-C5-1C-B7-1D-C5-21-B3-9B-D9-62-BA-16-FD-BA-C7-49-25-E5-D4-49-47-C2-DC-DC-5A-E1-DC-7D-5C-FD-D5-91-4D-4D-CB-22-33-19-C1-E5-13-40-BB-53-F6-30-BC-76-DF-8D-C4-83-D2-7F-D3-F4-D0-4A-E7-C8-DA-DC-FD-98-EE-08-15-72-09-8E-2A-D9-26-14-3C-2C-41-3F-47-AA-52-1E-4A-E1-56-B6-43-16-4C-7B-34-1B-34-69-1E-1D-14-BA-04-6F-F3-22-EB-97-D9-FE-D4-4B-CC-B7-C4-0C-CE-8C-BB-B8-DD-C1-B9-28-F7-03-BF-87-14-BA-CA-D5-2F-1F-DC-2E-44-05-F2-80-4E-8F-0A-BB-4D-0A-23-97-42-2D-38-33-2F-AF-46-A0-16-1A-4C-65-FC-76-47-FE-E3-93-39-50-D0-D3-24-38-C3-85-0C-4C-BD-1B-F4-0D-BE-84-DE-6F-C4-CF-CD-72-CF-1C-C3-95-DE-A7-BE-BB-F1-E7-BF-98-08-89-C5-D2-21-6E-CD-5A-3A-DF-D4-93-4D-10-D9-5C-56-01-D8-D6-50-64-D1-48-3C-26-C7-36-1C-3B-BD-12-F8-86-B8-59-D9-2C-BD-A1-C8-DF-CC-A8-CA-EE-E5-72-DE-7E-03-57-FD-20-1F-17-1D-13-33-2C-33-5E-3C-3E-38-E4-3B-64-2A-DD-35-86-0D-ED-2F-C3-E9-96-2E-9D-C8-26-33-F7-B1-19-3B-F3-A9-13-41-73-B0-47-3F-03-C2-29-32-AA-D9-3B-1A-B8-F2-25-FC-F5-09-0B-DF-DC-1D-B9-C9-06-2E-F7-BF-42-3A-1B-C1-F9-41-91-C8-02-44-07-D0-19-3F-63-D2-96-32-1C-CE-0C-1F-01-C6-7D-06-E9-BF-1D-EC-08-C2-AC-D3-FF-CF-B2-C0-05-E9-D5-B5-EF-07-75-B4-28-25-96-BC-BC-39-F7-CC-1F-42-43-E3-7A-3F-63-FC-EC-36-E9-14-11-2F-9A-29-F1-2C-07-38-AE-31-1E-3F-01-3A-6C-3F-BC-3F-F0-3A-A4-3C-86-34-65-2D-05-2F-42-13-69-2C-CF-F3-46-2D-C3-D6-C2-30-E7-C2-14-35-72-BB-4F-38-F7-BE-29-39-5A-C8-6E-37-46-D1-FE-33-09-D5-5A-30-73-D2-0D-2E-FE-CB-14-2E-2F-C6-8E-30-FA-C4-BA-34-8F-C9-39-39-80-D1-5D-3C-F6-D7-71-3C-3C-D8-F0-37-7B-D0-BD-2D-4B-C3-64-1D-29-B7-72-07-F7-B3-CB-ED-69-BF-B7-D3-FA-D9-86-BD-F5-FD-B1-AF-FC-20-B3-AD-C7-37-DA-B8-89-3A-94-CF-3C-28-77-ED-59-07-31-0C-AB-E3-03-25-05-CA-73-32-94-C3-A3-31-B2-D2-F2-22-5D-F2-C1-09-7F-18-7F-EB-F1-39-62-CE-73-4E-1B-B8-09-53-C9-AC-01-4A-5C-AE-D1-38-53-BC-12-25-E9-D3-11-12-A1-F0-19-00-30-0D-98-ED-A5-24-5B-D9-A9-33-97-C4-65-39-7F-B3-CE-37-FB-AB-E8-32-FB-B2-42-2F-AA-C9-12-30-E8-EB-BB-35-ED-10-6E-3D-05-2E-13-42-5E-3A-6D-3E-67-32-7D-2F-42-19-35-16-CD-F7-8F-F7-8D-D9-D7-DA-B0-C8-DA-C6-B8-CA-20-BF-ED-DE-70-C2-12-FF-6A-CB-E5-21-0A-D3-55-3E-F9-D3-48-4E-35-CD-17-50-B5-C2-65-46-BD-BB-C1-36-74-BF-A5-27-50-D1-7A-1E-13-EF-39-1E-53-11-C7-26-7E-2E-1E-35-FF-3E-18-44-9C-40-D9-4D-78-37-60-4D-01-2C-28-40-DB-26-3C-27-80-2C-61-07-C1-3A-11-E8-79-49-69-D1-44-4E-9B-C9-9F-41-D0-D2-11-23-48-EA-58-FA-30-09-D8-D4-F1-26-34-C0-29-3C-6A-C4-28-45-05-E0-EC-42-28-08-42-3A-C2-2C-6C-31-FF-3E-50-2D-70-37-67-2F-31-19-38-35-AD-F0-93-39-7F-CE-EF-36-98-C0-D6-29-91-CC-7A-12-79-ED-AC-F4-01-16-85-D6-01-36-56-BE-F8-40-B9-B0-D0-32-80-AF-01-11-BB-B9-CF-E7-87-CC-F9-C4-2B-E4-30-B2-0D-FD-B2-B1-2F-14-43-BE-54-27-51-CE-00-35-A8-D8-81-3C-9B-D8-20-3E-D4-CF-2B-3B-2D-C5-D1-35-3E-C1-92-30-4D-CA-89-2D-6B-E1-AF-2D-03-02-8F-30-D6-23-8E-34-65-3E-B5-37-34-4C-93-38-6B-4C-E3-36-51-42-95-33-0B-33-4C-30-DD-22-91-2E-4C-13-2A-2F-18-03-D5-31-FA-EF-89-35-1C-D9-ED-38-FB-C0-CD-3A-82-AD-37-3A-08-A6-50-36-05-B0-1E-2E-E8-CB-98-20-B0-F3-1E-0D-29-1C-51-F4-A7-38-C5-D8-CA-3F-17-BF-63-2F-13-AD-BB-0D-FE-A7-8C-E7-99-B2-4D-CB-AA-CB-B0-C3-C1-ED-77-D3-75-10-6E-F4-D0-2A-D2-19-13-36-5C-35-D0-2F-BE-3C-AC-1A-68-2D-7C-FD-19-0D-37-E1-2D-E7-5F-CE-CB-C7-B6-CA-22-B7-DE-D7-9E-B6-2A-F3-27-C1-73-16-20-CE-96-39-A6-D5-58-54-2C-D4-35-60-DB-CB-F6-59-49-C3-A3-42-27-C2-85-1F-91-CD-22-F9-9B-E5-21-D9-2F-05-96-C7-2F-24-90-C8-DC-3A-C6-DA-F0-44-F9-F7-0B-43-1F-17-12-3A-93-2F-B0-30-29-3C-49-2C-D5-3C-AC-2E-38-36-73-35-3A-2F-43-3B-AB-2D-41-3A-73-33-A2-2E-8E-3D-4B-18-57-45-E0-FA-A3-43-6D-DC-42-34-49-C3-62-18-21-B4-B4-F6-D9-B0-2C-D9-94-B8-46-C9-95-C8-57-CC-7F-DD-62-E1-4A-F4-4D-01-B4-0A-51-21-1A-1F-A0-36-16-30-E1-39-45-3C-67-29-73-42-54-09-1D-42-0A-E2-12-3C-95-BD-B2-32-E8-A4-95-29-BC-9D-7D-24-6A-A9-FC-25-D9-C4-3F-2E-5A-E9-93-3A-2F-0E-03-46-A0-2A-D8-4A-19-38-A4-44-F0-33-15-32-30-20-CE-15-15-03-06-F6-1E-E5-B9-DA-3A-CE-3A-CB-0C-C3-DA-CB-61-C3-86-DC-86-CA-CD-F8-92-D1-5B-19-B3-D2-4A-36-1C-CC-77-49-2C-C1-F8-4F-1D-B9-65-4A-B8-BB-D5-3B-65-CD-38-28-6B-EC-CC-12-C4-10-62-FD-D4-2E-8F-E8-F9-3B-B4-D4-1A-33-12-C3-1C-17-53-B6-2C-F2-FF-B1-04-D2-16-B9-AA-C2-59-CC-E4-C9-25-E9-35-E5-7E-09-36-0B-7B-25-93-2F-A6-35-ED-47-75-35-8D-4F-D2-24-7E-48-2C-08-CD-39-02-E7-F1-2B-76-C9-14-25-DF-B5-DE-26-30-AF-88-2E-D2-B4-F4-36-AD-C3-88-3B-CD-D7-72-3A-D8-ED-43-35-C0-03-BD-2F-95-18-9D-2D-A9-2B-81-30-C1-3B-F4-36-BA-46-F8-3C-05-4A-C3-3D-B4-43-CB-35-8E-33-35-24-A3-1B-29-0B-06-00-F2-EE-B0-E5-8B-D4-09-D1-3B-C0-9F-C4-C5-B4-91-C0-3D-B3-DA-C2-4F-BB-46-C8-A2-CB-B3-CD-0A-E2-06-D1-9F-FB-96-D1-E2-14-F5-CF-3A-2A-60-CD-BD-38-10-CB-1A-3F-C8-C9-1F-3E-B9-C9-8B-38-A1-CA-16-32-09-CC-09-2E-76-CD-EF-2D-84-CE-24-31-E6-CE-59-35-6B-CE-EB-37-17-CD-50-37-3D-CB-F1-33-90-C9-EF-2F-E4-C8-ED-2D-D9-C9-88-2F-6D-CC-43-34-C5-CF-9A-39-52-D2-40-3C-70-D2-F7-39-35-CF-0C-33-35-C9-A3-2A-B2-C2-68-25-2A-BF-3C-27-35-C2-E9-30-1E-CE-0E-3F-D1-E2-EE-4A-88-FD-08-4D-8B-19-6A-40-A0-31-4B-25-AF-41-B8-01-ED-47-C8-DF-07-45-05-CA-50-3B-67-C7-64-2D-94-D8-FA-1C-65-F7-6E-0A-13-19-5E-F5-08-32-FD-DD-D7-39-59-C6-E9-2D-C8-B2-E6-11-FB-A8-03-EE-DD-AD-F2-CB-10-C3-C9-B3-35-E5-E8-A9-FF-0B-8B-AE-67-2C-B7-BE-61-3C-E2-D5-B5-36-8B-EF-6C-1D-30-08-97-F9-96-1D-51-D8-85-2E-03-C6-56-3A-B0-C9-A7-40-26-E2-41-41-5F-06-21-3C-DB-28-76-31-B8-3C-A2-21-78-3A-46-0D-91-22-78-F5-DF-FC-24-DC-4E-D5-5F-C4-3B-B7-53-B2-87-A9-7E-AA-DF-AC-52-B0-BE-BC-8C-C4-5A-D2-0C-E4-F1-E7-DE-07-F9-FA-D2-26-21-0C-47-38-85-1D-31-37-26-30-23-24-22-42-53-05-BA-4E-75-E4-40-50-17-CB-01-43-06-BF-B8-27-3E-C0-4D-04-56-C9-3F-E2-47-D2-60-CB-64-D4-45-C6-AC-CD-E1-D3-F0-C1-59-EF-2F-B9-06-10-C1-BB-CA-2C-1E-CE-3B-3F-18-EE-73-45-FC-12-E4-41-B3-30-8A-39-A2-3C-7F-31-28-32-0A-2D-E2-14-D0-2C-90-EF-68-2F-13-D0-9F-32-25-C2-C5-34-F5-CA-57-35-74-E7-DF-34-E4-0D-5B-34-F1-31-89-34-7F-49-7C-35-2D-50-9F-36-49-48-F0-36-05-39-2A-35-DD-2A-E6-2F-FD-23-A5-25-0C-26-33-15-43-2E-44-FE-72-37-5B-E2-CB-3C-71-C5-32-3C-AF-AD-E8-36-05-A2-7E-30-BE-A7-BE-2C-F5-BF-9C-2D-05-E6-50-32-0D-10-DC-37-B0-31-C1-3A-55-40-FC-38-4E-37-35-33-21-1A-85-2C-BD-F3-F6-28-AB-D2-5B-2B-98-C3-9C-33-4D-CC-52-3E-56-E9-EA-45-3A-0F-E3-44-FA-2E-31-38-0A-3C-B8-20-49-31-20-03-01-13-31-E6-13-ED-3F-D0-31-CE-D6-C4-1F-C2-8A-C3-53-CD-7C-C8-AD-EB-41-CE-9A-12-5A-D0-93-35-27-CD-03-4B-94-C6-81-4F-29-C1-5D-46-FE-C1-60-37-7B-CC-02-2B-CA-E0-BE-26-A8-FB-05-2B-8D-17-78-33-B4-2E-1F-39-1E-3D-84-35-D0-41-60-25-DA-3E-E6-09-42-38-56-E8-44-32-27-C8-B5-2F-A8-B0-02-31-E6-A6-28-34-86-AC-8A-35-A9-BF-42-31-B8-DB-92-24-A6-FA-EE-0E-48-16-73-F2-6F-29-AE-D3-B5-30-B7-B8-02-2B-C9-A7-B0-19-9A-A5-55-00-E2-B3-26-E4-58-D0-E3-CA-C3-F4-8C-B9-37-18-10-B3-64-31-7A-B7-67-39-CF-C3-30-2E-DE-D2-93-13-BC-DE-6F-F2-B3-E2-EF-D5-E9-DC-E1-C7-2F-CF-50-CD-A1-BE-B5-E4-1C-B2-A0-06-F5-AF-92-28-B1-BB-ED-40-8A-D4-82-4A-57-F5-31-46-F8-15-08-3A-CF-2D-34-2E-81-36-37-29-11-2E-F2-2C-6E-17-E8-35-6B-F9-F5-3C-58-DC-B6-3A-37-C7-0E-2B-7C-BD-36-0F-4A-BE-5D-ED-4D-C5-24-CE-E0-CC-1E-B9-8B-D0-FA-B1-E3-CE-91-B7-04-CA-3F-C5-8C-C6-A3-D5-87-C9-56-E5-32-D6-45-F4-86-EC-D4-04-00-09-70-19-C9-25-D7-31-BA-3C-AF-49-6E-49-74-59-98-4A-82-59-52-42-FE-45-34-35-AA-21-BB-28-1A-F6-8E-21-D2-D0-21-22-44-BE-1C-2A-BC-C4-92-36-74-E1-F0-42-2D-09-47-4A-68-2C-A7-48-6F-3D-44-3C-CA-35-18-26-D6-18-E0-09-5D-F2-66-ED-D5-D1-22-D7-20-C4-96-CC-76-CE-C4-D0-70-EC-28-E3-FE-11-C1-FF-56-30-08-20-C1-3B-A7-3C-FF-2F-69-4F-A1-11-BE-54-06-EC-69-4C-F7-CC-27-39-B8-BF-89-1F-56-C9-90-04-68-E7-59-EC-59-11-6E-D9-79-3B-B4-CC-9E-5A-D2-C5-1F-67-C5-C3-88-5E-44-C5-C6-43-F2-C8-08-1E-62-CD-CE-F6-21-D1-A0-D7-E1-D2-C8-C7-D3-D1-8A-CA-08-CE-2A-DE-9E-C8-2A-FC-B3-C3-F7-1A-D8-C1-A9-30-69-C5-15-36-DC-CF-32-29-50-E1-D1-0D-6D-F8-51-EC-92-12-92-CE-39-2C-4A-BC-7C-41-3C-B8-B1-4E-7F-BF-0A-51-27-CB-48-47-A4-D3-57-32-51-D4-99-15-9E-CD-A0-F6-DB-C4-2D-DC-AA-C1-93-CC-46-CA-F1-CB-60-E0-C9-DA-00-00-A1-F5-07-21-E8-15-9B-3A-D7-33-E1-46-C7-48-61-45-F2-50-E7-3A-39-4C-0B-2F-85-3D-8B-28-2C-29-3F-2A-24-13-1D-32-D0-FD-B0-3A-E9-E9-48-3E-62-D7-32-3A-B5-C6-63-30-CD-B9-95-26-DD-B3-48-23-1A-B8-15-2A-00-C8-35-39-EE-E1-8E-49-FB-00-85-51-4D-1E-5A-49-7E-33-2C-2F-12-3D-A2-08-D9-3B-5E-E1-86-34-99-C6-8C-2D-CB-C1-2E-2C-92-D4-FF-31-9E-F7-0A-3C-59-1D-10-44-1E-37-5C-43-F8-3A-E7-35-8E-27-76-1C-9F-04-97-FC-EE-DF-7A-DE-D1-C7-94-C9-A2-C5-84-C1-3C-DA-B9-C4-CD-FD-4D-CD-F4-22-EB-D3-D7-3B-4F-D3-2A-3F-E6-CA-38-2B-3F-BF-1C-06-10-B8-25-DB-9F-BC-AD-B6-2A-D0-0F-A2-D1-EF-23-A1-22-13-E9-B1-10-2F-2D-CE-35-3A-27-EE-9C-30-F6-0A-86-15-0B-20-76-F2-4C-2B-CD-D3-5D-2C-69-C4-C0-23-DA-C9-65-12-B4-E2-F5-F9-6A-07-79-DD-45-2D-C0-C1-2E-4A-F0-AC-CA-57-0D-A5-E2-54-DB-AD-CD-44-F6-C6-56-2D-1B-EB-39-14-24-11-49-FD-B5-2E-E6-E9-9C-3B-B7-D9-B0-34-14-CC-F8-1C-44-C1-8F-FC-F1-BA-92-DD-8D-BB-61-C8-0E-C5-A5-C0-AD-D7-47-C4-41-F1-E9-CC-9C-0D-1F-D3-C3-27-FE-D1-65-3B-7E-C9-0F-46-97-BE-87-47-01-B9-3F-41-91-BF-4E-35-C3-D4-73-25-01-F5-A8-12-7C-17-6D-FD-4D-31-8F-E6-B0-39-F5-CF-93-2D-DD-BC-00-11-49-B1-EC-ED-B3-B0-B1-D0-99-BC-B3-C3-77-D3-CD-CB-DC-F0-D5-E6-92-0E-BA-0C-8F-26-94-32-F4-34-64-4E-49-39-17-5A-73-36-D6-54-5E-31-57-42-DC-2E-C0-28-93-31-2B-0E-C6-38-CE-F6-8B-40-56-E4-61-43-80-D6-86-3C-58-CC-30-2A-56-C5-B1-0E-C5-C1-24-F0-47-C2-A2-D6-E2-C6-A0-C9-36-CE-60-CD-6C-D5-78-E1-1C-D9-DC-00-CB-D6-7B-23-69-CE-C0-40-E6-C2-1A-52-84-B9-AF-54-09-B8-AA-49-59-C2-31-35-A0-D8-84-1C-D3-F6-29-04-EC-15-C3-EE-7D-2E-02-DD-92-3B-86-CE-A8-3C-23-C3-C8-35-C3-BB-B6-2D-6B-BA-D4-2A-5D-C1-0E-30-B3-D1-4C-3B-3E-EA-18-46-43-07-6D-48-5C-23-7C-3C-2D-39-C9-21-30-45-33-FE-CE-46-29-DC-21-40-C9-C6-97-34-70-C5-13-27-A4-D8-97-18-BE-F9-1F-08-8C-1D-ED-F3-D9-38-98-DB-E9-44-C6-C1-F3-41-6F-AC-77-36-25-A3-CE-2B-E1-AB-7A-29-AF-C7-67-31-E0-F0-D1-3E-E9-1B-85-48-12-3B-5C-45-A1-43-F6-30-7C-32-7D-0E-12-0E-08-E8-76-E4-C6-CA-28-C6-80-C1-7C-BF-E2-CF-5A-D3-99-F0-C8-F9-33-17-E9-22-F8-34-7B-3D-A9-3E-23-3E-D0-30-5F-24-BC-10-F8-FA-E7-E9-85-D3-09-C9-F7-BE-00-B7-45-C6-B7-B5-76-E6-3D-C0-CE-11-C5-CD-A9-35-0D-D6-84-42-23-D5-BF-32-EA-CC-08-0D-D4-C3-90-E1-9E-C1-08-C3-9D-CB-95-BE-47-E2-26-D6-0B-01-AE-FF-47-20-82-29-76-38-F0-41-05-45-B8-3E-C7-45-3D-21-64-3E-BE-F5-62-34-04-CE-BC-2C-00-BA-16-2A-79-C1-48-2C-74-E1-1B-31-22-0E-C4-35-3F-38-3E-38-46-53-0B-38-E3-59-FE-35-BA-4E-7F-33-BC-39-BC-31-8B-23-2F-31-5E-11-9B-31-41-03-76-32-75-F5-50-33-E5-E3-05-34-BD-CD-A1-34-28-B7-1F-35-28-A8-49-35-F0-A8-CA-34-7E-BD-7E-33-A4-E2-B9-31-28-0E-4D-30-1F-32-30-30-43-42-E9-31-19-39-10-35-79-1A-3F-38-6F-F2-A4-39-9B-D0-EF-37-19-C2-39-33-50-CC-5B-2D-DF-EA-55-29-71-11-F9-29-B5-30-55-30-76-3C-AD-3A-52-30-8A-44-3E-11-2E-48-5F-EB-D4-40-2C-CD-EC-2C-EC-C1-57-0F-B2-CD-F2-EE-52-EC-8A-D4-83-13-E5-C7-12-37-FE-CC-76-4D-94-E2-D6-52-94-02-B3-49-42-24-16-39-2B-3F-49-29-C9-4D-9C-20-D0-4E-6B-21-BA-44-EA-29-FB-33-A1-35-C7-20-99-3F-75-0D-3A-44-38-FA-2B-42-3D-E6-05-3A-6C-D1-41-2D-DA-BD-22-1D-E9-AF-3C-0A-F4-AC-D2-F4-D4-B8-C6-DD-73-D3-69-C7-9B-F7-AB-B5-D7-1B-32-AD-60-35-B5-B1-FF-3B-31-C4-6B-2D-C5-E1-9E-0E-FA-03-75-EA-51-22-EB-CD-D6-34-61-C3-AA-36-CE-CE-A1-27-56-EC-4B-0C-08-12-5F-EC-DC-33-22-D0-66-48-C7-BD-44-4C-AB-B7-D6-42-10-BC-1F-34-51-C6-CF-28-E5-D0-4C-26-77-D7-8A-2C-1F-D8-AC-36-9E-D3-F8-3D-83-CC-9D-3D-D8-C5-75-35-F9-C1-3C-2A-12-C2-22-23-56-C6-D2-25-A4-CE-F0-32-16-DB-DA-44-1D-EC-A0-51-DF-01-77-4F-4B-1B-A6-39-61-35-9E-13-3E-4B-90-E8-33-57-58-C7-A9-54-5C-BC-2E-42-01-CC-C3-22-3B-F0-AC-FD-88-1A-AB-DC-AA-39-02-C9-CA-40-53-C8-F5-2C-6C-DA-71-06-1C-F9-67-DD-FC-19-13-C3-E4-31-79-C2-AB-38-BF-DB-DE-2B-25-04-6C-0F-9E-2A-18-EC-0F-3F-2C-CC-0F-39-D3-B7-55-1B-63-B2-65-F2-B2-B9-31-CF-8A-C7-07-C0-80-D4-D7-CA-05-DB-0D-EB-5D-D9-C6-13-C8-D1-2D-35-F0-C8-A6-42-6D-C3-49-37-98-C3-0D-17-9F-C8-87-EC-32-CF-95-C4-71-D3-C7-A9-01-D3-69-A1-4E-CE-E3-AA-43-C8-3B-C1-AE-C4-A8-DD-1B-C6-F4-F9-3B-CC-EB-11-D5-D3-98-23-49-D8-C7-2E-0C-D6-5B-34-D5-CC-CF-35-6E-C0-03-35-7A-B7-F9-33-B1-B8-5B-34-C2-C7-CA-36-4C-E3-4C-3A-F9-04-37-3C-DF-23-01-39-23-38-B6-2D-51-3E-7F-19-C1-38-88-FE-77-2E-A7-E1-C9-27-D6-C8-53-2A-19-B9-16-36-B8-B4-24-45-CA-BA-2C-4E-16-C8-D2-48-E3-D8-F4-31-BF-EA-CF-0D-3F-FD-F5-E6-3C-11-6B-CA-25-27-58-C2-3D-3D-A1-D1-0D-4F-67-F2-87-56-01-18-A7-4E-D7-33-50-36-1F-3B-00-12-1E-2B-3A-EB-31-0A-94-CD-45-E5-7D-C2-BA-CA-6A-CD-D6-C4-2F-EA-E0-D5-47-0E-70-F7-A8-2C-0D-1D-96-3A-DD-38-7D-33-9A-40-3F-1A-F8-30-A7-F7-54-0E-A4-D6-CA-E2-10-C0-A3-BA-AF-B7-76-A0-8D-BB-56-9A-B1-C5-A6-A8-36-CF-A6-C6-5C-D3-40-EC-3B-D1-3E-10-BD-CB-80-2A-FC-C7-AA-35-F6-CA-29-30-91-D7-75-1C-9A-ED-88-00-F1-09-87-E4-8C-27-C3-D0-D4-40-79-CB-EF-50-FF-D6-B8-54-EC-F0-5B-4B-B6-12-86-36-A7-33-3C-1A-90-4B-02-FC-53-55-AD-E1-1B-50-C4-CF-0F-3F-19-C8-98-27-22-C9-0E-0F-89-CE-E4-F8-E0-D2-16-E6-FE-D1-FA-D5-F3-CA-E1-C7-CC-C0-96-BC-7C-B9-BA-B6-5C-BB-BE-B9-35-CA-F9-C7-1B-E5-C4-E0-1B-06-D0-FF-15-24-2E-1E-FA-35-CE-34-2B-36-55-3F-9B-24-04-3E-C3-06-99-35-86-E5-20-2D-E9-C9-A7-2A-EF-B9-4D-30-F6-B6-1B-3B-E1-BD-47-44-FD-C8-56-44-93-D2-C0-36-0B-D7-4C-1C-D8-D5-18-FB-F5-D0-17-DC-7A-CB-45-C7-03-C8-40-C0-92-C7-E1-C4-79-C9-7F-CE-FD-CB-3E-D5-63-CD-ED-D3-DB-CC-8E-CA-E4-CA-6C-BE-48-C9-A1-B7-91-CA-35-BD-54-D1-A4-D1-5F-DF-4A-F1-05-F5-88-13-9C-10-02-2E-4E-2E-96-38-86-48-61-30-04-59-89-18-A1-5A-C3-F8-33-4B-3B-DA-F9-2C-47-C4-C2-06-3B-BA-7A-E2-FD-BA-54-CA-4F-C2-5E-C5-F5-CA-CD-D4-D5-D0-15-F3-41-D2-80-15-32-D0-C3-2F-9F-CD-59-38-5D-CE-0D-2C-EA-D5-38-0F-5D-E6-42-EC-8F-FF-DD-CF-A6-1E-6A-C4-22-3E-52-CE-C9-56-AD-EA-6A-61-99-10-42-59-B1-34-3F-3E-2E-4D-13-16-15-55-59-EB-77-4D-A5-CA-61-3C-3A-BE-1F-2A-08-CA-17-1E-96-E9-4B-1C-14-11-78-24-70-31-BE-32-0D-3E-61-41-E1-31-CF-4A-AC-11-38-4B-58-EA-55-41-DD-CB-5D-2E-BF-C2-76-15-D3-D2-EC-FA-8E-F5-82-E3-A8-1C-C1-D3-01-38-3E-CF-52-3C-D3-D7-D0-27-E2-EC-E0-02-F9-0A-99-DC-19-2C-83-C4-D2-48-54-C4-0C-5A-1F-DC-0A-5B-87-02-F3-4A-A9-28-59-2D-F5-3F-67-09-95-3F-FC-E7-4F-27-1C-D1-FF-FE-C0-C9-31-D3-94-D2-77-B0-1F-E8-5E-9F-1C-04-56-A2-8C-1F-04-B6-C0-34-6A-D3-B4-40-BB-F2-6D-43-BA-0D-53-3F-07-21-F7-37-28-2C-D1-30-C3-30-49-2C-8E-31-50-2B-55-31-88-2D-3C-32-AA-31-42-35-18-36-02-3A-47-39-A6-3E-29-3A-46-40-6E-38-BD-3B-A5-34-DB-2E-25-30-9D-19-B0-2C-E9-FE-E2-2B-4B-E4-7C-2E-A6-D0-D9-33-22-CA-EF-39-05-D4-F1-3D-46-ED-7C-3D-6D-10-E1-37-ED-34-E0-2E-93-51-53-26-17-5F-C4-22-3F-5A-47-27-9D-44-8F-33-F2-23-42-43-69-00-0B-4F-51-E2-4A-4F-0F-D0-74-3F-C4-CC-AA-20-DA-D7-3A-FA-9D-ED-91-D7-62-08-23-C4-13-22-D1-C6-B0-35-C3-DE-76-40-2C-03-5F-42-47-26-D9-3D-8C-3A-CA-36-FD-37-19-31-71-1F-2F-2F-56-FA-FC-30-05-D7-DE-33-21-C3-8A-33-44-C6-B6-2B-51-DF-F3-19-3E-05-FD-FE-18-2B-06-DF-59-45-BD-C0-4E-4E-66-AB-BA-47-A0-A4-34-39-8D-AE-29-2C-10-C7-66-27-4C-E8-33-2C-44-0A-1A-36-F8-24-56-3D-71-32-97-3A-31-30-62-2A-B5-1F-99-0E-FB-05-8B-ED-49-EA-45-CF-71-D4-7A-BA-04-CB-49-B2-B3-D1-E2-B5-41-E8-D3-C1-4C-0A-28-D2-18-30-31-E4-4D-50-24-F7-58-62-63-0B-E4-60-FD-20-9A-4B-5E-36-9E-27-ED-47-5A-FE-FE-50-E8-DA-AB-4D-CC-C6-C2-3C-F8-C6-D2-20-2D-DA-F4-FF-4D-F9-1F-E2-99-19-C9-CE-2C-30-AE-CA-89-35-72-D6-07-28-A8-EE-4A-0C-F4-0C-B5-EB-07-2A-50-D1-AA-3F-2C-C6-44-4A-97-CE-90-49-DC-E8-53-40-03-0E-50-33-21-34-CA-27-5E-51-EC-21-C0-5E-AE-23-D4-59-55-2C-DF-44-AC-38-C2-25-02-44-11-04-90-49-14-E7-D9-45-31-D4-BB-37-2B-CE-DC-20-19-D5-4E-05-D4-E6-9D-EA-AF-FF-81-D6-25-1B-97-CD-75-34-53-D2-3F-47-6F-E4-29-50-D2-00-73-4D-00-22-6D-3F-04-41-8A-28-C9-56-F3-0C-B7-5D-8E-F1-44-53-C8-DA-04-39-75-CB-BD-14-3C-C4-5A-EF-B1-C3-90-D2-16-C7-09-C6-77-CB-E6-CC-A1-CE-75-E4-AB-CF-D1-04-EB-CE-4C-23-63-CD-DF-35-12-CC-6C-36-7B-CB-9D-24-8F-CB-C4-05-E6-CB-BD-E2-25-CC-C8-C4-3B-CC-91-B2-5E-CC-82-AE-C2-CC-E4-B6-5D-CD-80-C7-D6-CD-D1-DB-AF-CD-C9-F0-AC-CC-54-05-19-CB-90-19-CA-C9-5D-2D-B4-C9-1F-3F-4F-CB-84-4B-27-CE-85-4E-DB-D0-32-45-B9-D1-85-2F-B9-CF-34-11-3F-CB-12-F1-43-C6-32-D7-8C-C3-5E-CA-4B-C5-E5-CD-B0-CB-A2-E0-48-D4-6B-FD-BD-DA-D1-1C-C8-DA-6A-37-90-D2-E7-47-49-C4-5B-4C-21-B6-4F-46-2D-B0-E5-39-F7-B8-71-2C-2B-D2-E5-22-EE-F6-83-20-DF-1C-12-26-B2-37-AD-31-FE-3D-3B-3F-54-2D-85-49-BD-0B-9E-4B-C5-E5-6C-42-C1-C9-D4-2D-43-C2-27-11-FF-D1-87-F2-F5-F2-4D-D9-27-19-EC-CB-C8-37-FC-CD-85-46-17-DF-A2-44-F7-FA-9A-38-C6-1A-71-2C-28-37-9A-28-48-4A-B9-2F-1C-51-56-3D-BA-4B-0C-48-9C-3C-38-46-5F-27-F8-32-8A-0F-1B-11-D8-F7-95-EA-28-E2-A1-CC-D1-CF-3A-C2-1C-C2-51-CF-6B-BA-E9-EE-05-BA-D7-14-9A-C1-7F-32-CC-D0-8C-3C-FB-E5-42-2F-7B-FE-C9-0F-0A-17-F9-E9-74-2C-C4-CB-24-3C-20-C0-81-44-5A-CB-39-45-1A-EA-56-3F-27-13-43-35-DC-3A-85-2A-F1-56-05-23-3E-61-0A-22-C3-58-EC-28-14-41-17-36-B2-20-E7-44-17-FF-BF-4E-1A-E3-3D-4D-CE-D1-E1-3C-E1-CD-13-1F-5B-D7-8A-FA-BB-EB-8D-D9-65-06-7D-C6-91-21-D8-C7-A0-37-59-DD-99-44-8D-FF-32-47-29-22-29-41-7D-38-93-36-3A-3A-5E-2C-8D-26-95-26-4F-04-14-27-20-DF-1A-2D-A5-C2-DD-35-EA-B5-C9-3D-F4-B8-BA-41-6D-C5-DF-3F-15-D2-DB-37-4E-D7-4D-2A-B3-D2-3E-18-0F-C8-C8-02-5D-BF-46-EB-CB-C0-BF-D3-AC-D0-3C-BF-3F-ED-A0-B1-53-0F-AD-AE-66-2D-9F-B8-D0-3F-E3-CE-F5-43-85-ED-18-3D-D1-0D-70-32-05-28-87-2B-90-35-9D-2C-19-33-C0-34-76-21-66-3E-54-05-34-42-B1-E5-91-3A-BF-C9-47-26-F9-B6-26-09-0C-B0-53-EA-C6-B4-45-D1-DF-C2-CE-C2-19-D7-78-BF-4A-EE-DF-C3-E4-05-AD-CA-F7-1B-23-CF-ED-2E-0F-CF-43-3D-61-CB-7F-45-68-C7-67-46-2E-C7-64-3F-D4-CD-D5-30-89-DC-32-1C-4D-F2-E1-03-74-0C-DC-EA-4D-27-38-D4-BB-3E-B5-C2-B6-4E-6D-B8-DE-53-9C-B6-45-4C-76-BD-4A-38-22-CC-28-1B-D5-E0-BB-FA-04-F9-16-DE-C0-11-3F-CB-21-28-EE-C4-A9-39-45-C9-89-44-5B-D2-BF-47-B6-D8-16-43-B7-D6-13-37-81-CB-E1-24-F1-BB-3F-0E-DA-B0-7F-F5-27-B3-6C-DD-67-C7-06-C9-DE-EA-0E-BB-AC-13-86-B5-38-34-40-B9-A9-40-AD-C5-20-34-F4-D8-47-13-5C-F0-F9-EA-D0-08-55-CB-5C-1F-34-C1-8D-31-CB-D0-B3-3D-BE-F3-02-43-B0-1B-BB-41-2F-38-4B-3B-7B-3D-32-32-6D-29-B0-29-4F-04-09-25-5B-DD-77-26-70-C4-31-2E-9D-C3-E9-39-2C-DB-1C-45-BA-01-53-4A-27-28-01-45-9E-3F-63-33-32-3F-A6-17-DD-26-AC-F7-E1-FE-86-DB-22-D4-EF-CA-25-B3-B7-CA-CF-A3-21-DB-79-A7-BE-F7-BA-B9-EC-18-3C-D3-57-36-0C-ED-97-49-13-03-CC-4F-99-14-DD-49-1F-23-46-3B-55-30-30-28-4F-3C-BB-13-EC-44-4A-FF-AF-46-E9-EA-92-3E-9D-D6-CB-2B-BB-C3-BD-10-60-B5-78-F2-C8-AF-1C-D7-92-B6-B4-C3-B7-CA-A8-BA-3C-E9-3F-BB-4D-0B-A3-C2-14-28-95-CD-85-37-25-DA-34-35-6C-E8-F7-21-F8-F9-A4-03-20-10-09-E3-1F-2A-CC-C8-F8-43-7E-BA-05-57-FF-B8-27-5C-BF-C0-E2-4E-AE-CB-10-30-F0-D3-C6-06-36-D6-B4-DE-B6-D2-5D-C4-82-CC-6F-C0-A1-C7-12-D4-DF-C6-E1-F7-69-CA-47-1E-C5-CF-74-38-36-D3-22-3C-D8-D1-C9-27-6B-CB-6E-03-ED-C2-A1-DD-95-BD-B0-C5-AE-C0-71-C5-2A-CF-27-DD-0E-E8-4E-03-7F-06-6D-28-79-23-65-3D-74-38-94-39-E3-41-5A-1E-7D-40-78-F6-A0-38-A3-D1-3A-30-40-BE-1B-2C-DB-C3-F5-2D-97-E0-E7-33-7A-0A-BF-39-C6-33-68-3B-73-50-3E-37-4A-5A-27-2F-38-52-C8-27-7E-3E-2A-26-FF-26-E0-2C-85-11-20-3A-D4-FF-DF-47-24-F0-01-4E-9F-DF-EB-45-3A-CD-D6-2D-73-BB-67-0A-D7-AF-94-E5-7C-B0-1C-CB-C1-C0-F8-C3-E3-DE-A0-D2-BA-03-BF-F1-E6-24-F3-15-86-38-03-32-EB-38-C3-3B-AE-26-CF-2F-44-08-7C-12-56-E7-CC-ED-08-CD-4C-CD-C7-BE-9D-B9-D4-BC-7F-B5-09-C3-7C-BD-4C-CB-23-CA-64-D0-B5-D3-20-D0-96-D5-D1-CB-26-D0-68-C7-31-C8-86-C7-86-C4-91-CF-D2-CA-87-E0-23-DD-C7-F8-12-F9-AF-14-C3-18-A3-2F-2A-35-12-45-78-48-31-51-BA-4F-9E-51-37-4B-D7-45-8F-3D-89-2F-46-2A-99-12-7E-14-85-F4-4C-FE-2C-DB-F8-E8-12-CB-94-D5-C4-C5-91-C5-28-C9-E7-BA-27-D0-A3-B7-BA-D4-1D-BD-9F-D2-50-CB-89-C9-92-E0-C4-BD-DB-F9-9B-B6-87-13-2F-BB-2C-2A-E9-CE-35-3B-31-EF-21-45-A4-13-63-47-E5-30-1B-42-0A-3D-E0-35-B6-33-B9-23-17-18-30-0D-BF-F3-79-F4-C9-D2-62-DC-DD-BE-03-C8-5A-BB-3B-BA-54-C4-10-B5-E2-D0-4B-B9-B4-D7-4D-C6-C9-D3-31-DA-01-C7-27-F2-5D-B9-F6-0A-29-B5-7B-21-C2-C1-1A-33-86-DF-21-3E-CB-06-10-42-97-2A-B2-3F-ED-3D-08-39-72-39-E8-30-D4-1E-57-2A-71-F8-C0-27-5C-D5-3F-2A-53-C3-2B-31-41-C9-27-3A-A1-E4-B4-41-A6-0A-27-44-A9-2C-C5-3E-E7-3D-A2-30-2B-38-07-1B-B1-1D-2E-01-96-F7-71-E7-EC-D1-17-D2-23-B7-2A-C4-9C-AC-AE-BE-93-B1-76-C0-6A-C0-A4-C6-68-D1-B2-CD-C0-DD-9C-D2-91-E1-CD-D3-94-DC-78-D1-7D-D1-41-CD-9E-C4-62-C9-7D-BA-A0-C7-C2-B6-8E-C8-99-BB-63-CB-68-C9-72-CE-BC-DE-0E-D0-78-F8-70-CF-66-12-10-CD-2C-28-64-CA-84-36-0E-C9-4F-3C-F0-C9-06-3B-A7-CC-2D-36-A2-CF-EF-31-FD-D0-4D-31-97-CF-BA-34-D6-CB-C5-39-A1-C7-06-3C-81-C5-08-37-3C-C7-4D-28-A8-CC-90-10-5C-D3-BC-F3-AC-D7-93-D7-6D-D6-B2-C1-D9-CE-C5-B5-85-C3-B1-B4-D4-B9-F1-BC-EE-B7-C4-CB-17-C2-81-DE-90-D8-5F-F3-12-F7-61-09-3A-16-96-1F-6A-2E-48-34-DC-3A-A4-44-87-3B-44-4D-E6-34-50-4B-D1-2D-D1-3D-30-2C-80-26-26-32-B7-09-EC-3C-6D-ED-02-46-B9-D7-2E-46-51-CD-EC-38-8C-D0-D1-1E-08-E1-D0-FD-D8-FB-43-DF-0B-1C-77-CC-67-3B-40-CB-47-53-CF-DB-D6-5D-9B-F8-7B-57-42-18-43-40-93-30-AA-1C-A5-39-2D-F5-F7-2F-52-D4-37-15-8B-C3-9F-EF-DC-C7-49-C8-A3-DF-F4-A8-9D-02-B8-99-71-24-FD-9E-FF-38-2C-B8-D5-38-64-DF-01-24-92-0A-F2-01-EE-2D-54-DE-73-3F-4B-C4-3D-3A-FD-B9-9B-20-65-BE-CB-FB-62-CA-2E-D9-84-D4-A0-C5-CB-D5-9B-C8-2B-CD-27-E1-22-C0-E9-05-17-B8-8A-28-AC-BD-4C-3B-33-D4-8F-36-6E-F7-F8-1B-B5-1C-E3-F5-25-37-49-D3-01-3D-BD-C1-F6-2B-15-C8-5B-0A-F1-E3-D5-E4-1E-0B-77-C9-1C-30-56-C2-C3-47-E7-D1-89-4D-7C-F2-A1-44-02-19-AF-35-95-39-49-2A-F3-4B-5F-28-1A-4E-B0-2F-12-44-47-3A-62-35-A1-3F-89-29-E4-38-09-25-27-24-2D-28-59-05-CC-2F-83-E4-65-37-48-CA-71-3B-56-BC-C9-3A-50-BB-C4-36-11-C3-18-32-F4-CC-4A-2F-FB-D2-70-2F-64-D2-DB-31-9B-CC-BC-34-4B-C6-41-36-24-C5-93-35-5B-CD-3F-33-07-E0-D5-30-C6-FA-0C-30-A8-18-D1-31-E2-33-BD-35-70-47-09-3A-3C-50-25-3C-74-4D-85-39-4D-40-5B-30-70-2B-1F-20-57-12-C2-09-BA-F8-96-EF-03-E2-13-D5-D5-D0-6A-BE-90-C6-D4-AF-0C-C3-BF-AC-AE-C4-CB-B6-F4-C8-F8-CC-43-CD-50-EB-BD-CF-7B-0B-CD-CF-0D-26-25-CE-80-34-2F-CC-2D-33-41-CB-7B-22-D9-CB-E5-06-5E-CD-A6-E7-7A-CE-7D-CC-DE-CD-41-BB-22-CB-39-B6-40-C7-B5-BB-8D-C4-0B-C7-0C-C6-8B-D2-58-CE-90-D9-9F-DE-F8-D9-F1-F5-78-D4-4F-11-E2-CB-4A-2C-C9-C3-11-42-2E-BF-A2-4E-BE-BF-B8-4F-D2-C5-48-45-F6-D0-70-31-8E-E0-F0-17-08-F4-3C-FD-A7-0A-80-E5-DA-22-BF-D3-C5-39-3C-C9-51-4B-6B-C5-14-53-51-C6-D1-4D-39-C9-05-3B-A6-CB-C0-1D-1D-CC-53-FC-AD-CA-C5-DE-EE-C8-80-CC-85-C9-0C-CA-4E-CF-B0-D7-5B-DC-80-F1-15-F1-B2-10-BD-0B-D1-2D-80-28-E2-42-1D-42-C3-4C-11-53-62-4B-08-57-E2-40-33-4C-42-30-1F-34-2F-1C-B7-13-67-06-46-F2-01-F0-BB-D7-1E-DA-7F-CA-97-C6-96-CD-33-B8-B7-DF-24-B2-AA-FB-E6-B6-E8-19-0F-C7-FF-32-86-E0-E7-41-8E-FE-64-45-B3-1A-02-40-69-2E-B2-36-CC-34-A4-2E-00-2C-38-2B-CB-15-F2-2C-1D-F7-BA-31-D6-D6-45-36-14-BC-E6-37-75-AC-F5-35-DE-AA-09-32-FB-B6-0E-2F-97-CD-91-2F-A0-E9-2A-34-96-05-CB-3A-E4-1C-51-3F-E6-2C-2E-3D-42-35-61-31-8F-37-F3-1B-82-36-39-00-DC-34-C1-E3-85-34-61-CC-FA-35-3C-BE-54-38-78-BA-9D-39-24-BF-75-37-3C-C8-CF-2F-44-D1-8A-21-CD-D6-DA-0C-54-D7-8B-F3-5B-D3-E7-D8-C8-CC-42-C1-0B-C6-33-B1-62-C1-7D-AC-80-C0-E3-B4-8B-C4-60-C9-36-CE-10-E6-B1-DD-F8-04-70-F2-B7-1F-D9-0A-78-31-1E-24-87-38-7E-3A-D9-36-00-4A-34-31-72-4F-1F-2D-66-49-83-2E-BA-38-D4-35-7E-20-B0-3F-33-05-28-46-9A-EB-44-43-7C-D7-C8-33-D0-CA-02-19-77-C5-DD-F8-9E-C5-0A-DC-7D-C8-FA-CA-5B-CB-DD-CA-66-CC-CD-DB-4A-CB-D2-F8-46-C9-BE-19-D2-C8-02-36-DE-CC-77-47-D7-D7-05-4C-B3-EA-BA-45-48-04-7E-39-2A-21-0B-2D-38-3C-FF-24-C2-4F-A5-23-0A-57-C0-28-B4-4F-0C-32-B3-3A-2C-3C-52-1C-8F-43-55-FB-36-45-48-DF-3E-3F-90-CE-33-31-BD-CC-3B-1C-AC-D9-FD-02-AD-F1-2A-E9-AA-0E-AE-D2-E1-29-BC-C2-BE-3D-08-BB-42-47-82-BB-91-46-C7-C2-8F-3E-FB-CE-B8-33-BA-DE-A0-2A-76-F1-7A-26-21-07-42-28-26-1F-A4-2E-56-37-AC-36-88-4B-F1-3C-59-56-E5-3E-11-53-C8-3B-EC-3F-ED-34-C2-1F-34-2D-1A-FA-EE-27-3C-D9-97-27-DC-C6-CD-2C-89-C8-F5-35-5F-DD-A2-3F-F5-FD-A9-45-DF-1E-66-44-AB-34-E9-39-E8-37-A5-26-A2-27-6E-0D-61-09-E5-F2-BE-E6-80-DC-AA-C9-57-CF-E2-B8-06-CF-F5-B5-CA-DC-72-BD-E9-F6-FC-C8-AA-18-3B-D2-F6-3A-69-D5-B5-55-8C-D2-B4-61-1B-CD-C8-5A-53-CA-71-41-1F-CF-5C-1B-45-DE-52-F2-63-F7-9C-D1-E8-16-88-C2-E4-36-30-C9-6B-50-C4-E2-46-5D-17-06-88-59-8D-26-E5-44-73-38-52-23-3D-35-9E-FC-0A-1E-B9-DA-57-FB-FF-C6-F3-D9-23-C7-3F-C6-E9-DA-9D-C7-94-FB-CF-DD-B9-1D-54-01-00-35-8C-26-97-38-54-42-B7-26-31-4E-A2-05-55-4A-8F-E1-CA-3C-24-C8-3E-2E-44-C3-02-26-40-D5-FB-26-0F-F8-E7-2E-DC-1F-25-38-E2-3F-F3-3C-80-4F-92-3A-52-4D-B7-32-14-3F-93-2A-71-2E-EA-27-5A-24-B8-2D-FB-24-15-3A-50-2E-7D-46-C1-39-7F-4A-02-40-BF-3F-24-3D-5C-25-C9-32-20-01-5B-27-BE-DD-8F-22-C7-C6-F8-28-03-C4-EF-38-3B-D6-87-4A-ED-F6-D4-52-F2-1A-1D-49-10-37-9C-2B-6F-44-5B-01-ED-42-14-D8-86-38-C7-BE-01-2E-39-BF-8F-2A-65-D9-5B-30-D9-02-95-3B-BE-2A-58-44-B1-40-90-42-A7-3B-F6-31-CF-1D-75-14-BE-F3-C8-F1-1B-CF-90-D4-2F-BF-32-C6-77-CA-3D-CB-02-EC-E6-E1-A0-15-ED-02-FE-35-91-24-E1-3F-23-3E-88-2F-C7-4A-F0-0B-75-4A-A6-E3-15-41-A7-C6-6E-34-FA-BF-DA-29-C0-D1-B7-24-0C-F5-E3-25-64-1D-27-2C-0E-3E-12-35-EB-4E-BC-3D-D7-4E-54-43-F2-42-62-43-85-33-1D-3C-1E-28-E1-2C-B0-24-AC-16-BD-28-4B-FC-8E-30-EB-E1-95-37-0A-CC-B9-3A-24-BE-82-39-9B-B9-C4-35-88-BD-47-32-83-C7-2A-31-05-D5-DC-32-A6-E4-F0-35-8C-F6-C9-37-91-0B-92-35-AD-23-1A-2D-79-3C-5C-1D-D2-50-C2-06-1F-5A-49-EB-FD-52-91-CE-30-3A-AC-B5-64-14-67-A6-A6-EB-D1-A5-50-CC-52-B6-8C-C0-F6-D5-2B-CC-D1-FD-B0-EA-42-23-95-10-13-3B-79-2F-79-3D-9E-3B-7A-29-83-30-18-06-A3-12-63-E0-B3-ED-DC-C6-07-D0-CA-C3-FA-C4-DD-D8-A7-D0-19-FE-8C-EE-A9-24-74-13-C3-3C-D0-31-30-3C-A6-3E-BB-22-35-35-7B-FA-20-18-C3-D3-F9-EF-6B-BE-0A-C8-39-C3-B1-AA-68-E0-95-9E-AA-0A-65-A5-55-32-29-BC-3A-4A-A7-DC-39-4D-3E-FF-F2-3F-9E-1C-D9-2D-26-2F-37-23-BF-33-DA-26-4B-2A-9C-36-7D-15-4E-48-39-FA-CE-4E-6E-DE-D8-40-A3-C7-4C-1E-B0-B9-39-F1-F8-B5-1C-CA-92-BB-A9-B8-2F-C8-85-C4-44-D9-3F-E9-07-ED-A7-17-99-02-03-3C-66-19-94-46-1B-30-9B-32-EB-43-9C-08-AB-50-D4-DA-0B-52-4E-BD-76-45-08-BD-D0-2B-29-DA-20-0A-E6-07-AC-E8-15-32-88-D0-1F-46-96-C8-39-3B-FC-D2-4A-16-37-EC-B0-E7-0A-0C-FF-C3-20-28-DC-BA-55-37-20-D0-86-34-3D-FA-F9-1F-92-26-FC-FE-B8-41-0E-DA-05-40-52-BA-86-22-19-A7-5A-F6-3C-A4-C8-CE-88-B1-CA-BC-35-CB-C6-C7-17-EB-95-EA-51-0A-12-16-FA-22-CD-37-91-31-E2-41-CE-35-9D-30-9B-32-97-0B-07-2D-1C-E2-60-2A-A9-C4-0B-2E-65-BE-DC-37-2D-D1-C9-43-B8-F5-2A-4B-46-1F-6A-47-F7-40-1A-35-81-52-29-16-79-52-0D-F2-A9-45-9E-D3-27-34-20-C5-D1-25-0B-CC-86-1F-58-E6-2B-22-A6-0A-53-2B-5B-2B-E4-36-C5-3B-BB-40-1B-35-C1-45-67-19-34-44-F4-F2-83-3B-6E-D0-0C-2C-3B-BF-0F-17-52-C6-C0-FE-AD-E3-23-E6-69-0D-A3-D0-EC-35-48-C1-43-51-F8-B9-69-59-FE-BA-B9-4F-3E-C3-1C-3B-E6-D0-0C-24-56-E2-77-10-91-F6-78-01-07-0D-F4-F3-BD-24-A3-E3-66-3B-C9-CE-0F-4D-97-B8-E0-54-B2-A8-E8-4E-DF-A7-24-3A-50-BB-E4-19-ED-E0-B2-F5-96-0E-50-D7-4C-35-93-C7-09-47-2D-CB-E2-3C-B0-E0-9C-1A-BD-00-CE-ED-6E-20-C0-C8-04-35-DF-BA-88-37-1C-CA-03-27-25-F0-82-08-DD-1C-FF-E4-26-3D-2B-C6-18-43-3A-B3-1B-2C-ED-AE-1F-02-3D-B7-56-D7-A9-C6-50-BE-62-D6-E0-C1-90-E0-5F-E0-EE-E1-6A-0C-6F-DA-D0-32-F7-CC-F5-42-67-BE-0B-36-39-B4-EB-11-1C-B3-67-E6-AA-BD-4C-C6-80-D3-37-BF-FE-F0-D8-D3-D9-0F-FC-FA-A4-28-CA-23-DF-34-13-3D-06-31-8C-3C-E8-1D-E8-22-9F-00-2B-FB-0A-E1-C2-D5-42-C7-AD-C1-EA-B8-96-C6-5E-B7-2F-E2-94-BF-95-09-A0-CB-DC-2D-4B-D5-B2-41-95-D8-E4-3D-1A-D5-47-23-C2-CD-C0-F9-FE-C6-2D-CD-6D-C4-95-A9-0F-C7-D9-97-E9-CC-C4-9B-3C-D2-97-B3-A5-D3-DD-D8-12-D0-1A-02-71-C9-02-25-C5-C3-F5-38-F3-C2-44-39-6F-C8-B4-26-07-D2-A2-07-9C-DA-7E-E6-99-DC-AC-CE-10-D5-B2-C8-E8-C5-06-D7-E1-B5-DB-F4-2A-AE-87-17-52-B6-44-32-65-D0-F8-3A-0E-F7-00-2E-D7-1E-83-0F-55-3A-B4-E9-92-3F-A8-C8-81-2C-88-B5-5B-08-2D-B3-32-E1-98-BD-83-C6-57-CC-FE-C2-B6-D6-16-D8-C3-D7-4C-FD-66-D0-9D-23-A9-C6-97-3B-AA-C2-98-3B-B8-CA-AA-23-64-E0-5A-FD-C9-FF-B9-D7-41-21-4F-C1-93-3C-8E-C2-0C-4C-F1-DA-35-4E-DC-01-79-45-83-2A-3C-36-0A-49-7F-24-A1-56-42-12-0A-53-77-FF-3C-43-42-EB-23-2E-CA-D5-3E-19-6E-C1-A7-06-9B-B2-5E-F5-47-AE-43-E3-B4-B7-A9-CF-91-CE-E7-BC-5F-EE-14-B0-79-0F-EC-AE-70-29-EC-BC-B4-35-FA-D8-8C-31-DB-FC-BF-1E-D8-1E-B4-02-FD-34-90-E4-A8-38-0D-CB-10-29-CA-BA-AC-0B-7A-B5-6C-EA-E6-B9-67-D0-A6-C4-3E-C6-31-D1-72-CF-06-DB-96-E9-BD-DE-62-0D-E4-DA-3E-31-81-D0-3E-4C-0B-C3-9B-58-A1-B7-E0-54-B2-B3-AF-43-34-BB-50-2A-08-CF-B2-0E-2F-EC-B5-F5-43-0C-15-E2-26-27-60-D4-85-35-B3-CB-48-33-BF-C6-00-21-99-C4-CC-03-EE-C4-AC-E3-00-00-7E-5A"

        self.stop_navassa1 = "4C-00-00-00-00-00-17-00-00-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-C2-EB-0B-B8-88-00-00-FF-00-00-00-E8-03-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"

        self.stop_navassa2 = "4C-00-00-00-00-00-17-00-00-00-11-13-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-06-00-00-FD-43-14-30-75-00-00-FF-00-00-00-E8-03-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-7E-5A"

        self.flagNavassa = 0
        self.flagFrequency = 0
        self.flagClock = 0

        self.toStop = False

    def WriteRegister(self, Board_ID, Address, Value, Timeout):
        script_page.WriteRegister(Board_ID, Address, Value, Timeout)

    def ReadRegister(self, Board_ID, Address, Timeout):
        script_page.ReadRegister(Board_ID, Address, Timeout)

    def sendToRadio_tx(self, msg):
        time.sleep(0.1)
        try:
            if script_page.sock is None:
                script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()),
                                        ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                        port=int(gui.ex.lineEdit_Configuration_computer_port.text()))
            self.Tx_Sock_isActive = True
        except Exception as error:
            logger.write("Error sentToRadio: " + str('{err}'.format(err=error)), status=False)

        try:
            script_page.sock.send(bytearray.fromhex(msg.replace("-", "")))
        except Exception as error:
            logger.write("[sendToRadio_tx] error: " + str(error), status=False)

    def sendMessage(self, message: str):
        try:
            self.sendToRadio_tx(message)
            return script_page.sock.receive(buffer_size=1024)  # buffer size is 1024 bytes
        except Exception as error:
            logger.write("[sendMessage] error: " + str(error), status=False)

    def send_packets_start(self, antena: int, modulation: str, bandwidth: str, frequency: int, amplitude: int, _txAtt: int):
        print("enter send_packets_start")
        self.configFrequency(antena, frequency, amplitude)
        print((str(self.sendMessage(self.massage11))) + "\n")
        time.sleep(0.5)

        print("start modulation")
        msg = ""
        if antena == 1:
            if modulation == "QAM4":
                if bandwidth == "1M":
                    msg = self.massageQAM4_1M_navassa1
                if bandwidth == "2M":
                    msg = self.massageQAM4_2M_navassa1
                if bandwidth == "4M":
                    msg = self.massageQAM4_4M_navassa1
                if bandwidth == "8M":
                    msg = self.massageQAM4_8M_navassa1

            else:  # modulation == "CW"
                msg = self.massageCW_navassa1

        elif antena == 2:
            if modulation == "QAM4":
                if bandwidth == "1M":
                    msg = self.massageQAM4_1M
                if bandwidth == "2M":
                    msg = self.massageQAM4_2M
                if bandwidth == "4M":
                    msg = self.massageQAM4_4M
                if bandwidth == "8M":
                    msg = self.massageQAM4_8M

            else:  # modulation == "CW"
                msg = self.massageCW

        print((str(self.sendMessage(msg))) + "\n")

        self.configMsg_massage12(antena)
        print("msgM12= " + str(self.massage12))
        print((str(self.sendMessage(self.massage12))) + "\n")
        time.sleep(0.5)

        logger.write(str(modulation) + "_" + str(bandwidth) + "_" + str(frequency) + "_" + str(amplitude) + " - packet start send")
        time.sleep(2)

    def send_packets_stop(self, antena: str, modulation: str, bandwidth: str, frequency: int, amplitude: int):
        try:
            logger.write("Enter to def send_packets_stop")
            msg = ""
            if antena == "1":
                msg = self.stop_navassa1
            else:
                msg = self.stop_navassa2

            print((str(self.sendMessage(msg))) + "\n")

            logger.write(str(antena) + "_" + str(modulation) + "_" + str(bandwidth) + "_" + str(frequency) + "_" + str(amplitude) + " - packet stop send")
            time.sleep(2)
        except Exception as error:
            logger.write("[send_packets_stop] error: " + str(error), status=False)

    def copy_picture_from_spectrum(self, name_of_pic, rec=False):
        try:
            logger.write("[copy_picture_from_spectrum] name_of_pic = " + str(name_of_pic) + ", rec = " + str(rec))
            time.sleep(1)

            path = "\\\\" + str(gui.ex.lineEdit_Configuration_spectrum_ip.text()) + "\\d\\Users\\" + str(gui.ex.lineEdit_Configuration_spectrum_username.text()) + "\\Documents\\SA"
            try:
                os.listdir(path)
            except Exception as error:
                logger.write("[copy_picture_from_spectrum] except error: " + str(error))

                path = "\\\\" + str(gui.ex.lineEdit_Configuration_spectrum_ip.text()) + "\\d$\\Users\\" + str(gui.ex.lineEdit_Configuration_spectrum_username.text()) + "\\Documents\\SA"
                try:
                    os.listdir(path)
                except Exception as error:
                    logger.write("[copy_picture_from_spectrum] except return False error: " + str(error))

                    for i in ["d", "d$"]:
                        try:
                            cmd_command = "net use \\\\" + str(gui.ex.lineEdit_Configuration_spectrum_ip.text()) + "\\" + str(i) + " /user:" + str(gui.ex.lineEdit_configurations_spectrum_username.text()) + " Keysight4u!"
                            resp = action.popen(cmd=cmd_command)
                            logger.write("[copy_picture_from_spectrum] [cmd_command = " + str(cmd_command) + "] resp = " + str(resp))
                        except Exception as error:
                            logger.write("[copy_picture_from_spectrum] [cmd_command = " + str(cmd_command) + "] error = " + str(error))

                    return self.copy_picture_from_spectrum(name_of_pic, rec=True) if rec == False else False

            source = str(path) + "\\screen\\" + str(name_of_pic) + ".png"
            destination = str(runningView.path_result_folder) + "Spectrum Images/" + str(name_of_pic) + ".png"
            shutil.copyfile(source, destination)

            return destination

        except Exception as error:
            logger.write("[copy_picture_from_spectrum] [except] error: " + str(error))
            return False

    def update_details_table(self, index_test, params):
        try:
            gui.ex.tableWidget_Details_titles.setRowCount(1)
            gui.ex.tableWidget_Details.setRowCount(1)

            action.set_vertical_header_item(obj="tableWidget_Details_titles", text="Test " + str(index_test + 1), index=0, curr_params=params, icon="forbidden.png", show_toolTip=False)

            curr_test = params if runningView.is_load_old_result else runningView.json_results[index_test]

            runningView.table_details_table_set_cell(text=str(curr_test["Type"]), row=0, col=0, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Antena"]), row=0, col=1, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Modulation"]), row=0, col=2, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Bandwidth"]), row=0, col=3, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Frequency"]), row=0, col=4, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Tx_Power"]), row=0, col=5, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Tx Attenuation (RF)"]), row=0, col=6, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Tx Attenuation (Navassa)"]), row=0, col=7, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["Resource ID"]), row=0, col=8, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)
            runningView.table_details_table_set_cell(text=str(curr_test["RF PATH"]), row=0, col=9, enabled=False, color_background=(211, 225, 231) if runningView.is_load_old_result else None)

            action.set_vertical_header_item(obj="tableWidget_Details", text="Results", index=0, curr_params=params, icon="-).png", show_toolTip=False)

            if curr_test["Type"] == "Tx Power":
                gui.ex.tableWidget_Details.setColumnCount(5)
                gui.ex.tableWidget_Details.setHorizontalHeaderLabels(["Voltage", "Current", "Peak", "PeakToAvg", "AveragePower"])
                WriteStream.write(["tableWidget_Details.horizontalHeader()", 5])

                runningView.table_details_set_cell(text=str(curr_test["Voltage"]), row=0, col=0, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Current"]), row=0, col=1, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Peak"]), row=0, col=2, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["PeakToAvg"]), row=0, col=3, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["AveragePower"]), row=0, col=4, enabled=False)

            elif curr_test["Type"] == "ACPR":
                gui.ex.tableWidget_Details.setColumnCount(9)
                gui.ex.tableWidget_Details.setHorizontalHeaderLabels(["Voltage", "Current", "Power", "Lower_C_dBc", "Lower_B_dBc", "Lower_A_dBc", "Upper_A_dBc", "Upper_B_dBc", "Upper_C_dBc"])
                WriteStream.write(["tableWidget_Details.horizontalHeader()", 9])
                runningView.table_details_set_cell(text=str(curr_test["Voltage"]), row=0, col=0, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Current"]), row=0, col=1, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Power"]), row=0, col=2, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Lower C"]), row=0, col=3, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Lower B"]), row=0, col=4, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Lower A"]), row=0, col=5, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Upper A"]), row=0, col=6, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Upper B"]), row=0, col=7, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Upper C"]), row=0, col=8, enabled=False)

            elif curr_test["Type"] == "Harmonics":
                gui.ex.tableWidget_Details.setColumnCount(12)
                gui.ex.tableWidget_Details.setHorizontalHeaderLabels(["Voltage", "Current", "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9", "H10"])
                WriteStream.write(["tableWidget_Details.horizontalHeader()", 12])
                runningView.table_details_set_cell(text=str(curr_test["Voltage"]), row=0, col=0, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Current"]), row=0, col=1, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["H1"]), row=0, col=2, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["H2"]), row=0, col=3, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["H3"]), row=0, col=4, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["H4"]), row=0, col=5, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["H5"]), row=0, col=6, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["H6"]), row=0, col=7, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["H7"]), row=0, col=8, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["H8"]), row=0, col=9, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["H9"]), row=0, col=10, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["H10"]), row=0, col=11, enabled=False)

            elif curr_test["Type"] == "Spurious":
                gui.ex.tableWidget_Details.setColumnCount(3)
                gui.ex.tableWidget_Details.setHorizontalHeaderLabels(["Voltage", "Current", "Spurious"])
                WriteStream.write(["tableWidget_Details.horizontalHeader()", 3])
                runningView.table_details_set_cell(text=str(curr_test["Voltage"]), row=0, col=0, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Current"]), row=0, col=1, enabled=False)
                if len(curr_test["Results"]["Spurious"]) > 7:
                    runningView.table_details_set_cell(text=str(curr_test["Results"]["Spurious"]), row=0, col=2, enabled=False, tooltip=True)
                else:
                    runningView.table_details_set_cell(text=str(curr_test["Results"]["Spurious"]), row=0, col=2, enabled=False)

            elif curr_test["Type"] == "Frequency Accuracy":
                gui.ex.tableWidget_Details.setColumnCount(4)
                gui.ex.tableWidget_Details.setHorizontalHeaderLabels(["Voltage", "Current", "Frequency", "Amplitude"])
                WriteStream.write(["tableWidget_Details.horizontalHeader()", 4])
                runningView.table_details_set_cell(text=str(curr_test["Voltage"]), row=0, col=0, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Current"]), row=0, col=1, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Frequency"]), row=0, col=2, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Amplitude"]), row=0, col=3, enabled=False)

            elif curr_test["Type"] == "Attenuator":
                gui.ex.tableWidget_Details.setColumnCount(9)
                gui.ex.tableWidget_Details.setHorizontalHeaderLabels(["Voltage", "Current", "Param 1", "Param 2", "Param 3", "Param 4", "Param 5", "Param 6", "Param 7"])
                WriteStream.write(["tableWidget_Details.horizontalHeader()", 9])
                runningView.table_details_set_cell(text=str(curr_test["Voltage"]), row=0, col=0, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Current"]), row=0, col=1, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Param 1"]), row=0, col=2, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Param 2"]), row=0, col=3, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Param 3"]), row=0, col=4, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Param 4"]), row=0, col=5, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Param 5"]), row=0, col=6, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Param 6"]), row=0, col=7, enabled=False)
                runningView.table_details_set_cell(text=str(curr_test["Results"]["Param 7"]), row=0, col=8, enabled=False)

            try:
                gui.ex.label_spectral_pic.setPixmap(QtGui.QPixmap(curr_test["Results"]["Picture"]))
                WriteStream.write(["label_spectral_pic.setHidden", False])
            except Exception as error:
                logger.write("Error setPixmap on gui: " + str(error), status=False)

        except Exception as error:
            logger.write("[update_details_table Automation TX] error: " + str('{err}'.format(err=error)), status=False)

    def txPower(self, curr_params, index_test, general_results):
        try:
            self.send_packets_start(antena=curr_params["Antena"], modulation=curr_params["Modulation"], bandwidth=curr_params["Bandwidth"], frequency=curr_params["Frequency"],
                                    amplitude=curr_params["Tx Attenuation (Navassa)"], _txAtt=curr_params["Tx Attenuation (RF)"])

            logger.write("start Spectrum command:")

            name_of_pic = "TxPower[Antena" + curr_params["Antena"] + "_modulation_" + curr_params["Modulation"] + "_bandwidth_" + curr_params["Bandwidth"] + \
                          "_freq_" + curr_params["Frequency"].replace(".", "") + "MHz" + "_txPower_" + curr_params["Tx_Power"] + "_amplitude_" + curr_params["Tx Attenuation (Navassa)"] + "]"

            if self.keysight_connect:
                logger.write("keysight_connect so enter pStatistic")
                pStatistic = Keysight.Tx_power(self.spectrumIP, self.recallTxPowerNB, general_results["Offset"], int(float(curr_params["Frequency"]) * 1000000), nameOfCheck=name_of_pic)

                try:
                    path_picture_to_show = self.copy_picture_from_spectrum(name_of_pic=name_of_pic)
                except Exception as error:
                    logger.write("Error copy_picture_from_spectrum: " + str('{err}'.format(err=error)), status=False)

            Peak = math.floor((pStatistic[0] + pStatistic[8]) * 100) / 100
            PeakToAvg = math.floor(pStatistic[8] * 100) / 100
            AveragePower = math.floor(pStatistic[0] * 100) / 100

            results = {"Peak": Peak, "PeakToAvg": PeakToAvg, "AveragePower": AveragePower, "Picture": path_picture_to_show}

            self.send_packets_stop(curr_params["Antena"], curr_params["Modulation"], curr_params["Bandwidth"], curr_params["Frequency"], curr_params["Tx Attenuation (Navassa)"])

            runningView.json_results[index_test] = {**curr_params, "Voltage": general_results["Voltage"], "Current": general_results["Current"], "Results": results}

            runningView.table_result_set_cell(text=str(curr_params["Frequency"].replace(" ", "")), row=index_test, col=0, enabled=False)
            runningView.table_result_set_cell(text=str(Peak), row=index_test, col=1, enabled=False)
            runningView.table_result_set_cell(text=str(general_results["Voltage"]), row=index_test, col=2, enabled=False)
            runningView.table_result_set_cell(text=str(general_results["Current"]), row=index_test, col=3, enabled=False)
            runningView.table_result_set_cell(text="Click For Results", row=index_test, col=4, enabled=False)
            return True

        except Exception as error:
            logger.write("[Tx Power] Error: " + str('{err}'.format(err=error)), status=False)
            return False

    def ACPR(self, curr_params, index_test, general_results):
        try:

            self.send_packets_start(antena=curr_params["Antena"], modulation=curr_params["Modulation"], bandwidth=curr_params["Bandwidth"], frequency=curr_params["Frequency"],
                                    amplitude=curr_params["Tx Attenuation (Navassa)"], _txAtt=curr_params["Tx Attenuation (RF)"])
            recall = 6
            ref_level = 24

            if curr_params["Bandwidth"] == "1M":
                recall = self.recallAcpr_QAM4_1M
            elif curr_params["Bandwidth"] == "2M":
                recall = self.recallAcpr_QAM4_2M
            elif curr_params["Bandwidth"] == "4M":
                recall = self.recallAcpr_QAM4_4M
            else:
                recall = self.recallAcpr_QAM4_8M

            logger.write("start Spectrum command:")

            name_of_pic = "ACPR[Antena" + curr_params["Antena"] + "_modulation_" + curr_params["Modulation"] + "_bandwidth_" + curr_params["Bandwidth"] + \
                          "_freq_" + curr_params["Frequency"].replace(".", "") + "MHz" + "_txPower_" + curr_params["Tx_Power"] + "_amplitude_" + curr_params["Tx Attenuation (Navassa)"] + "]"

            if self.keysight_connect:
                logger.write("keysight_connect so enter Acpr")
                arrResults = Keysight.ACPR(self.spectrumIP, recall, general_results["Offset"], int(float(curr_params["Frequency"]) * 1000000), ref_level, nameOfCheck=name_of_pic)
                acp = arrResults[0]
                power = math.floor(acp[3] * 100) / 100

                try:
                    path_picture_to_show = self.copy_picture_from_spectrum(name_of_pic=name_of_pic)
                except Exception as error:
                    logger.write("Error copy_picture_from_spectrum: " + str('{err}'.format(err=error)), status=False)

            Lower_A_dBc = math.floor(acp[4] * 100) / 100
            Lower_B_dBc = math.floor(acp[8] * 100) / 100
            Upper_A_dBc = math.floor(acp[6] * 100) / 100
            Upper_B_dBc = math.floor(acp[10] * 100) / 100
            Lower_C_dBc = math.floor(acp[12] * 100) / 100
            Upper_C_dBc = math.floor(acp[14] * 100) / 100
            Lower_D_dBc = acp[16]
            Upper_D_dBc = acp[18]

            results = {"Power": power, "Lower A": Lower_A_dBc, "Lower B": Lower_B_dBc, "Lower C": Lower_C_dBc,
                       "Upper A": Upper_A_dBc, "Upper B": Upper_B_dBc, "Upper C": Upper_C_dBc, "Picture": path_picture_to_show}

            self.send_packets_stop(curr_params["Antena"], curr_params["Modulation"], curr_params["Bandwidth"], curr_params["Frequency"], curr_params["Tx Attenuation (Navassa)"])

            runningView.json_results[index_test] = {**curr_params, "Voltage": general_results["Voltage"], "Current": general_results["Current"], "Results": results}

            runningView.table_result_set_cell(text=str(curr_params["Frequency"].replace(" ", "")), row=index_test, col=0, enabled=False)
            runningView.table_result_set_cell(text=str(power), row=index_test, col=1, enabled=False)
            runningView.table_result_set_cell(text=str(general_results["Voltage"]), row=index_test, col=2, enabled=False)
            runningView.table_result_set_cell(text=str(general_results["Current"]), row=index_test, col=3, enabled=False)
            runningView.table_result_set_cell(text="Click For Results", row=index_test, col=4, enabled=False)

            return True

        except Exception as error:
            logger.write("[ACPR] Error: " + str('{err}'.format(err=error)), status=False)
            return False

    def Harmonics(self, curr_params, index_test, general_results):
        try:
            self.send_packets_start(antena=curr_params["Antena"], modulation=curr_params["Modulation"], bandwidth=curr_params["Bandwidth"], frequency=curr_params["Frequency"],
                                    amplitude=curr_params["Tx Attenuation (Navassa)"], _txAtt=curr_params["Tx Attenuation (RF)"])

            logger.write("start Spectrum command:")

            name_of_pic = "Harmonics[Antena" + curr_params["Antena"] + "_modulation_" + curr_params["Modulation"] + "_bandwidth_" + curr_params["Bandwidth"] + \
                          "_freq_" + curr_params["Frequency"].replace(".", "") + "MHz" + "_txPower_" + curr_params["Tx_Power"] + "_amplitude_" + curr_params["Tx Attenuation (Navassa)"] + "]"

            if self.keysight_connect:
                logger.write("keysight_connect so enter pStatistic")
                harmonics = Keysight.Harmonic(self.spectrumIP, general_results["Offset"], int(float(curr_params["Frequency"]) * 1000000), curr_params["Bandwidth"], nameOfCheck=name_of_pic)  # get arr of results

                try:
                    path_picture_to_show = self.copy_picture_from_spectrum(name_of_pic=name_of_pic)
                except Exception as error:
                    logger.write("Error copy_picture_from_spectrum: " + str('{err}'.format(err=error)), status=False)

            results = {"H1": math.floor(harmonics[0] * 100) / 100, "H2": math.floor(harmonics[1] * 100) / 100, "H3": math.floor(harmonics[2] * 100) / 100,
                       "H4": math.floor(harmonics[3] * 100) / 100, "H5": math.floor(harmonics[4] * 100) / 100, "H6": math.floor(harmonics[5] * 100) / 100,
                       "H7": math.floor(harmonics[6] * 100) / 100, "H8": math.floor(harmonics[7] * 100) / 100, "H9": math.floor(harmonics[8] * 100) / 100,
                       "H10": math.floor(harmonics[9] * 100) / 100, "Picture": path_picture_to_show}

            self.send_packets_stop(curr_params["Antena"], curr_params["Modulation"], curr_params["Bandwidth"], curr_params["Frequency"], curr_params["Tx Attenuation (Navassa)"])

            runningView.json_results[index_test] = {**curr_params, "Voltage": general_results["Voltage"], "Current": general_results["Current"], "Results": results}

            runningView.table_result_set_cell(text=str(curr_params["Frequency"].replace(" ", "")), row=index_test, col=0, enabled=False)
            runningView.table_result_set_cell(text=str(math.floor(harmonics[0] * 100) / 100), row=index_test, col=1, enabled=False)
            runningView.table_result_set_cell(text=str(general_results["Voltage"]), row=index_test, col=2, enabled=False)
            runningView.table_result_set_cell(text=str(general_results["Current"]), row=index_test, col=3, enabled=False)
            runningView.table_result_set_cell(text="Click For Results", row=index_test, col=4, enabled=False)
            return True

        except Exception as error:
            logger.write("[Harmonics] Error: " + str('{err}'.format(err=error)), status=False)
            return False

    def Spurious(self, curr_params, index_test, general_results):
        try:

            self.send_packets_start(antena=curr_params["Antena"], modulation=curr_params["Modulation"], bandwidth=curr_params["Bandwidth"], frequency=curr_params["Frequency"],
                                    amplitude=curr_params["Tx Attenuation (Navassa)"], _txAtt=curr_params["Tx Attenuation (RF)"])

            logger.write("start Spectrum command:")

            name_of_pic = "Spurious[Antena" + curr_params["Antena"] + "_modulation_" + curr_params["Modulation"] + "_bandwidth_" + curr_params["Bandwidth"] + \
                          "_freq_" + curr_params["Frequency"].replace(".", "") + "MHz" + "_txPower_" + curr_params["Tx_Power"] + "_amplitude_" + curr_params["Tx Attenuation (Navassa)"] + "]"

            if self.keysight_connect:
                logger.write("keysight_connect so enter Spurious")
                spurious = Keysight.Spurious(self.spectrumIP, general_results["Offset"], int(float(curr_params["Frequency"]) * 1000000), nameOfCheck=name_of_pic)

                try:
                    path_picture_to_show = self.copy_picture_from_spectrum(name_of_pic=name_of_pic)
                except Exception as error:
                    logger.write("Error copy_picture_from_spectrum: " + str('{err}'.format(err=error)), status=False)

                print("spurious= " + str(spurious))

                if spurious[0] == 1.0:  # display only center frequency so test is pass
                    sq = "PASS"
                else:
                    sq = str(spurious[0])

            results = {"Spurious": spurious[1:], "Picture": path_picture_to_show}

            self.send_packets_stop(curr_params["Antena"], curr_params["Modulation"], curr_params["Bandwidth"], curr_params["Frequency"], curr_params["Tx Attenuation (Navassa)"])

            runningView.json_results[index_test] = {**curr_params, "Voltage": general_results["Voltage"], "Current": general_results["Current"], "Results": results}

            runningView.table_result_set_cell(text=str(curr_params["Frequency"].replace(" ", "")), row=index_test, col=0, enabled=False)
            runningView.table_result_set_cell(text=str(math.floor(spurious[1] * 100) / 100), row=index_test, col=1, enabled=False)
            runningView.table_result_set_cell(text=str(general_results["Voltage"]), row=index_test, col=2, enabled=False)
            runningView.table_result_set_cell(text=str(general_results["Current"]), row=index_test, col=3, enabled=False)
            runningView.table_result_set_cell(text="Click For Results", row=index_test, col=4, enabled=False)
            return True

        except Exception as error:
            logger.write("[Spurious] Error: " + str('{err}'.format(err=error)), status=False)
            return False

    def FrequencyAccuracy(self, curr_params, index_test, general_results):
        try:

            self.send_packets_start(antena=curr_params["Antena"], modulation=curr_params["Modulation"], bandwidth=curr_params["Bandwidth"], frequency=curr_params["Frequency"],
                                    amplitude=curr_params["Tx Attenuation (Navassa)"], _txAtt=curr_params["Tx Attenuation (RF)"])

            logger.write("start Spectrum command:")

            name_of_pic = "FrequencyAccuracy[Antena" + curr_params["Antena"] + "_modulation_" + curr_params["Modulation"] + "_bandwidth_" + curr_params["Bandwidth"] + \
                          "_freq_" + curr_params["Frequency"].replace(".", "") + "MHz" + "_txPower_" + curr_params["Tx_Power"] + "_amplitude_" + curr_params["Tx Attenuation (Navassa)"] + "]"

            if self.keysight_connect:
                logger.write("keysight_connect so enter FrequencyAccuracy")

                FrequencyAccuracy = Keysight.FrequencyAccuracy(self.spectrumIP, general_results["Offset"], int(float(curr_params["Frequency"]) * 1000000), nameOfCheck=name_of_pic)

                try:
                    path_picture_to_show = self.copy_picture_from_spectrum(name_of_pic=name_of_pic)
                except Exception as error:
                    logger.write("Error copy_picture_from_spectrum: " + str('{err}'.format(err=error)), status=False)

                print("FrequencyAccuracy= " + str(FrequencyAccuracy))

            results = {"Frequency": math.floor(FrequencyAccuracy[0] * 100) / 100,
                       "Amplitude": math.floor(FrequencyAccuracy[1] * 100) / 100, "Picture": path_picture_to_show}

            self.send_packets_stop(curr_params["Antena"], curr_params["Modulation"], curr_params["Bandwidth"], curr_params["Frequency"], curr_params["Tx Attenuation (Navassa)"])

            runningView.json_results[index_test] = {**curr_params, "Voltage": general_results["Voltage"], "Current": general_results["Current"], "Results": results}

            runningView.table_result_set_cell(text=str(curr_params["Frequency"].replace(" ", "")), row=index_test, col=0, enabled=False)
            runningView.table_result_set_cell(text=str(math.floor(FrequencyAccuracy[1] * 100) / 100), row=index_test, col=1, enabled=False)
            runningView.table_result_set_cell(text=str(general_results["Voltage"]), row=index_test, col=2, enabled=False)
            runningView.table_result_set_cell(text=str(general_results["Current"]), row=index_test, col=3, enabled=False)
            runningView.table_result_set_cell(text="Click For Results", row=index_test, col=4, enabled=False)
            return True

        except Exception as error:
            logger.write("[FrequencyAccuracy] Error: " + str('{err}'.format(err=error)), status=False)
            return False

    def Attenuator(self, curr_params, index_test, general_results):
        try:
            self.send_packets_start(antena=curr_params["Antena"], modulation=curr_params["Modulation"], bandwidth=curr_params["Bandwidth"], frequency=curr_params["Frequency"],
                                    amplitude=curr_params["Tx Attenuation (Navassa)"], _txAtt=curr_params["Tx Attenuation (RF)"])

            logger.write("start Spectrum command:")

            name_of_pic = "Attenuator[Antena" + curr_params["Antena"] + "_modulation_" + curr_params["Modulation"] + "_bandwidth_" + curr_params["Bandwidth"] + \
                          "_freq_" + curr_params["Frequency"].replace(".", "") + "MHz" + "_txPower_" + curr_params["Tx_Power"] + "_attenuator_" + curr_params["Tx Attenuation (Navassa)"] + "]"

            if self.keysight_connect:
                logger.write("keysight_connect so enter Spurious")

                Attenuator = Keysight.Attenuator(self.spectrumIP, general_results["Offset"], curr_params["Antena"], curr_params["Modulation"],
                                                 curr_params["Bandwidth"], int(float(curr_params["Frequency"]) * 1000000), curr_params["Tx Attenuation (Navassa)"])
                try:
                    path_picture_to_show = self.copy_picture_from_spectrum(name_of_pic=name_of_pic)
                except Exception as error:
                    logger.write("Error copy_picture_from_spectrum: " + str('{err}'.format(err=error)), status=False)

                print("Attenuator= " + str(Attenuator))

            results = {"Param 1": math.floor(Attenuator[0] * 100) / 100, "Param 2": math.floor(Attenuator[1] * 100) / 100, "Param 3": math.floor(Attenuator[2] * 100) / 100, "Param 4": math.floor(Attenuator[3] * 100) / 100,
                       "Param 5": math.floor(Attenuator[4] * 100) / 100, "Param 6": math.floor(Attenuator[5] * 100) / 100, "Param 7": math.floor(Attenuator[6] * 100) / 100, "Picture": path_picture_to_show}

            self.send_packets_stop(curr_params["Antena"], curr_params["Modulation"], curr_params["Bandwidth"], curr_params["Frequency"], curr_params["Tx Attenuation (Navassa)"])

            runningView.json_results[index_test] = {**curr_params, "Voltage": general_results["Voltage"], "Current": general_results["Current"], "Results": results}

            runningView.table_result_set_cell(text=str(curr_params["Frequency"].replace(" ", "")), row=index_test, col=0, enabled=False)
            runningView.table_result_set_cell(text=str(math.floor(Attenuator[0] * 100) / 100), row=index_test, col=1, enabled=False)
            runningView.table_result_set_cell(text=str(general_results["Voltage"]), row=index_test, col=2, enabled=False)
            runningView.table_result_set_cell(text=str(general_results["Current"]), row=index_test, col=3, enabled=False)
            runningView.table_result_set_cell(text="Click For Results", row=index_test, col=4, enabled=False)
            return True

        except Exception as error:
            logger.write("[Attenuator] Error: " + str('{err}'.format(err=error)), status=False)
            return False

    def resetSPECTRUM(self):
        rm = pyvisa.ResourceManager()
        N9010B = rm.open_resource('TCPIP0::' + self.spectrumIP + '::hislip0::INSTR')

        N9010B.write(':SYSTem:PRESet')
        N9010B.close()
        rm.close()
        logger.write("Reset to spectrum")

    def configFrequency(self, navassa: int, frequency: int, amplitude: int):
        freq = str(hex(int(float(frequency) * 1000000))).replace("0x", "").zfill(8)
        freq = freq[6:8] + "-" + freq[4:6] + "-" + freq[2:4] + "-" + freq[0:2]
        freq = freq.upper()

        amp = str(hex(int(amplitude))).replace("0x", "").zfill(4)

        if int(navassa) == 1:
            self.massage11 = self.massage11[:85] + "0-" + self.massage11[87:]
        if int(navassa) == 2:
            self.massage11 = self.massage11[:85] + "6-" + self.massage11[87:]

        self.massage11 = self.massage11[:90] + str(freq) + "-" + amp[2:] + "-" + amp[:2] + self.massage11[107:]
        logger.write("configFrequency= " + (str(self.massage11)))

    def configMsg_massage12(self, antena: int):
        if antena == 1:
            self.massage12 = self.massage12[:102] + "14-" + self.massage12[105:]
        elif antena == 2:
            self.massage12 = self.massage12[:102] + "88-" + self.massage12[105:]

    def configFrequencyForMsg56(self, massage56: str, _txAtt: str):
        if len(_txAtt) == 2:
            massage56 = massage56[:102] + str(_txAtt) + massage56[104:]
        elif len(_txAtt) == 1:
            massage56 = massage56[:102] + "0" + str(_txAtt) + massage56[104:]

        logger.write("massage56= " + (str(massage56)))
        return massage56

    def old_msg_navassa(self, Resource_ID, Tx_attenuation, rxGainIndex, carriar_freq):
        try:
            if script_page.sock is None:
                script_page.sock = Sock(ip_computer=str(gui.ex.lineEdit_Configuration_computer_ip.text()),
                                        ip_device=str(gui.ex.lineEdit_Configuration_device_ip.text()),
                                        port=int(gui.ex.lineEdit_Configuration_computer_port.text()))
        except Exception as error:
            logger.write("Error Opertion: " + str('{err}'.format(err=error)), status=False)

        try:
            navassa_operation_old_icd = json.load(open("Files\\Messages\\navassa_operation_old.json", "r"))

            if Resource_ID == "Navassa 1 Tx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0000"
            elif Resource_ID == "Navassa 1 Rx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0001"
            elif Resource_ID == "Navassa 1 Tx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0002"
            elif Resource_ID == "Navassa 1 Rx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0003"
            elif Resource_ID == "Navassa 2 Tx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0004"
            elif Resource_ID == "Navassa 2 Rx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0005"
            elif Resource_ID == "Navassa 2 Tx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0006"
            elif Resource_ID == "Navassa 2 Rx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0007"
            elif Resource_ID == "Navassa 3 Tx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0008"
            elif Resource_ID == "Navassa 3 Rx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "0009"
            elif Resource_ID == "Navassa 3 Tx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000A"
            elif Resource_ID == "Navassa 3 Rx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000B"
            elif Resource_ID == "Navassa 4 Tx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000C"
            elif Resource_ID == "Navassa 4 Rx 1":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000D"
            elif Resource_ID == "Navassa 4 Tx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000E"
            elif Resource_ID == "Navassa 4 Rx 2":
                navassa_operation_old_icd["payload"]["Navassa_Tranciver_number"] = "000F"

            # TX attenuation
            Tx_attenuation = hex(int(Tx_attenuation) * 1000).zfill(4)[2:]
            navassa_operation_old_icd["payload"]["Tx_Attenuation"] = str(Tx_attenuation)

            # Rx Gain Index
            rx = hex(int(rxGainIndex))[2:]
            rx_gain = rx.zfill(4)
            navassa_operation_old_icd["payload"]["Rx_Gain_Index"] = str(rx_gain)

            navassa_operation_old_icd["payload"]["Operation"] = "0001"

            # carriar frequency
            carriar_freq = hex(int(float(carriar_freq) * 1000000)).zfill(8)[2:]
            print(carriar_freq)
            navassa_operation_old_icd["payload"]["Carrier_Freq_Lsb"] = str(carriar_freq[4:8])
            navassa_operation_old_icd["payload"]["Carrier_Freq_Msb"] = str(carriar_freq[:4])

            # radio channel control
            navassa_operation_old_icd["payload"]["Radio_Channel_Control_Interface"] = "0000"

            # Rx NCO Enable
            navassa_operation_old_icd["payload"]["Rx_NCO_Enable"] = "0000"

            # Rx NCO Freq
            rx_nco_freq = hex(int(gui.ex.lineEdit_Home_Navassa_Config_Navassa_Operation_rx_nco_freq_old_icd.text()))[2:]
            rx_freq = str(rx_nco_freq.zfill(8))
            navassa_operation_old_icd["payload"]["Rx_NCO_Frequency_Lsb"] = rx_freq[4:8]
            navassa_operation_old_icd["payload"]["Rx_NCO_Frequency_Msb"] = rx_freq[:4]

            # BBDC Rejection - 0000

            # operation

            operation = gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_operation_old_icd.currentText()
            if operation == "Disable":
                navassa_operation_old_icd["payload"]["Operation"] = "0000"
            elif operation == "Enable":
                navassa_operation_old_icd["payload"]["Operation"] = "0001"

            Freq_change_mode = gui.ex.comboBox_Home_Navassa_Config_Navassa_Operation_freq_mode_old_icd.currentText()
            if Freq_change_mode == "Non Hopping":
                navassa_operation_old_icd["payload"]["Frequency_Change_Mode"] = "0000"
            elif Freq_change_mode == " Hopping":
                navassa_operation_old_icd["payload"]["Frequency_Change_Mode"] = "0001"

            print(navassa_operation_old_icd)

            packet = Packet(packet=navassa_operation_old_icd)
            script_page.sock.send(packet=packet.packetBuilded)
            recive_packet = script_page.sock.receive()
            WriteStream.write(["pushButton_Navassa_Config_Navassa_Operation_send_navassa_old_icd.setChecked", False])
            time.sleep(int(0.1))

        except Exception as error:
            logger.write("Error  " + str('{err}'.format(err=error)), status=False)

    def run(self, index_test):
        try:
            curr_params = runningView.get_test_params(row=index_test)
            runningView.json_results[index_test] = {**curr_params, "Results": {}}

            self.Computer_IP = str(gui.ex.lineEdit_Configuration_computer_ip.text())
            self.Device_IP = str(gui.ex.lineEdit_Configuration_device_ip.text())
            self.Port = int(gui.ex.lineEdit_Configuration_computer_port.text())
            self.spectrumIP = str(gui.ex.lineEdit_Configuration_spectrum_ip.text())
            # self.PS_IP = str(gui.ex.lineEdit_Configuration_power_supply_ip.text())
            # self.PS_PORT = int(gui.ex.lineEdit_Configuration_power_supply_port.text())

            try:
                if Keysight.check_connection(self.spectrumIP):
                    self.keysight_connect = True
                    logger.write("keysight_connect")
            except:
                logger.write("please install niVisa-> J:/Manpack SDR/Netanel/Apps installation/NIVISA1850full")
            # try:
            #     self.ps = PS(IP=self.PS_IP, Port=self.PS_PORT)
            #     self.ps.connect()
            #     self.ps_connect = True if self.ps.connect() else False
            #
            # except Exception as error:
            #     logger.write("[run]ps not connect" + str(error), status=False)

            self.old_msg_navassa(curr_params["Resource ID"], curr_params["Tx Attenuation (Navassa)"], "255", curr_params["Frequency"])

            # script for WBN
            try:
                exec(compile(open("Files\\Automation\\RF_PATH_TX/" + str(curr_params["RF PATH"]), "rb").read(), "RF_PATH_TX/" + str(curr_params["RF PATH"]), 'exec'))
            except Exception as error:
                logger.write("Error RF_PATH: " + str('{err}'.format(err=error)), status=False)

            current = ""
            voltage = ""
            if runningView.ps_connect:
                runningView.ps.sock.send("I2O?;".encode())
                respond = runningView.ps.sock.recv(1024)
                current = str(respond.decode()).replace("\r", "").replace("\n", "")

                runningView.ps.sock.send("V2O?;".encode())
                respond = runningView.ps.sock.recv(1024)
                voltage = str(respond.decode()).replace("\r", "").replace("\n", "")

            offset = runningView.getAmplitudeFromJSON(float(curr_params["Frequency"]), curr_params["Antena"])
            general_results = {"Voltage": voltage, "Current": current, "Offset": offset}

            if curr_params["Type"] == 'Harmonics':
                return self.Harmonics(curr_params, index_test, general_results)

            elif curr_params["Type"] == 'Tx Power':
                return self.txPower(curr_params, index_test, general_results)

            elif curr_params["Type"] == 'ACPR':
                return self.ACPR(curr_params, index_test, general_results)

            elif curr_params["Type"] == 'Spurious':
                return self.Spurious(curr_params, index_test, general_results)

            elif curr_params["Type"] == 'Frequency Accuracy':
                return self.FrequencyAccuracy(curr_params, index_test, general_results)

            elif curr_params["Type"] == 'Attenuator':
                return self.Attenuator(curr_params, index_test, general_results)

            return False
        except Exception as error:
            logger.write("[Automation TX - run]" + str('{err}'.format(err=error)), status=False)
            return False


class Test_Generator:
    def __init__(self):
        self.swap_mode()
        gui.ex.comboBox_Test_Generator_Mode.currentIndexChanged.connect(lambda: threading.Thread(target=self.swap_mode).start())
        gui.ex.pushButton_Test_Generator_Generate.clicked.connect(lambda: threading.Thread(target=self.generate_tests).start())
        gui.ex.checkBox_Test_Generator_Frequency_Fixed.clicked.connect(lambda: threading.Thread(target=self.freq_frame, args=["Fixed"]).start())
        gui.ex.checkBox_Test_Generator_Frequency_Range.clicked.connect(lambda: threading.Thread(target=self.freq_frame, args=["Range"]).start())
        gui.ex.checkBox_Test_Generator_Amplitude_Fixed.clicked.connect(lambda: threading.Thread(target=self.amplitude_frame, args=["Fixed"]).start())
        gui.ex.checkBox_Test_Generator_Amplitude_Range.clicked.connect(lambda: threading.Thread(target=self.amplitude_frame, args=["Range"]).start())

    def freq_frame(self, type):
        try:
            if type == "Fixed":
                gui.ex.checkBox_Test_Generator_Frequency_Range.setCheckState(False)
                gui.ex.frame_Test_Generator_Frequency_Fixed.setEnabled(True)
                gui.ex.frame_Test_Generator_Frequency_Range.setEnabled(False)
                gui.ex.checkBox_Test_Generator_Amplitude_Range.setEnabled(True)
                gui.ex.frame_Test_Generator_Amplitude_Range.setEnabled(True)
            else:
                gui.ex.checkBox_Test_Generator_Frequency_Fixed.setCheckState(False)
                gui.ex.frame_Test_Generator_Frequency_Range.setEnabled(True)
                gui.ex.frame_Test_Generator_Frequency_Fixed.setEnabled(False)
                gui.ex.checkBox_Test_Generator_Amplitude_Fixed.click()
                gui.ex.checkBox_Test_Generator_Amplitude_Range.setEnabled(False)
                gui.ex.frame_Test_Generator_Amplitude_Range.setEnabled(False)
        except Exception as error:
            logger.write("[freq_frame] error: " + str(error), status=False)

    def amplitude_frame(self, type):
        try:
            if type == "Fixed":
                gui.ex.checkBox_Test_Generator_Amplitude_Range.setCheckState(False)
                gui.ex.frame_Test_Generator_Amplitude_Fixed.setEnabled(True)
                gui.ex.frame_Test_Generator_Amplitude_Range.setEnabled(False)
            else:
                gui.ex.checkBox_Test_Generator_Amplitude_Fixed.setCheckState(False)
                gui.ex.frame_Test_Generator_Amplitude_Range.setEnabled(True)
                gui.ex.frame_Test_Generator_Amplitude_Fixed.setEnabled(False)
        except Exception as error:
            logger.write("[amplitude_frame] error: " + str(error), status=False)

    def swap_mode(self):
        try:
            if gui.ex.comboBox_Test_Generator_Mode.currentText() == "TX":
                gui.ex.comboBox_Test_Generator_Type.clear()
                gui.ex.comboBox_Test_Generator_Modulation.clear()
                gui.ex.comboBox_Test_Generator_ResourceID.clear()
                gui.ex.comboBox_Test_Generator_RF_PATH.clear()
                gui.ex.comboBox_Test_Generator_Type.addItems(["Tx Power", "ACPR", "Harmonics", "Spurious", "Frequency Accuracy"])
                gui.ex.comboBox_Test_Generator_Modulation.addItems(["CW", "QAM4"])
                gui.ex.comboBox_Test_Generator_ResourceID.addItems(["Navassa 1 Tx 1", "Navassa 1 Tx 2", "Navassa 2 Tx 1", "Navassa 2 Tx 2", "Navassa 3 Tx 1", "Navassa 3 Tx 2", "Navassa 4 Tx 1", "Navassa 4 Tx 2"])
                gui.ex.comboBox_Test_Generator_RF_PATH.addItems(os.listdir("Files\\Automation\\RF_PATH_TX\\"))
                WriteStream.write(["frame_Test_Generator_TX.setHidden", False])
                WriteStream.write(["frame_Test_Generator_RX.setHidden", True])
                WriteStream.write(["frame_Test_Generator_Amplitude.setHidden", True])
            else:
                gui.ex.comboBox_Test_Generator_Type.clear()
                gui.ex.comboBox_Test_Generator_Modulation.clear()
                gui.ex.comboBox_Test_Generator_ResourceID.clear()
                gui.ex.comboBox_Test_Generator_RF_PATH.clear()
                gui.ex.comboBox_Test_Generator_Type.addItems(["Sensitivity"])
                gui.ex.comboBox_Test_Generator_Modulation.addItems(["QPSK", "QAM4", "QAM16"])
                gui.ex.comboBox_Test_Generator_ResourceID.addItems(["Navassa 1 Rx 1", "Navassa 1 Rx 2", "Navassa 2 Rx 1", "Navassa 2 Rx 2", "Navassa 3 Rx 1", "Navassa 3 Rx 2", "Navassa 4 Rx 1", "Navassa 4 Rx 2"])
                gui.ex.comboBox_Test_Generator_RF_PATH.addItems(os.listdir("Files\\Automation\\RF_PATH_RX\\"))
                gui.ex.comboBox_Test_Generator_Route_Mictor_To.addItems(os.listdir("Files\\Automation\\Route_Mictor\\"))
                gui.ex.comboBox_Test_Generator_Recall_Setup.addItems(os.listdir("Files\\Automation\\Presets\\VSA_recall_setup\\"))
                WriteStream.write(["frame_Test_Generator_TX.setHidden", True])
                WriteStream.write(["frame_Test_Generator_RX.setHidden", False])
                WriteStream.write(["frame_Test_Generator_RX.setGeometry", (QtCore.QRect(330, 60, 261, 291))])
                WriteStream.write(["frame_Test_Generator_Amplitude.setHidden", False])
        except Exception as error:
            logger.write("[Test Generator - swap_mode] error: " + str(error), status=False)

    def generate_tests(self):
        try:
            file_name = str(gui.ex.lineEdit_Test_Generator_File_Name.text()) + ".json"
            # if os.path.isfile("Files/Automation/Tests/" + str(gui.ex.comboBox_Test_Generator_Mode.currentText()) + "_Mode/" + str(file_name)):
            #     logger.write("Error creating new file: The file name exists", status=False)
            #     return
            if not gui.ex.checkBox_Test_Generator_Frequency_Range.isChecked() and not gui.ex.checkBox_Test_Generator_Frequency_Fixed.isChecked():
                logger.write("You must choose Frequency type (Fixed or Range)", status=False)
                return
            if not gui.ex.checkBox_Test_Generator_Amplitude_Range.isChecked() and not gui.ex.checkBox_Test_Generator_Amplitude_Fixed.isChecked():
                logger.write("You must choose Amplitude type (Fixed or Range)", status=False)
                return
            if not os.path.isfile("Files/Automation/Tests/" + str(gui.ex.comboBox_Test_Generator_Mode.currentText()) + "_Mode/" + str(file_name)):
                file = open("Files/Automation/Tests/" + str(gui.ex.comboBox_Test_Generator_Mode.currentText()) + "_Mode/" + str(file_name), "w")
                file.write("{}")
                file.close()
            params = {}
            existing_file = {}
            if gui.ex.comboBox_Test_Generator_Mode.currentText() == "TX":
                if gui.ex.checkBox_Test_Generator_Frequency_Range.isChecked():
                    freq = float(gui.ex.doubleSpinBox_Test_Generator_Frequency_Range_Start.text())
                    freq_end = float(gui.ex.doubleSpinBox_Test_Generator_Frequency_Range_End.text())
                    freq_step = float(gui.ex.doubleSpinBox_Test_Generator_Frequency_Range_Step.text())
                    if not os.path.isfile("Files/Automation/Tests/" + str(gui.ex.comboBox_Test_Generator_Mode.currentText()) + "_Mode/" + str(file_name)):
                        i = 0
                    else:
                        existing_file = json.load(open("Files/Automation/Tests/" + str(gui.ex.comboBox_Test_Generator_Mode.currentText()) + "_Mode/" + str(file_name), "r"))
                        i = len(existing_file)
                    while freq < freq_end:
                        params[i] = {
                            "Type": str(gui.ex.comboBox_Test_Generator_Type.currentText()),
                            "Antena": str(gui.ex.comboBox_Test_Generator_Antena.currentText()),
                            "Modulation": str(gui.ex.comboBox_Test_Generator_Modulation.currentText()),
                            "Bandwidth": str(gui.ex.comboBox_Test_Generator_Bandwidth.currentText()),
                            "Frequency": str(float(freq)),
                            "Tx_Power": str(gui.ex.comboBox_Test_Generator_Tx_Power.currentText()),
                            "Tx Attenuation (RF)": str(gui.ex.doubleSpinBox_Test_Generator_Tx_Att_RF.text()),
                            "Tx Attenuation (Navassa)": str(gui.ex.spinBox_Test_Generator_Tx_Att_Navassa.text()),
                            "Resource ID": str(gui.ex.comboBox_Test_Generator_ResourceID.currentText()),
                            "RF PATH": str(gui.ex.comboBox_Test_Generator_RF_PATH.currentText())}
                        freq = freq + freq_step
                        i += 1
                    params[i] = {
                            "Type": str(gui.ex.comboBox_Test_Generator_Type.currentText()),
                            "Antena": str(gui.ex.comboBox_Test_Generator_Antena.currentText()),
                            "Modulation": str(gui.ex.comboBox_Test_Generator_Modulation.currentText()),
                            "Bandwidth": str(gui.ex.comboBox_Test_Generator_Bandwidth.currentText()),
                            "Frequency": str(float(freq_end)),
                            "Tx_Power": str(gui.ex.comboBox_Test_Generator_Tx_Power.currentText()),
                            "Tx Attenuation (RF)": str(gui.ex.doubleSpinBox_Test_Generator_Tx_Att_RF.text()),
                            "Tx Attenuation (Navassa)": str(gui.ex.spinBox_Test_Generator_Tx_Att_Navassa.text()),
                            "Resource ID": str(gui.ex.comboBox_Test_Generator_ResourceID.currentText()),
                            "RF PATH": str(gui.ex.comboBox_Test_Generator_RF_PATH.currentText())}
                else:  # Fixed Frequency
                    freq = float(gui.ex.doubleSpinBox_Test_Generator_Frequency_Fixed.text())
                    params[0] = {
                        "Type": str(gui.ex.comboBox_Test_Generator_Type.currentText()),
                        "Antena": str(gui.ex.comboBox_Test_Generator_Antena.currentText()),
                        "Modulation": str(gui.ex.comboBox_Test_Generator_Modulation.currentText()),
                        "Bandwidth": str(gui.ex.comboBox_Test_Generator_Bandwidth.currentText()),
                        "Frequency": str(float(freq)),
                        "Tx_Power": str(gui.ex.comboBox_Test_Generator_Tx_Power.currentText()),
                        "Tx Attenuation (RF)": str(gui.ex.doubleSpinBox_Test_Generator_Tx_Att_RF.text()),
                        "Tx Attenuation (Navassa)": str(gui.ex.spinBox_Test_Generator_Tx_Att_Navassa.text()),
                        "Resource ID": str(gui.ex.comboBox_Test_Generator_ResourceID.currentText()),
                        "RF PATH": str(gui.ex.comboBox_Test_Generator_RF_PATH.currentText())}

            else:
                if gui.ex.checkBox_Test_Generator_Frequency_Range.isChecked():
                    freq = float(gui.ex.doubleSpinBox_Test_Generator_Frequency_Range_Start.text())
                    freq_end = float(gui.ex.doubleSpinBox_Test_Generator_Frequency_Range_End.text())
                    freq_step = float(gui.ex.doubleSpinBox_Test_Generator_Frequency_Range_Step.text())
                    amplitude = gui.ex.spinBox_Test_Generator_Amplitude_Fixed.text()
                    if not os.path.isfile("Files/Automation/Tests/" + str(gui.ex.comboBox_Test_Generator_Mode.currentText()) + "_Mode/" + str(file_name)):
                        i = 0
                    else:
                        existing_file = json.load(open("Files/Automation/Tests/" + str(gui.ex.comboBox_Test_Generator_Mode.currentText()) + "_Mode/" + str(file_name), "r"))
                        i = len(existing_file)
                    while freq < freq_end:
                        params[i] = {
                            "Type": str(gui.ex.comboBox_Test_Generator_Type.currentText()),
                            "Antena": str(gui.ex.comboBox_Test_Generator_Antena.currentText()),
                            "Modulation": str(gui.ex.comboBox_Test_Generator_Modulation.currentText()),
                            "Frequency": str(float(freq)),
                            "Resource ID": str(gui.ex.comboBox_Test_Generator_ResourceID.currentText()),
                            "RF PATH": str(gui.ex.comboBox_Test_Generator_RF_PATH.currentText()),
                            "Route Mictor To": str(gui.ex.comboBox_Test_Generator_Route_Mictor_To.currentText()),
                            "Amplitude": str(amplitude),
                            "Filter Alpha": str(gui.ex.doubleSpinBox_Test_Generator_Filter_Alpha.text()),
                            "Symbol Rate": str(gui.ex.doubleSpinBox_Test_Generator_Symbol_Rate.text()),
                            "TX Attenuation": str(gui.ex.doubleSpinBox_Test_Generator_Tx_Att.text()),
                            "RX Gain Index": str(gui.ex.spinBox_Test_Generator_Rx_Gain_Index.text()),
                            "Recall Setup": str(gui.ex.comboBox_Test_Generator_Recall_Setup.currentText())}
                        freq = freq + freq_step
                        i += 1
                    params[i] = {
                        "Type": str(gui.ex.comboBox_Test_Generator_Type.currentText()),
                        "Antena": str(gui.ex.comboBox_Test_Generator_Antena.currentText()),
                        "Modulation": str(gui.ex.comboBox_Test_Generator_Modulation.currentText()),
                        "Frequency": str(float(freq_end)),
                        "Resource ID": str(gui.ex.comboBox_Test_Generator_ResourceID.currentText()),
                        "RF PATH": str(gui.ex.comboBox_Test_Generator_RF_PATH.currentText()),
                        "Route Mictor To": str(gui.ex.comboBox_Test_Generator_Route_Mictor_To.currentText()),
                        "Amplitude": str(amplitude),
                        "Filter Alpha": str(gui.ex.doubleSpinBox_Test_Generator_Filter_Alpha.text()),
                        "Symbol Rate": str(gui.ex.doubleSpinBox_Test_Generator_Symbol_Rate.text()),
                        "TX Attenuation": str(gui.ex.doubleSpinBox_Test_Generator_Tx_Att.text()),
                        "RX Gain Index": str(gui.ex.spinBox_Test_Generator_Rx_Gain_Index.text()),
                        "Recall Setup": str(gui.ex.comboBox_Test_Generator_Recall_Setup.currentText())}
                else:  # Fixed Frequency
                    freq = float(gui.ex.doubleSpinBox_Test_Generator_Frequency_Fixed.text())
                    if gui.ex.checkBox_Test_Generator_Amplitude_Fixed.isChecked():
                        amplitude = gui.ex.spinBox_Test_Generator_Amplitude_Fixed.text()
                        params[0] = {
                            "Type": str(gui.ex.comboBox_Test_Generator_Type.currentText()),
                            "Antena": str(gui.ex.comboBox_Test_Generator_Antena.currentText()),
                            "Modulation": str(gui.ex.comboBox_Test_Generator_Modulation.currentText()),
                            "Frequency": str(float(freq)),
                            "Resource ID": str(gui.ex.comboBox_Test_Generator_ResourceID.currentText()),
                            "RF PATH": str(gui.ex.comboBox_Test_Generator_RF_PATH.currentText()),
                            "Route Mictor To": str(gui.ex.comboBox_Test_Generator_Route_Mictor_To.currentText()),
                            "Amplitude": str(amplitude),
                            "Filter Alpha": str(gui.ex.doubleSpinBox_Test_Generator_Filter_Alpha.text()),
                            "Symbol Rate": str(gui.ex.doubleSpinBox_Test_Generator_Symbol_Rate.text()),
                            "TX Attenuation": str(gui.ex.doubleSpinBox_Test_Generator_Tx_Att.text()),
                            "RX Gain Index": str(gui.ex.spinBox_Test_Generator_Rx_Gain_Index.text()),
                            "Recall Setup": str(gui.ex.comboBox_Test_Generator_Recall_Setup.currentText())}
                    else:
                        amplitude = float(gui.ex.spinBox_Test_Generator_Amplitude_Range_Start.text())
                        amplitude_end = float(gui.ex.spinBox_Test_Generator_Amplitude_Range_End.text())
                        amplitude_step = float(gui.ex.spinBox_Test_Generator_Amplitude_Range_Step.text())
                        if not os.path.isfile("Files/Automation/Tests/" + str(gui.ex.comboBox_Test_Generator_Mode.currentText()) + "_Mode/" + str(file_name)):
                            i = 0
                        else:
                            existing_file = json.load(open("Files/Automation/Tests/" + str(gui.ex.comboBox_Test_Generator_Mode.currentText()) + "_Mode/" + str(file_name), "r"))
                            i = len(existing_file)
                        while amplitude < amplitude_end:
                            params[i] = {
                                "Type": str(gui.ex.comboBox_Test_Generator_Type.currentText()),
                                "Antena": str(gui.ex.comboBox_Test_Generator_Antena.currentText()),
                                "Modulation": str(gui.ex.comboBox_Test_Generator_Modulation.currentText()),
                                "Frequency": str(float(freq)),
                                "Resource ID": str(gui.ex.comboBox_Test_Generator_ResourceID.currentText()),
                                "RF PATH": str(gui.ex.comboBox_Test_Generator_RF_PATH.currentText()),
                                "Route Mictor To": str(gui.ex.comboBox_Test_Generator_Route_Mictor_To.currentText()),
                                "Amplitude": str(amplitude),
                                "Filter Alpha": str(gui.ex.doubleSpinBox_Test_Generator_Filter_Alpha.text()),
                                "Symbol Rate": str(gui.ex.doubleSpinBox_Test_Generator_Symbol_Rate.text()),
                                "TX Attenuation": str(gui.ex.doubleSpinBox_Test_Generator_Tx_Att.text()),
                                "RX Gain Index": str(gui.ex.spinBox_Test_Generator_Rx_Gain_Index.text()),
                                "Recall Setup": str(gui.ex.comboBox_Test_Generator_Recall_Setup.currentText())}
                            amplitude = amplitude + amplitude_step
                            i += 1
                        params[i] = {
                            "Type": str(gui.ex.comboBox_Test_Generator_Type.currentText()),
                            "Antena": str(gui.ex.comboBox_Test_Generator_Antena.currentText()),
                            "Modulation": str(gui.ex.comboBox_Test_Generator_Modulation.currentText()),
                            "Frequency": str(float(freq)),
                            "Resource ID": str(gui.ex.comboBox_Test_Generator_ResourceID.currentText()),
                            "RF PATH": str(gui.ex.comboBox_Test_Generator_RF_PATH.currentText()),
                            "Route Mictor To": str(gui.ex.comboBox_Test_Generator_Route_Mictor_To.currentText()),
                            "Amplitude": str(amplitude_end),
                            "Filter Alpha": str(gui.ex.doubleSpinBox_Test_Generator_Filter_Alpha.text()),
                            "Symbol Rate": str(gui.ex.doubleSpinBox_Test_Generator_Symbol_Rate.text()),
                            "TX Attenuation": str(gui.ex.doubleSpinBox_Test_Generator_Tx_Att.text()),
                            "RX Gain Index": str(gui.ex.spinBox_Test_Generator_Rx_Gain_Index.text()),
                            "Recall Setup": str(gui.ex.comboBox_Test_Generator_Recall_Setup.currentText())}
            with open("Files/Automation/Tests/" + str(gui.ex.comboBox_Test_Generator_Mode.currentText()) + "_Mode/" + file_name, 'w') as fp:
                first_key = list(params.keys())[0]
                if first_key == 0:
                    json.dump(params, fp, indent=2)
                else:
                    existing_file.update(params)
                    json.dump(existing_file, fp, indent=2)
            logger.write("The test file was successfully created !")
            table.load_tests_name()
        except Exception as error:
            logger.write("[generate_tests] error: " + str(error), status=False)


class Scan_Offset:
    def __init__(self):
        self.traceData = []
        self.TraceDataDict = {}
        self.freq_range = []
        self.att_scan = {}
        self.current_att = 0
        self.isStop = True
        self.signal_generator_ip = configurations.Signal_Generator

        WriteStream.write(["lineEdit_Automation_Tools_offset_scan_SignalGenerator_IP.setText", self.signal_generator_ip])

        gui.ex.pushButton_Automation_Tools_offset_scan_offset_Scan.clicked.connect(lambda: threading.Thread(target=self.ATT_Scan).start())
        gui.ex.pushButton_Automation_Tools_offset_scan_offset_Scan_stop.clicked.connect(lambda: threading.Thread(target=self.stopScan).start())

        gui.ex.checkBox_Automation_Tools_offset_scan_antena1.clicked.connect(lambda: threading.Thread(target=self.manage_stream_selection, args=[1]).start())
        gui.ex.checkBox_Automation_Tools_offset_scan_antena2.clicked.connect(lambda: threading.Thread(target=self.manage_stream_selection, args=[2]).start())
        gui.ex.pushButton_Automation_Tools_offset_scan_offset_delete.clicked.connect(lambda: threading.Thread(target=self.delete_Line_att).start())
        gui.ex.pushButton_Automation_Tools_offset_scan_offset_add.clicked.connect(lambda: threading.Thread(target=self.manage_auto_manual_selection).start())

    def stopScan(self):
        self.isStop = True

        curr_stream = 1 if gui.ex.checkBox_Automation_Tools_offset_scan_antena1.isChecked() else 2

        # ---------- Convert Trace Data to Dictionary --------
        for i in range(0, len(self.traceData)):
            if i % 2 == 0:
                self.TraceDataDict[str(self.traceData[i])] = self.traceData[i + 1]

        try:
            for freq in self.freq_range:
                self.att_scan['Antena_' + str(curr_stream)]['Frequency'][str(freq)]['Peak']["ATT_" + str(self.current_att)] = "{0:.3f}".format(float(self.TraceDataDict[str(freq * 1000000)]) - float(gui.ex.doubleSpinBox_Automation_Tools_offset_scan_att_loss.text()))
                logger.write('[ATT Scan][Att_' + str(self.current_att) + '][Frequency: ' + str(freq) + '  Peak: ' + str("{0:.3f}".format(float(self.TraceDataDict[str(freq * 1000000)]) - float(gui.ex.doubleSpinBox_Automation_Tools_offset_scan_att_loss.text()))) + ']')
        except:
            pass

        with open('bin\\ATT_scan.json', 'w') as fp:
            json.dump(self.att_scan, fp, indent=2)

        gui.ex.pushButton_Automation_Tools_offset_scan_offset_Scan.setEnabled(True)
        signalGenerator.disconncet()

        gui.ex.pushButton_Automation_Tools_offset_scan_offset_Scan_stop.setEnabled(False)
        gui.ex.pushButton_Automation_Tools_offset_scan_offset_Scan.setEnabled(True)

    def manage_auto_manual_selection(self):
        gui.ex.tableWidget_Automation_Tools_offset_scan_offset_scan.horizontalHeader().setVisible(True)
        WriteStream.write(["tableWidget_Automation_Tools_offset_scan_offset_scan.setRowCount", 0])
        WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_start.setEnabled", False])
        WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_stop.setEnabled", False])
        WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_step.setEnabled", False])
        WriteStream.write(["pushButton_Automation_Tools_offset_scan_offset_add.setEnabled", False])

        freq = float(gui.ex.doubleSpinBox_Automation_Tools_offset_scan_att_start.text())
        freq_end = float(gui.ex.doubleSpinBox_Automation_Tools_offset_scan_att_stop.text())
        freq_step = float(gui.ex.doubleSpinBox_Automation_Tools_offset_scan_att_step.text())
        row_count = 0
        while freq < freq_end:
            header = gui.ex.tableWidget_Automation_Tools_offset_scan_offset_scan.horizontalHeader()
            header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
            item = QtWidgets.QTableWidgetItem(str(row_count + 1))
            item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)

            WriteStream.write(["tableWidget_Automation_Tools_offset_scan_offset_scan.insertRow", row_count])
            time.sleep(0.1)
            WriteStream.write(["tableWidget_Automation_Tools_offset_scan_offset_scan.setVerticalHeaderItem", row_count, item])

            item_StartFrequency = QtWidgets.QTableWidgetItem(str(freq))

            item_StartFrequency.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)

            item_StartFrequency.setForeground(QBrush(QColor(255, 255, 255)))

            WriteStream.write(["tableWidget_Automation_Tools_offset_scan_offset_scan.setItem", row_count, 0, item_StartFrequency])

            freq = freq + freq_step
            row_count += 1
        item = QtWidgets.QTableWidgetItem(str(row_count))
        item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)

        WriteStream.write(["tableWidget_Automation_Tools_offset_scan_offset_scan.insertRow", row_count])
        time.sleep(0.1)
        WriteStream.write(["tableWidget_Automation_Tools_offset_scan_offset_scan.setVerticalHeaderItem", row_count, item])

        item_StartFrequency = QtWidgets.QTableWidgetItem(str(freq_end))

        item_StartFrequency.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)

        item_StartFrequency.setForeground(QBrush(QColor(255, 255, 255)))

        WriteStream.write(["tableWidget_Automation_Tools_offset_scan_offset_scan.setItem", row_count, 0, item_StartFrequency])
        WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_start.setEnabled", True])
        WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_stop.setEnabled", True])
        WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_step.setEnabled", True])
        WriteStream.write(["pushButton_Automation_Tools_offset_scan_offset_add.setEnabled", True])

    def delete_Line_att(self):
        if gui.ex.tableWidget_Automation_Tools_offset_scan_offset_scan.currentRow() == -1:
            return

        last = gui.ex.tableWidget_Automation_Tools_offset_scan_offset_scan.currentRow()
        gui.ex.tableWidget_Automation_Tools_offset_scan_offset_scan.removeRow(gui.ex.tableWidget_Automation_Tools_offset_scan_offset_scan.currentRow())
        gui.ex.tableWidget_Automation_Tools_offset_scan_offset_scan.setCurrentCell(last - 1, 0)

        for i in range(0, gui.ex.tableWidget_Automation_Tools_offset_scan_offset_scan.rowCount(), 1):
            item = QtWidgets.QTableWidgetItem(str(i + 1))
            WriteStream.write(["tableWidget_Automation_Tools_offset_scan_offset_scan.setVerticalHeaderItem", i, item])

    def manage_stream_selection(self, obj):
        if obj == 1:
            if gui.ex.checkBox_Automation_Tools_offset_scan_antena1.isChecked():
                gui.ex.checkBox_Automation_Tools_offset_scan_antena2.setChecked(False)
        else:
            if gui.ex.checkBox_Automation_Tools_offset_scan_antena2.isChecked():
                gui.ex.checkBox_Automation_Tools_offset_scan_antena1.setChecked(False)

    def get_serial_number(self, stream):
        IP = (str(gui.ex.lineEdit_configuration_programableAttenuator_CH1.text()) if stream == 1
              else str(gui.ex.lineEdit_configuration_programableAttenuator_CH2.text()))
        try:
            sn = urlopen("http://" + str(IP) + "/sn?=", timeout=1).read()
            sn = sn.decode('UTF-8')
            sn = sn.replace("SN=", "")
            return sn
        except Exception as error:
            logger.write("[get_serial_number][" + str(str(gui.ex.lineEdit_configuration_programableAttenuator_CH1.text())) + "] [No regular Programable Attenuator] error: " + str('{err}'.format(err=error)))
            return False

    def ping_to_spectrum(self):
        try:
            if "TTL" in action.popen("ping -n 1 " + str(gui.ex.lineEdit_Configuration_spectrum_ip.text())).decode().split("\r\n")[2]:
                gui.ex.lineEdit_Configuration_spectrum_ip.setStyleSheet("color: rgb(255, 255, 255);\nbackground-color: rgb(85, 170, 0);\npadding-left: 5px;")
                has_ping = True
                logger.write("Ping succeeded to spectrum")
            else:
                gui.ex.lineEdit_Configuration_spectrum_ip.setStyleSheet("color: rgb(255, 255, 255);\nbackground-color: rgb(255, 140, 111);\npadding-left: 5px;")
                logger.write("Ping failed to spectrum")
                has_ping = False
        except Exception as error:
            gui.ex.lineEdit_Configuration_spectrum_ip.setStyleSheet("color: rgb(255, 255, 255);\nbackground-color: rgb(255, 140, 111);\npadding-left: 5px;")
            logger.write("[ping_check] [spectrum] error: " + str(error))
            has_ping = False

        return has_ping

    def find_nearest(self, array, value):
        desired_array = [float(numeric_string) for numeric_string in array]
        desired_array = np.asarray(desired_array)
        idx = (np.abs(desired_array - value)).argmin()
        return desired_array[idx]

    def ATT_Scan(self):
        try:
            self.isStop = False
            isOffsetsFile = True
            WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_start.setEnabled", False])
            WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_stop.setEnabled", False])
            WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_step.setEnabled", False])
            WriteStream.write(["pushButton_Automation_Tools_offset_scan_offset_add.setEnabled", False])
            gui.ex.pushButton_Automation_Tools_offset_scan_offset_Scan.setEnabled(False)
            gui.ex.pushButton_Automation_Tools_offset_scan_offset_Scan_stop.setEnabled(True)

            logger.write("[ATT_Scan] START")
            gui.ex.progressBar_Automation_Tools_offset_scan_attScan.setValue(0)
            addToNotRange = 0

            ##### SPECTRUM #####
            isPingToSpectrum = self.ping_to_spectrum()
            if isPingToSpectrum:
                rm = pyvisa.ResourceManager()
                N9010B = rm.open_resource('TCPIP0::' + gui.ex.lineEdit_Configuration_spectrum_ip.text() + '::hislip0::INSTR')

            #### connect to signal generator ####
            isSignalConnected = signalGenerator.connect(str(self.signal_generator_ip))

            if isSignalConnected is False or isPingToSpectrum is False or (gui.ex.checkBox_Automation_Tools_offset_scan_antena1.isChecked() or gui.ex.checkBox_Automation_Tools_offset_scan_antena2.isChecked()) is False or (gui.ex.tableWidget_Automation_Tools_offset_scan_offset_scan.rowCount() == 0):
                logger.write('[ATT Scan] FAILED TO START THE SCAN')
                WriteStream.write(["pushButton_Automation_Tools_offset_scan_offset_Scan.setEnabled", True])
                WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_start.setEnabled", True])
                WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_stop.setEnabled", True])
                WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_step.setEnabled", True])
                WriteStream.write(["pushButton_Automation_Tools_offset_scan_offset_add.setEnabled", True])
                WriteStream.write(["pushButton_Automation_Tools_offset_scan_offset_add.setEnabled", True])
                return

            # --------  Open existing Offsets.json as dict -------
            try:
                with open('config\\Offsets.json') as json_file:
                    self.att_scan = json.load(json_file)
                if (bool(self.att_scan)) is None:
                    # ------ if Offsets.json file is empty (just  {}) -> we build a new one
                    self.att_scan = {
                        "Antena_1": {
                            "Serial_Number": '',
                            "Frequency": {}
                        },
                        "Antena_2": {
                            "Serial_Number": '',
                            "Frequency": {}
                        }
                    }
            except:
                # ------ if ATT_scan.json file is empty -> we build a new one
                self.att_scan = {
                    "Antena_1": {
                        "Serial_Number": '',
                        "Frequency": {}
                    },
                    "Antena_2": {
                        "Serial_Number": '',
                        "Frequency": {}
                    }
                }
            # --------  Get the current Stream -------
            curr_stream = 1 if gui.ex.checkBox_Automation_Tools_offset_scan_antena1.isChecked() else 2

            # --------  Get Attenuator serial number -------

            self.att_scan['Antena_' + str(curr_stream)]['Frequency'] = {}

            for att in range(0, 1, 1):

                if not self.isStop:

                    self.current_att = att

                    # if gui.ex.checkBox_p_atten.isChecked():
                    #     action.set_ATT(curr_stream, att)

                    for line in range(0, gui.ex.tableWidget_Automation_Tools_offset_scan_offset_scan.rowCount(), 1):
                        if not self.isStop:

                            curr_start_freq = float(gui.ex.tableWidget_Automation_Tools_offset_scan_offset_scan.item(line, 0).text())
                            curr_stop_freq = float(gui.ex.tableWidget_Automation_Tools_offset_scan_offset_scan.item(line, 0).text())
                            curr_step = 0

                            self.freq_range = []
                            if curr_start_freq != curr_stop_freq:
                                self.freq_range = np.arange(curr_start_freq, (curr_stop_freq + curr_step), curr_step)
                            else:
                                self.freq_range = [curr_start_freq]
                                addToNotRange = 5

                            for freq in self.freq_range:
                                if att == 0:
                                    self.att_scan['Antena_' + str(curr_stream)]['Frequency'][str(freq)] = {"Peak": {}}
                                else:
                                    self.att_scan['Antena_' + str(curr_stream)]['Frequency'][str(freq)]['Peak']["ATT_" + str(att)] = 0.0

                            # ----------- SET PRESET SPECTRUN--------
                            # set preset
                            N9010B.write(':SYSTem:PRESet')

                            # ----------- SET SIGNAL GENERATOR TO SWEEP MODE --------
                            signalGenerator.setPreset()
                            signalGenerator.setSweep(curr_start_freq, curr_stop_freq)

                            # if auto is checked - config center frequency , else we need a range so start and stop
                            # set center frequency
                            N9010B.write(':SENSe:FREQ:CENTer %G MHz' % (curr_start_freq))
                            # set span
                            N9010B.write(':SENSe:FREQ:SPAN 0.5 MHz')

                            # set max hold
                            N9010B.write(':TRACe:TYPE MAXHold')
                            # set single on
                            N9010B.write(':INITiate:CONTinuous OFF')
                            N9010B.write(':SENSe:OBW:AVERage:COUNt %G' % (100))

                            #if manual - config a bigger amount of points measured
                            # if gui.ex.checkBox_attScan_manual.isChecked():
                            #     N9010B.write(':SENSe:AVERage:COUNt %G' % (2*5000))
                            #     N9010B.write(':SENSe:SWEep:POINts %G' % (5000))

                            # set amplitude if att bigger than 70
                            # if att > 71 and gui.ex.checkBox_p_atten.isChecked():
                            #     N9010B.write(':SENSe:POWer:RF:ATTenuation 0')
                            #     N9010B.write(':POW:GAIN ON')
                            #     N9010B.write(':POW: GAIN:BAND LOW')

                            time.sleep(1)

                            # ----------- GET TRACE DATA FROM SPECTRUM --------
                            ans = N9010B.query_ascii_values('*OPC?')
                            N9010B.timeout = 60000
                            isSuccess = False
                            counter = 0
                            self.traceData = []

                            while isSuccess is not True and counter < 5:
                                try:
                                    self.traceData = N9010B.query_ascii_values(':read:san1?')
                                    isSuccess = True
                                except Exception as error:
                                    logger.write("[ATT_Scan][QUERY VALUES] error: " + str(error))
                                    counter += 1
                                    if counter == 5:
                                        continue

                            self.TraceDataDict = {}

                            # ---------- Convert Trace Data to Dictionary --------
                            for i in range(0, len(self.traceData)):
                                if i % 2 == 0:
                                    self.TraceDataDict[str(self.traceData[i])] = self.traceData[i + 1]

                            for freq in self.freq_range:
                                try:
                                    self.att_scan['Antena_' + str(curr_stream)]['Frequency'][str(freq)]['Peak']["ATT_" + str(att)] = "{0:.3f}".format(float(self.TraceDataDict[str(freq * 1000000)] - float(gui.ex.doubleSpinBox_Automation_Tools_offset_scan_att_loss.text())))
                                    logger.write('[ATT Scan][Att_' + str(att) + '][Frequency: ' + str(freq) + '  Peak: ' + str("{0:.3f}".format(float(self.TraceDataDict[str(freq * 1000000)] - float(gui.ex.doubleSpinBox_Automation_Tools_offset_scan_att_loss.text())))) + ']')
                                except:
                                    closest = self.find_nearest(list(self.TraceDataDict.keys()), (freq * 1000000))
                                    self.att_scan['Antena_' + str(curr_stream)]['Frequency'][str(freq)]['Peak']["ATT_" + str(att)] = "{0:.3f}".format(float(self.TraceDataDict[str(closest)] - float(gui.ex.doubleSpinBox_Automation_Tools_offset_scan_att_loss.text())))
                                    logger.write('[ATT Scan][Att_' + str(att) + '][Frequency: ' + str(freq) + '  Peak: ' + str("{0:.3f}".format(float(self.TraceDataDict[str(closest)] - float(gui.ex.doubleSpinBox_Automation_Tools_offset_scan_att_loss.text())))) + ']')

                            if isOffsetsFile:
                                with open('config\\Offsets.json', 'w') as fp:
                                    json.dump(self.att_scan, fp, indent=2)
                            else:
                                with open('bin\\ATT_scan.json', 'w') as fp:
                                    json.dump(self.att_scan, fp, indent=2)

                    logger.write('[ATT Scan] Finish att ' + str(att) + ']\n')
                    gui.ex.progressBar_Automation_Tools_offset_scan_attScan.setValue(att)

                else:
                    logger.write('[ATT Scan] Stop att ' + str(att) + ']')
                    return

            logger.write('[ATT Scan] Finish SCAN ATT')
            gui.ex.pushButton_Automation_Tools_offset_scan_offset_Scan.setEnabled(True)
            WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_start.setEnabled", True])
            WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_stop.setEnabled", True])
            WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_step.setEnabled", True])
            WriteStream.write(["pushButton_Automation_Tools_offset_scan_offset_add.setEnabled", True])
            signalGenerator.setOff()

        except Exception as error:
            logger.write("[ATT_Scan] error: " + str(error))
            gui.ex.pushButton_Automation_Tools_offset_scan_offset_Scan.setEnabled(True)
            signalGenerator.setOff()
            gui.ex.pushButton_Automation_Tools_offset_scan_offset_Scan_stop.setEnabled(False)
            gui.ex.pushButton_Automation_Tools_offset_scan_offset_Scan.setEnabled(True)
            WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_start.setEnabled", True])
            WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_stop.setEnabled", True])
            WriteStream.write(["doubleSpinBox_Automation_Tools_offset_scan_att_step.setEnabled", True])
            WriteStream.write(["pushButton_Automation_Tools_offset_scan_offset_add.setEnabled", True])


class PS:

    def __init__(self, IP, Port):

        self.sock = None
        self.IP = IP
        self.Port = Port
        # another ip and port not like in my file - take it from the gui

    def connect(self):
        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.settimeout(1)
            self.sock.connect((str(self.IP), int(self.Port)))

            print("[" + str(self.IP) + "] Connected to a power supply")
            return True
        except Exception as error:
            logger.write("[PS - Connect] VS connect" + str(error), status=False)
            return False

    def close(self):
        try:
            self.sock.close()
            print("[" + str(self.IP) + "] closeConnected to a power supply")
        except Exception as error:
            logger.write("PS close" + str(error), status=False)

    def write(self, command):
        try:
            print("[" + str(self.IP) + "] [Port " + str(self.Port) + "] [" + str(command.replace("\r", "").replace("\n", "")) + "] [", end='')
            try:
                self.sock.send(command.encode())
                respond = self.sock.recv(1024)
                print(str(respond.decode()).replace("\r", "").replace("\n", "") + "]")
            except Exception as error:
                logger.write("PS [write] socket error: " + str('{err}'.format(err=error)) + "]", status=False)
                print("No output]")
        except Exception as error:
            logger.write("PS [write]" + str(error), status=False)


class SignalGenerator:
    def __init__(self):
        self.IP = ""
        self.isConncted = False

    def connect(self, ip):
        try:
            self.rm = pyvisa.ResourceManager()
            self.IP = ip
            try:
                self.N5172B = self.rm.open_resource('TCPIP0::' + str(self.IP) + '::5025::SOCKET', write_termination='\n')
                self.N5172B.read_termination = '\n'
                self.N5172B.timeout = 10000
                logger.write("[SignalGenerator connect] " + str(self.IP) + " connect")
                self.isConncted = True
            except:
                logger.write("[SignalGenerator connect] is not connected")
                self.isConncted = False
        except Exception as error:
            logger.write("[Signal Generator - connect]" + str(error), status=False)

    def disconncet(self):
        try:
            if (self.isConncted):
                self.N5172B.close()
                self.isConncted = False
                logger.write("[SignalGenerator close]\n", False)
        except Exception as error:
            logger.write("[Error in close SignalGenerator] " + str('{err}'.format(err=error)), False)
            return

    def setPreset(self):
        try:
            self.N5172B.write(':SYSTem:PRESet')
        except Exception as error:
            logger.write("[Error in set setPreset SignalGenerator] \n" + str('{err}'.format(err=error)), False)

    def setSweep(self, start_freq, stop_freq):
        try:
            self.N5172B.write(':SOURce:FREQuency:STARt %G MHz' % (start_freq))
            self.N5172B.write(':SOURce:FREQuency:STOP %G MHz' % (stop_freq))
            self.N5172B.write(':SOURce:POWer:LEVel:IMMediate:AMPLitude %G' % (0))

            # if gui.ex.checkBox_attScan_manual.isChecked():
            #     self.N5172B.write(':SOURce:SWEep:POINts 5000')

            self.N5172B.write(':SOURce:FREQuency:MODE LIST')
            self.N5172B.write(':OUTPut:STATe %d' % (1))
        except Exception as error:
            logger.write("[Error in setAmplitude SignalGenerator] " + str('{err}'.format(err=error)), False)

    def close(self):
        try:
            if self.isConncted:
                self.N5172B.close()
                self.rm.close()
                self.isConncted = False
                logger.write("[SignalGenerator close]")
        except Exception as error:
            logger.write("[Signal Generator - close]" + str(error), status=False)

    def setOff(self):
        try:
            self.N5172B.write(':OUTPut:STATe %d' % 0)
            logger.write("[signalGenerator setOff]")
        except Exception as error:
            logger.write("[setOff]" + str(error), status=False)

    def setOn(self):
        try:
            self.N5172B.write(':OUTPut:STATe %d' % 1)
            logger.write("[signalGenerator setOn]")
        except Exception as error:
            logger.write("[setOn]" + str(error), status=False)

    def setFrequency(self, frequency):
        try:
            frequency = frequency * 1000000.0
            self.N5172B.write(':SOURce:FREQuency:FIXed %G' % frequency)
            logger.write("[signalGenerator setFrequency] frequency= " + str(frequency))
        except Exception as error:
            logger.write("[setFrequency]" + str(error), status=False)

    def getFrequency(self):
        try:
            temp_values = self.N5172B.query_ascii_values(':SOURce:FREQuency:CENTer?')
            num = temp_values[0]
            logger.write("[signalGenerator getFrequency] frequency= " + str(num))
            return num
        except Exception as error:
            logger.write("[getFrequency]" + str(error), status=False)

    def setAmplitude(self, amplitude):
        try:
            # amplitude = -1 * amplitude
            self.N5172B.write(':SOURce:POWer:LEVel:IMMediate:AMPLitude %G' % amplitude)
            logger.write("[signalGenerator setAmplitude] amplitude= " + str(amplitude))
        except Exception as error:
            logger.write("[setAmplitude]" + str(error), status=False)

    def timeCustom(self, num: int):
        try:
            # 1- ON, 0- OFF
            self.N5172B.write(':SOURce:RADio:CUSTom:STATe %d' % num)
            logger.write("[signalGenerator timeCustom] timeCustom= " + str(num))
        except Exception as error:
            logger.write("[timeCustom]" + str(error), status=False)

    def setModulationType(self, Modulation: str):
        try:
            # Modulation = QPSK
            self.N5172B.write(':SOURce:RADio:DMODulation:ARB:MODulation:TYPE %s' % Modulation)
            logger.write("[signalGenerator setModulationType] Modulation= " + str(Modulation))
        except Exception as error:
            logger.write("[setModulationType]" + str(error), status=False)

    def setFilterAlpha(self, Alpha: float):
        try:
            self.N5172B.write(':SOURce:RADio:CUSTom:ALPHa %G' % Alpha)
            logger.write("[signalGenerator setFilterAlpha] Alpha= " + str(Alpha))
        except Exception as error:
            logger.write("[setFilterAlpha]" + str(error), status=False)

    def setSymbolRate(self, rate: float):
        try:
            rate = rate * 1000000
            self.N5172B.write(':SOURce:RADio:CUSTom:SRATe %G' % rate)
            logger.write("[signalGenerator setSymbolRate] rate= " + str(rate))
        except Exception as error:
            logger.write("[setSymbolRate]" + str(error), status=False)


class VSA:
    def __init__(self):
        self.IP = "localhost"
        self.isConncted = False

    def connect(self):
        try:
            self.rm = pyvisa.ResourceManager()
            try:
                self.v89601B = self.rm.open_resource('TCPIP0::' + str(self.IP) + '::hislip1::INSTR')
                self.v89601B.timeout = 80000
                logger.write("[VSA connect] connected")
                self.isConncted = True
            except:
                logger.write("[VSA connect] not connected")
                self.isConncted = False
        except Exception as error:
            logger.write("[VSA - connect]" + str(error), status=False)

    def close(self):
        try:
            if self.isConncted:
                self.v89601B.close()
                self.rm.close()
                self.isConncted = False
                logger.write("[VSA close]")
        except Exception as error:
            logger.write("[VSA - close]" + str(error), status=False)

    def loadSetup(self, recallSetup: str):
        try:
            self.v89601B.write(':MMEMory:LOAD:SETup "%s"' % recallSetup)
            logger.write("[VSA loadSetup] recallSetup= " + str(recallSetup))
        except Exception as error:
            logger.write("[loadSetup]" + str(error), status=False)

    def initiate(self):
        try:
            self.v89601B.write(':INITiate:IMMediate')
            logger.write("[VSA initiate]")
        except Exception as error:
            logger.write("[initiate]" + str(error), status=False)

    def pause(self):
        try:
            self.v89601B.write(':INITiate:PAUSe')
            logger.write("[VSA pause]")
        except Exception as error:
            logger.write("[pause]" + str(error), status=False)

    def savePng(self, nameOfPng: str):
        try:
            nameOfPng = nameOfPng.replace(".", "").replace(" ", "")
            destination = str(runningView.path_result_folder) + "VSA Images/" + str(nameOfPng) + ".png"
            path = os.path.abspath("")
            # self.v89601B.write('*cls')
            self.v89601B.write(':MMEMory:STORe:BITMap "%s","%s"' % (path + "/" + destination, 'png'))
            # self.v89601B.write('syst:err?')  # TO CHECK ERRORS
            # print(self.v89601B.read())

            logger.write("[VSA savePng] nameOfPng= " + str(nameOfPng))
            return destination
        except Exception as error:
            logger.write("[savePng]" + str(error), status=False)

    def getEVM(self):
        try:
            evm = self.v89601B.query_ascii_values(':TRACe3:DATA:TABLe:VALue? 1')
            logger.write("[VSA getEVM] EVM = " + str(evm))
            return evm[0]
        except Exception as error:
            logger.write("[getEVM] error: " + str(error), status=False)

    def getRef(self):
        try:
            temp_values = self.v89601B.query_ascii_values(':TRACe2:MARKer1:BANDwidth:POWer?')
            power = temp_values[0]
            logger.write("[VSA getRef] power= " + str(power))
            return power
        except Exception as error:
            logger.write("[getRef]" + str(error), status=False)


class RunningView:
    def __init__(self):
        gui.ex.tabWidget_Automation.setTabVisible(2, False)
        gui.ex.comboBox_automation_select_mode.currentIndexChanged.connect(lambda: threading.Thread(target=self.swap_mode).start())
        WriteStream.write(["pushButton_Tests_startTest.setEnabled", True])
        WriteStream.write(["pushButton_Tests_stopTest.setEnabled", False])

        WriteStream.write(["pushButton_Results_startTest.setEnabled", True])
        WriteStream.write(["pushButton_Results_stopTest.setEnabled", False])
        WriteStream.write(["pushButton_export.setEnabled", False])
        WriteStream.write(["pushButton_Results_Upload2Mongo.setEnabled", False])

        WriteStream.write(["comboBox_automation_select_mode.setEnabled", True])
        gui.ex.pushButton_Tests_startTest.clicked.connect(lambda: threading.Thread(target=self.run).start())
        gui.ex.pushButton_Tests_stopTest.clicked.connect(lambda: threading.Thread(target=self.stop).start())
        gui.ex.pushButton_load_old_results.clicked.connect(self.browser_load_old_results)
        gui.ex.pushButton_Results_startTest.clicked.connect(lambda: threading.Thread(target=self.run).start())
        gui.ex.pushButton_Results_stopTest.clicked.connect(lambda: threading.Thread(target=self.stop).start())
        gui.ex.pushButton_export.clicked.connect(lambda: threading.Thread(target=self.export).start())
        gui.ex.tableWidget_Results.doubleClicked.connect(lambda: threading.Thread(target=self.update_details_table).start())

        gui.ex.spinBox_Tests_costum_start.valueChanged.connect(lambda: threading.Thread(target=self.set_limits_spinboxs_costum_start).start())
        gui.ex.spinBox_Tests_costum_end.valueChanged.connect(lambda: threading.Thread(target=self.set_limits_spinboxs_costum_end).start())

        self.json_results = {}

        self.is_load_old_result = False

        self.path_result_folder = ""
        self.path_old_results = ""
        self.old_results = {}
        self.stop_test_clicked = False
        self.ps = None
        self.ps_connect = False

    def set_limits_spinboxs_costum_start(self):
        WriteStream.write(["spinBox_Tests_costum_end.setMinimum", int(gui.ex.spinBox_Tests_costum_start.value())])

    def set_limits_spinboxs_costum_end(self):
        WriteStream.write(["spinBox_Tests_costum_start.setMaximum", int(gui.ex.spinBox_Tests_costum_end.value())])

    def update_details_table(self):
        try:
            gui.ex.tableWidget_Details.setRowCount(0)

            current_row = int(gui.ex.tableWidget_Results.currentRow())

            if self.is_load_old_result:
                params = self.old_results[str(current_row)]
            else:
                params = self.json_results[current_row]

            if len(list(params["Results"].values())) == 0 if self.is_load_old_result else (len(self.json_results[current_row]["Results"]) == 0 if current_row in self.json_results.keys() else True):
                return

            WriteStream.write(["tabWidget_Automation.setCurrentIndex", 2])

            if str(gui.ex.comboBox_automation_select_mode.currentText()) == "TX":
                automation_tx.update_details_table(index_test=current_row, params=params)
            else:  # RX
                automation_rx.update_details_table(index_test=current_row, params=params)

        except Exception as error:
            logger.write("[RunningView] [update_details_table] error: " + str('{err}'.format(err=error)), status=False)

    def browser_load_old_results(self):
        try:
            self.path_old_results = QtWidgets.QFileDialog.getOpenFileName(filter="*.json", directory="")[0]

            WriteStream.write(["tableWidget_Results.setRowCount", 0])

            if len(self.path_old_results) == 0:
                return

            self.old_results = json.load(open(str(self.path_old_results), "r"))
            type_of_test_loaded = str(self.old_results["0"]["Type"])
            if type_of_test_loaded == "Dynamic Range" or type_of_test_loaded == "Sensitivity":
                gui.ex.comboBox_automation_select_mode.setCurrentIndex(1)
            else:
                gui.ex.comboBox_automation_select_mode.setCurrentIndex(0)

            WriteStream.write(["tableWidget_Results.setRowCount", int(len(self.old_results.keys()))])
            curr_index_test = 0
            all_tests = self.old_results.values()
            for curr_test in all_tests:
                action.set_vertical_header_item(obj="tableWidget_Results", text="Test " + str(curr_index_test + 1), index=curr_index_test, curr_params=curr_test, icon="v.png")
                runningView.table_result_set_cell(text=str(curr_test["Frequency"].replace(" ", "")), row=curr_index_test, col=0, enabled=False)
                if gui.ex.comboBox_automation_select_mode.currentText() == "TX":
                    if curr_test["Type"] == "Tx Power":
                        runningView.table_result_set_cell(text=curr_test["Results"]["Peak"], row=curr_index_test, col=1, enabled=False)
                    elif curr_test["Type"] == "ACPR":
                        runningView.table_result_set_cell(text=curr_test["Results"]["Power"], row=curr_index_test, col=1, enabled=False)
                    elif curr_test["Type"] == "Harmonics":
                        runningView.table_result_set_cell(text=curr_test["Results"]["H1"], row=curr_index_test, col=1, enabled=False)
                    elif curr_test["Type"] == "Spurious":
                        runningView.table_result_set_cell(text=curr_test["Results"]["Spurious"], row=curr_index_test, col=1, enabled=False)
                    elif curr_test["Type"] == "Frequency Accuracy":
                        runningView.table_result_set_cell(text=curr_test["Results"]["Amplitude"], row=curr_index_test, col=1, enabled=False)
                    elif curr_test["Type"] == "Attenuator":
                        runningView.table_result_set_cell(text=curr_test["Results"]["Param 1"], row=curr_index_test, col=1, enabled=False)
                    runningView.table_result_set_cell(text=curr_test["Voltage"], row=curr_index_test, col=2, enabled=False)
                    runningView.table_result_set_cell(text=curr_test["Current"], row=curr_index_test, col=3, enabled=False)
                    runningView.table_result_set_cell(text="Click For Results", row=curr_index_test, col=4, enabled=False)
                else:  # RX
                    if curr_test["Type"] == "Sensitivity":
                        runningView.table_result_set_cell(text=curr_test["Results"]["SNR"], row=curr_index_test, col=1, enabled=False)
                        runningView.table_result_set_cell(text=curr_test["Results"]["N_F"], row=curr_index_test, col=2, enabled=False)
                        runningView.table_result_set_cell(text=curr_test["Results"]["Gain"], row=curr_index_test, col=3, enabled=False)
                        runningView.table_result_set_cell(text=curr_test["Voltage"], row=curr_index_test, col=4, enabled=False)
                        runningView.table_result_set_cell(text=curr_test["Current"], row=curr_index_test, col=5, enabled=False)
                        runningView.table_result_set_cell(text="Click For Results", row=curr_index_test, col=6, enabled=False)
                curr_index_test += 1

            runningView.is_load_old_result = True

            short_path = self.path_old_results.split("/")
            WriteStream.write(["label_results_msg.setText", "Old results:\t\t\t" + str(short_path[-2] + "/" + str(short_path[-1]))])
            WriteStream.write(["pushButton_export.setEnabled", True])
        except Exception as error:
            logger.write("[browser_load_old_results] error:" + str('{err}'.format(err=error)), status=False)
            msg = QMessageBox()
            msg.setWindowTitle("Import Error")
            msg.setText("You imported invalid results")
            msg.setIcon(QMessageBox.Critical)
            msg.exec_()
            WriteStream.write(["tableWidget_Results.setRowCount", 0])

    def swap_mode(self):
        try:
            gui.ex.tableWidget_Results.setRowCount(0)
            table.load_tests_name()
        except Exception as error:
            logger.write("[swap_mode] error: " + str(error), status=False)

    def export(self):
        try:
            if self.is_load_old_result:
                self.json_results = json.load(open(str(runningView.path_old_results), "r"))

            if gui.ex.comboBox_automation_select_mode.currentText() == 'RX':
                try:
                    copyfile("Config/FormatResult_RX.xlsx", str(self.path_result_folder) + "FormatResult_RX.xlsx" if len(self.path_result_folder) > 0 else str(runningView.path_old_results).replace(".json", ".xlsx"))
                    excelBook = xlwings.Book(str(self.path_result_folder) + "FormatResult_RX.xlsx" if len(self.path_result_folder) > 0 else str(runningView.path_old_results).replace(".json", ".xlsx"))

                    tests_dict = {"Sensitivity": {"Counter": 2, "Pointer": excelBook.sheets("Sensitivity"), "Is_Exists": False},
                                  "Dynamic Range": {"Counter": 2, "Pointer": excelBook.sheets("Dynamic Range"), "Is_Exists": False}}
                    for test, details in self.json_results.items():
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 1).value = "Test " + str(int(test) + 1)  # Test Number
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 2).value = self.json_results[test]["Antena"]  # Antena
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 3).value = self.json_results[test]["Modulation"]  # Modulation
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 4).value = self.json_results[test]["Frequency"]  # Frequency
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 5).value = self.json_results[test]["Resource ID"]  # Resource ID
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 6).value = self.json_results[test]["RF PATH"]  # RF Path
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 7).value = self.json_results[test]["Route Mictor To"]  # Route Mictor To
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 8).value = self.json_results[test]["Amplitude"]  # Amplitude
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 9).value = self.json_results[test]["Filter Alpha"]  # Filter Alpha
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 10).value = self.json_results[test]["Symbol Rate"]  # Symbol Rate
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 11).value = self.json_results[test]["TX Attenuation"]  # TX Attenuation
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 12).value = self.json_results[test]["RX Gain Index"]  # RX Gain Index
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 13).value = self.json_results[test]["Recall Setup"]  # Recall Setup
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 14).value = self.json_results[test]["Current"]  # Current
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 15).value = self.json_results[test]["Voltage"]  # Voltage

                        if details["Type"] == "Sensitivity":
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 16).value = self.json_results[test]["Results"]["Cable_Loss"]  # Cable Loss
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 17).value = self.json_results[test]["Results"]["Noise_Floor"]  # Noise Floor
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 18).value = self.json_results[test]["Results"]["Signal_Power"]  # Signal Power
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 19).value = self.json_results[test]["Results"]["SNR"]  # SNR
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 20).value = self.json_results[test]["Results"]["EVM"]  # EVM
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 21).value = self.json_results[test]["Results"]["N_F"]  # N_F
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 22).value = self.json_results[test]["Results"]["BW"]  # BW
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 23).value = self.json_results[test]["Results"]["Gain"]  # Gain
                            tests_dict[details["Type"]]["Is_Exists"] = True

                        else:  # Dynamic Range
                            pass
                        tests_dict[details["Type"]]["Counter"] += 1
                    for key, value in tests_dict.items():
                        if not value["Is_Exists"]:
                            excelBook.sheets(key).delete()
                    excelBook.save()
                except Exception as error:
                    logger.write("[export - RX] error: " + str(error), status=False)

            else:  # TX mode
                try:
                    copyfile("Config/FormatResult_TX.xlsx", str(self.path_result_folder) + "FormatResult_TX.xlsx" if len(self.path_result_folder) > 0 else str(runningView.path_old_results).replace(".json", ".xlsx"))
                    excelBook = xlwings.Book(str(self.path_result_folder) + "FormatResult_TX.xlsx" if len(self.path_result_folder) > 0 else str(runningView.path_old_results).replace(".json", ".xlsx"))

                    tests_dict = {"Tx Power": {"Counter": 2, "Pointer": excelBook.sheets("Tx Power"), "Is_Exists": False},
                                  "ACPR": {"Counter": 2, "Pointer": excelBook.sheets("ACPR"), "Is_Exists": False},
                                  "Harmonics": {"Counter": 2, "Pointer": excelBook.sheets("Harmonics"), "Is_Exists": False},
                                  "Spurious": {"Counter": 2, "Pointer": excelBook.sheets("Spurious"), "Is_Exists": False},
                                  "Frequency Accuracy": {"Counter": 2, "Pointer": excelBook.sheets("Frequency Accuracy"), "Is_Exists": False},
                                  "Attenuator": {"Counter": 2, "Pointer": excelBook.sheets("Attenuator"), "Is_Exists": False}}
                    for test, details in self.json_results.items():
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 1).value = "Test " + str(int(test) + 1)  # Test Number
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 2).value = self.json_results[test]["Antena"]  # Antena
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 3).value = self.json_results[test]["Bandwidth"]  # Bandwidth
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 4).value = self.json_results[test]["Modulation"]  # Modulation
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 5).value = self.json_results[test]["Frequency"]  # Frequency
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 6).value = self.json_results[test]["Tx_Power"]  # Tx Power
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 7).value = self.json_results[test]["Tx Attenuation (RF)"]  # Tx Attenuation RF
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 8).value = self.json_results[test]["Tx Attenuation (Navassa)"]  # Tx Attenuation Navassa
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 9).value = self.json_results[test]["Resource ID"]  # Resource ID
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 10).value = self.json_results[test]["RF PATH"]  # RF Path
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 11).value = self.json_results[test]["Voltage"]  # Voltage
                        tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 12).value = self.json_results[test]["Current"]  # Current

                        if details["Type"] == "Tx Power":
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 13).value = self.json_results[test]["Results"]["Peak"]  # Peak
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 14).value = self.json_results[test]["Results"]["PeakToAvg"]  # Peak To Avg
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 15).value = self.json_results[test]["Results"]["AveragePower"]  # Average Power
                            tests_dict[details["Type"]]["Is_Exists"] = True

                        elif details["Type"] == "ACPR":
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 13).value = self.json_results[test]["Results"]["Power"]  # Power
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 14).value = self.json_results[test]["Results"]["Lower C"]  # Lower C
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 15).value = self.json_results[test]["Results"]["Lower B"]  # Lower B
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 16).value = self.json_results[test]["Results"]["Lower A"]  # Lower A
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 17).value = self.json_results[test]["Results"]["Upper A"]  # Upper A
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 18).value = self.json_results[test]["Results"]["Upper B"]  # Upper B
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 19).value = self.json_results[test]["Results"]["Upper C"]  # Upper C
                            tests_dict[details["Type"]]["Is_Exists"] = True

                        elif details["Type"] == "Harmonics":
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 13).value = self.json_results[test]["Results"]["H1"]  # H1
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 14).value = self.json_results[test]["Results"]["H2"]  # H2
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 15).value = self.json_results[test]["Results"]["H3"]  # H3
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 16).value = self.json_results[test]["Results"]["H4"]  # H4
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 17).value = self.json_results[test]["Results"]["H5"]  # H5
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 18).value = self.json_results[test]["Results"]["H6"]  # H6
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 19).value = self.json_results[test]["Results"]["H7"]  # H7
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 20).value = self.json_results[test]["Results"]["H8"]  # H8
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 21).value = self.json_results[test]["Results"]["H9"]  # H9
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 22).value = self.json_results[test]["Results"]["H10"]  # H10
                            tests_dict[details["Type"]]["Is_Exists"] = True

                        elif details["Type"] == "Spurious":
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 13).value = self.json_results[test]["Results"]["Spurious"]  # Spurious
                            tests_dict[details["Type"]]["Is_Exists"] = True

                        elif details["Type"] == "Frequency Accuracy":
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 13).value = self.json_results[test]["Results"]["Frequency Accuracy"]  # Frequency Accuracy
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 14).value = self.json_results[test]["Results"]["Amplitude Accuracy"]  # Amplitude Accuracy
                            tests_dict[details["Type"]]["Is_Exists"] = True

                        else:  # "Attenuator"
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 13).value = self.json_results[test]["Results"]["Param 1"]  # Param 1
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 14).value = self.json_results[test]["Results"]["Param 2"]  # Param 2
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 15).value = self.json_results[test]["Results"]["Param 3"]  # Param 3
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 16).value = self.json_results[test]["Results"]["Param 4"]  # Param 4
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 17).value = self.json_results[test]["Results"]["Param 5"]  # Param 5
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 18).value = self.json_results[test]["Results"]["Param 6"]  # Param 6
                            tests_dict[details["Type"]]["Pointer"].range(tests_dict[details["Type"]]["Counter"], 19).value = self.json_results[test]["Results"]["Param 7"]  # Param 7
                            tests_dict[details["Type"]]["Is_Exists"] = True

                        tests_dict[details["Type"]]["Counter"] += 1
                    for key, value in tests_dict.items():
                        if not value["Is_Exists"]:
                            excelBook.sheets(key).delete()
                    excelBook.save()
                except Exception as error:
                    logger.write("[export - TX] error: " + str(error), status=False)

        except Exception as error:
            logger.write("[export] error: " + str(error), status=False)

    def get_test_params(self, row):
        try:
            if gui.ex.comboBox_automation_select_mode.currentText() == "TX":
                return {
                    "Type": str(gui.ex.tableWidget_Tests.cellWidget(row, 0).currentText()),
                    "Antena": str(gui.ex.tableWidget_Tests.cellWidget(row, 1).currentText()),
                    "Modulation": str(gui.ex.tableWidget_Tests.cellWidget(row, 2).currentText()),
                    "Bandwidth": str(gui.ex.tableWidget_Tests.cellWidget(row, 3).currentText()),
                    "Frequency": str(float(gui.ex.tableWidget_Tests.cellWidget(row, 4).text())),
                    "Tx_Power": str(gui.ex.tableWidget_Tests.cellWidget(row, 5).currentText()),
                    "Tx Attenuation (RF)": str(gui.ex.tableWidget_Tests.cellWidget(row, 6).text()),
                    "Tx Attenuation (Navassa)": str(gui.ex.tableWidget_Tests.cellWidget(row, 7).text()),
                    "Resource ID": str(gui.ex.tableWidget_Tests.cellWidget(row, 8).currentText()),
                    "RF PATH": str(gui.ex.tableWidget_Tests.cellWidget(row, 9).currentText())
                }
            else:
                return {
                    "Type": str(gui.ex.tableWidget_Tests.cellWidget(row, 0).currentText()),
                    "Antena": str(gui.ex.tableWidget_Tests.cellWidget(row, 1).currentText()),
                    "Modulation": str(gui.ex.tableWidget_Tests.cellWidget(row, 2).currentText()),
                    "Frequency": str(float(gui.ex.tableWidget_Tests.cellWidget(row, 3).text())),
                    "Resource ID": str(gui.ex.tableWidget_Tests.cellWidget(row, 4).currentText()),
                    "RF PATH": str(gui.ex.tableWidget_Tests.cellWidget(row, 5).currentText()),
                    "Route Mictor To": str(gui.ex.tableWidget_Tests.cellWidget(row, 6).currentText()),
                    "Amplitude": str(gui.ex.tableWidget_Tests.cellWidget(row, 7).text()),
                    "Filter Alpha": str(gui.ex.tableWidget_Tests.cellWidget(row, 8).text()),
                    "Symbol Rate": str(gui.ex.tableWidget_Tests.cellWidget(row, 9).text()),
                    "TX Attenuation": str(gui.ex.tableWidget_Tests.cellWidget(row, 10).text()),
                    "RX Gain Index": str(gui.ex.tableWidget_Tests.cellWidget(row, 11).text()),
                    "Recall Setup": str(gui.ex.tableWidget_Tests.cellWidget(row, 12).currentText())
                }
        except Exception as error:
            try:
                if gui.ex.comboBox_automation_select_mode.currentText() == "TX":
                    return {
                        "Type": str(gui.ex.tableWidget_Tests.item(row, 0).text()),
                        "Antena": str(gui.ex.tableWidget_Tests.item(row, 1).text()),
                        "Modulation": str(gui.ex.tableWidget_Tests.item(row, 2).text()),
                        "Bandwidth": str(gui.ex.tableWidget_Tests.item(row, 3).text()),
                        "Frequency": str(gui.ex.tableWidget_Tests.item(row, 4).text()),
                        "Tx_Power": str(gui.ex.tableWidget_Tests.item(row, 5).text()),
                        "Tx Attenuation (RF)": str(gui.ex.tableWidget_Tests.item(row, 6).text()),
                        "Tx Attenuation (Navassa)": str(gui.ex.tableWidget_Tests.item(row, 7).text()),
                        "Resource ID": str(gui.ex.tableWidget_Tests.item(row, 8).text()),
                        "RF PATH": str(gui.ex.tableWidget_Tests.item(row, 9).text())
                    }
                else:
                    return {
                        "Type": str(gui.ex.tableWidget_Tests.item(row, 0).text()),
                        "Antena": str(gui.ex.tableWidget_Tests.item(row, 1).text()),
                        "Modulation": str(gui.ex.tableWidget_Tests.item(row, 2).text()),
                        "Frequency": str(gui.ex.tableWidget_Tests.item(row, 3).text()),
                        "Resource ID": str(gui.ex.tableWidget_Tests.item(row, 4).text()),
                        "RF PATH": str(gui.ex.tableWidget_Tests.item(row, 5).text()),
                        "Route Mictor To": str(gui.ex.tableWidget_Tests.item(row, 6).text()),
                        "Amplitude": str(gui.ex.tableWidget_Tests.item(row, 7).text()),
                        "Filter Alpha": str(gui.ex.tableWidget_Tests.item(row, 8).text()),
                        "Symbol Rate": str(gui.ex.tableWidget_Tests.item(row, 9).text()),
                        "TX Attenuation": str(gui.ex.tableWidget_Tests.item(row, 10).text()),
                        "RX Gain Index": str(gui.ex.tableWidget_Tests.item(row, 11).text()),
                        "Recall Setup": str(gui.ex.tableWidget_Tests.item(row, 12).text())
                    }
            except Exception as error:
                logger.write("[get_test_params] error: " + str(error), status=False)

    def create_result_folder(self):
        try:
            currNow = datetime.datetime.now()
            currDate = currNow.strftime("%d.%m.%y")
            currTime = currNow.strftime("%H-%M-%S")

            self.path_result_folder = "Files/Automation/Results/(" + str(currDate) + ") " + str(currTime) + " " + str(str(gui.ex.comboBox_Tests_loadFilesName.currentText())) + "/"
            os.makedirs(self.path_result_folder)
            os.makedirs(self.path_result_folder + ("/Spectrum Images" if gui.ex.comboBox_automation_select_mode.currentText() == "TX" else "/VSA Images"))
            logger.write(msg="Create folder result: " + str(self.path_result_folder))

        except Exception as error:
            logger.write("[create_result_folder] error: " + str('{err}'.format(err=error)), status=False)

    def stop(self):
        try:
            logger.write(msg="Tests stoped")

            self.stop_test_clicked = True

            WriteStream.write(["pushButton_Tests_stopTest.setEnabled", False])
            WriteStream.write(["pushButton_Results_stopTest.setEnabled", False])
        except Exception as error:
            logger.write("[stop] error: " + str(error), status=False)

    def run(self):
        try:
            logger.write("[run] Test Name: " + str(gui.ex.comboBox_Tests_loadFilesName.currentText()))
            logger.write(msg="Start run tests")

            WriteStream.write(["comboBox_automation_select_mode.setEnabled", False])
            WriteStream.write(["pushButton_Tests_startTest.setEnabled", False])
            WriteStream.write(["pushButton_Results_startTest.setEnabled", False])
            WriteStream.write(["pushButton_load_old_results.setEnabled", False])
            WriteStream.write(["pushButton_export.setEnabled", False])
            WriteStream.write(["label_results_msg.setText", "Current results:"])
            WriteStream.write(["tableWidget_Results.setRowCount", gui.ex.tableWidget_Tests.rowCount()])

            self.is_load_old_result = False
            self.create_result_folder()
            self.json_results = {}
            self.stop_test_clicked = False

            self.PS_IP = str(gui.ex.lineEdit_Configuration_power_supply_ip.text())
            self.PS_PORT = int(gui.ex.lineEdit_Configuration_power_supply_port.text())
            try:
                if self.ps is None:
                    self.ps = PS(IP=self.PS_IP, Port=self.PS_PORT)
                    self.ps.connect()
                    self.ps_connect = True if self.ps.connect() else False

            except Exception as error:
                logger.write("[run]ps not connect" + str(error), status=False)
                return False
            index_test = 0

            for index_test in range(0, int(gui.ex.tableWidget_Tests.rowCount()), 1):
                curr_params = self.get_test_params(index_test)
                action.set_vertical_header_item(obj="tableWidget_Results", text="Test " + str(index_test + 1) + ": waitting", index=index_test, curr_params=curr_params, icon="clock.png")

                for col in range(0, int(gui.ex.tableWidget_Tests.columnCount()), 1):
                    self.table_result_set_cell(text=" ", row=index_test, col=col, enabled=False)

            index_start = int(gui.ex.spinBox_Tests_costum_start.text()) - 1
            index_end = int(gui.ex.spinBox_Tests_costum_end.text()) - 1

            logger.write("\n->>>>>>>>>> start Phy Tester\n")
            logger.write("[start] [index_start " + str(index_start) + "] [index_end " + str(index_end) + "]")

            WriteStream.write(["tabWidget_Automation.setCurrentIndex", 1])

            for i in range(0, index_start, 1):
                curr_params = self.get_test_params(i)
                action.set_vertical_header_item(obj="tableWidget_Results", text="Test " + str(i + 1) + ": Skipped", index=i, curr_params=curr_params, icon="x.png")
            for i in range(index_end + 1, gui.ex.tableWidget_Tests.rowCount(), 1):
                curr_params = self.get_test_params(i)
                action.set_vertical_header_item(obj="tableWidget_Results", text="Test " + str(i + 1) + ": Skipped", index=i, curr_params=curr_params, icon="x.png")

            index_test = index_start

            time.sleep(1)

            while index_test <= index_end:
                if self.stop_test_clicked:

                    while index_test <= index_end:
                        curr_params = self.get_test_params(row=index_test)
                        action.set_vertical_header_item(obj="tableWidget_Results", text="Test " + str(index_test + 1) + ": Cancelled", index=index_test, curr_params=curr_params, icon="(-.png")
                        index_test += 1
                    break

                # start test ..
                logger.write("[index_test " + str(index_test) + "] start test ..")
                WriteStream.write(["pushButton_Tests_stopTest.setEnabled", True])
                WriteStream.write(["pushButton_Results_stopTest.setEnabled", True])
                curr_params = self.get_test_params(row=index_test)
                action.set_vertical_header_item(obj="tableWidget_Results", text="Test " + str(index_test + 1) + ": Running", index=index_test, curr_params=curr_params, icon="-).png")
                if gui.ex.comboBox_automation_select_mode.currentText() == "RX":
                    status = automation_rx.run(index_test=index_test)
                else:  # TX
                    status = automation_tx.run(index_test=index_test)
                    automation_tx.resetSPECTRUM()
                curr_params = self.get_test_params(row=index_test)
                action.set_vertical_header_item(obj="tableWidget_Results", text="Test " + str(index_test + 1) + (": Valid" if status else ": Invalid"), index=index_test, curr_params=curr_params, icon="v.png" if status else "stop_exit_removerelete_sto_11059.ico")
                self.update_json_results_file()
                WriteStream.write(["pushButton_export.setEnabled", True])
                index_test += 1

            self.run_return()

            logger.write("self.json_results = " + str(self.json_results))

            self.update_json_results_file()
            return True
        except Exception as error:
            logger.write("[Running View - run] error: " + str('{err}'.format(err=error)), status=False)
            return False

    def run_return(self):
        try:
            WriteStream.write(["pushButton_Tests_stopTest.setEnabled", False])
            WriteStream.write(["pushButton_Tests_startTest.setEnabled", True])

            WriteStream.write(["pushButton_Results_stopTest.setEnabled", False])
            WriteStream.write(["pushButton_Results_startTest.setEnabled", True])

            WriteStream.write(["pushButton_load_old_results.setEnabled", True])
            WriteStream.write(["pushButton_export.setEnabled", True])

            WriteStream.write(["comboBox_automation_select_mode.setEnabled", True])
        except Exception as error:
            logger.write("[run_return] error: " + str(error), status=False)

    def update_json_results_file(self):
        try:
            with open(str(self.path_result_folder) + "results.json", 'w') as fp:
                json.dump(self.json_results, fp, indent=2)

        except Exception as error:
            logger.write("[update_json_results_file] error: " + str('{err}'.format(err=error)), status=False)

    def table_result_set_cell(self, text, row, col, color_text=None, color_background=None, center=True, enabled=True, icon=None):
        try:
            item = QtWidgets.QTableWidgetItem(str(text))

            if color_text is not None:
                brush_foreground = eval("QtGui.QBrush(QtGui.QColor" + str(color_text) + ")")
                brush_foreground.setStyle(QtCore.Qt.SolidPattern)
                item.setForeground(brush_foreground)

            if color_background is not None:
                brush_background = eval("QtGui.QBrush(QtGui.QColor" + str(color_background) + ")")
                brush_background.setStyle(QtCore.Qt.SolidPattern)
                item.setBackground(brush_background)

            if icon is not None:
                ico = QtGui.QIcon()
                # eval("icon.addPixmap(QtGui.QPixmap(\"" + str(icon) + "\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)")
                # item.setIcon(ico)
                ico.addPixmap(QtGui.QPixmap(":/img/img/detail.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                item.setIcon(ico)

            if center:
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)

            if not enabled:
                item.setFlags(QtCore.Qt.ItemIsEnabled)

            WriteStream.write(["tableWidget_Results" + ".setItem", row, col, item])

        except Exception as error:
            logger.write("table_result_set_cell] error: " + str('{err}'.format(err=error)), status=False)

    def table_details_table_set_cell(self, text, row, col, color_text=None, color_background=None, center=True, enabled=True, icon=None):
        try:
            item = QtWidgets.QTableWidgetItem(str(text))

            if color_text is not None:
                brush_foreground = eval("QtGui.QBrush(QtGui.QColor" + str(color_text) + ")")
                brush_foreground.setStyle(QtCore.Qt.SolidPattern)
                item.setForeground(brush_foreground)

            if color_background is not None:
                brush_background = eval("QtGui.QBrush(QtGui.QColor" + str(color_background) + ")")
                brush_background.setStyle(QtCore.Qt.SolidPattern)
                item.setBackground(brush_background)

            if icon is not None:
                ico = QtGui.QIcon()
                # eval("icon.addPixmap(QtGui.QPixmap(\"" + str(icon) + "\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)")
                # item.setIcon(ico)
                ico.addPixmap(QtGui.QPixmap(":/img/img/clock.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                item.setIcon(ico)

            if center:
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)

            if not enabled:
                item.setFlags(QtCore.Qt.ItemIsEnabled)

            WriteStream.write(["tableWidget_Details_titles.setItem", row, col, item])

        except Exception as error:
            logger.write("table_details_table_set_cell] error: " + str('{err}'.format(err=error)), status=False)

    def table_details_set_cell(self, text, row, col, color_text=None, color_background=None, center=True, enabled=True, icon=None, tooltip=None):
        try:
            item = QtWidgets.QTableWidgetItem(str(text))

            if tooltip is not None:
                item.setToolTip("More Spurious results  are in JSON and EXCEL")

            if color_text is not None:
                brush_foreground = eval("QtGui.QBrush(QtGui.QColor" + str(color_text) + ")")
                brush_foreground.setStyle(QtCore.Qt.SolidPattern)
                item.setForeground(brush_foreground)

            if color_background is not None:
                brush_background = eval("QtGui.QBrush(QtGui.QColor" + str(color_background) + ")")
                brush_background.setStyle(QtCore.Qt.SolidPattern)
                item.setBackground(brush_background)

            if icon is not None:
                ico = QtGui.QIcon()
                # eval("icon.addPixmap(QtGui.QPixmap(\"" + str(icon) + "\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)")
                # item.setIcon(ico)
                ico.addPixmap(QtGui.QPixmap(":/img/img/clock.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                item.setIcon(ico)

            if center:
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter | QtCore.Qt.AlignCenter)

            if not enabled:
                item.setFlags(QtCore.Qt.ItemIsEnabled)

            WriteStream.write(["tableWidget_Details.setItem", row, col, item])

        except Exception as error:
            logger.write("table_details_set_cell] error: " + str('{err}'.format(err=error)), status=False)

    def getAmplitudeFromJSON(self, frequency, stream):
        offsets = json.load(open("Config/Offsets.json", "r"))
        curr_antena = offsets["Antena_" + stream]
        frequencys = [float(x) for x in curr_antena["Frequency"].keys()]
        closest_freq = frequencys[min(range(len(frequencys)), key=lambda i: abs(frequencys[i] - float(frequency)))]

        return float(curr_antena["Frequency"][str(closest_freq)]["Peak"]["ATT_0"]) * -1.0


class Table:
    def __init__(self):
        gui.ex.tableWidget_Tests.horizontalHeader().setVisible(True)
        header = gui.ex.tableWidget_Tests.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(5, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(6, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(7, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(8, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(9, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(10, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(11, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(12, QtWidgets.QHeaderView.Stretch)
        header.setSectionResizeMode(13, QtWidgets.QHeaderView.Stretch)
        self.load_tests_name()

        gui.ex.comboBox_Tests_loadFilesName.blockSignals(True)
        gui.ex.comboBox_Tests_loadFilesName.currentIndexChanged.connect(self.load_test)

        gui.ex.pushButton_Tests_createNewFile.clicked.connect(lambda: self.create_file())

        gui.ex.pushButton_Tests_addNewLine.clicked.connect(lambda: self.add_row())
        gui.ex.pushButton_Tests_deleteLine.clicked.connect(lambda: self.delete_row())

        gui.ex.pushButton_Tests_copyLine.clicked.connect(lambda: self.copy_row())
        gui.ex.pushButton_Tests_pasteLine.clicked.connect(lambda: self.paste_row())

        gui.ex.pushButton_Tests_saveChange.clicked.connect(lambda: threading.Thread(target=self.save).start())

        self.copy_row_params = {}

        self.load_test()

        threading.Thread(target=self.releaseSignals).start()

    def releaseSignals(self):
        try:
            time.sleep(1)
            gui.ex.comboBox_Tests_loadFilesName.blockSignals(False)
        except Exception as error:
            logger.write("[releaseSignals] error: " + str(error), status=False)

    def save(self):
        try:
            if gui.ex.tableWidget_Tests.rowCount() == 0:
                return

            params = {}
            for i in range(0, gui.ex.tableWidget_Tests.rowCount(), 1):
                params[i] = runningView.get_test_params(row=i)

            with open("Files/Automation/Tests/" + str(gui.ex.comboBox_automation_select_mode.currentText()) + "_Mode/" + str(gui.ex.comboBox_Tests_loadFilesName.currentText()) + ".json", 'w') as fp:
                json.dump(params, fp, indent=2)

            icon_ok = QtGui.QIcon()
            icon_ok.addPixmap(QtGui.QPixmap("./Files/Automation/Pictures/ok.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            gui.ex.pushButton_Tests_saveChange.setIcon(icon_ok)

            time.sleep(0.4)

            icon_ok = QtGui.QIcon()
            icon_ok.addPixmap(QtGui.QPixmap("./Files/Automation/Pictures/Paomedia-Small-N-Flat-Floppy.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            gui.ex.pushButton_Tests_saveChange.setIcon(icon_ok)

            logger.write("Test name: " + str(gui.ex.comboBox_Tests_loadFilesName.currentText()) + " - Saved!")

        except Exception as error:
            logger.write("[save] error: " + str(error), status=False)

    def load_test(self):
        try:
            json_file = open("Files/Automation/Tests/" + gui.ex.comboBox_automation_select_mode.currentText() + "_Mode/" + str(gui.ex.comboBox_Tests_loadFilesName.currentText()) + ".json", "r")
            curr_test = json.load(json_file)  # type of json

            gui.ex.tableWidget_Tests.setRowCount(0)
            gui.ex.tableWidget_Tests.setRowCount(len(curr_test))

            row_index = 0

            for test in curr_test:
                _Type = str(curr_test[str(row_index)]["Type"])
                _Antena = str(curr_test[str(row_index)]["Antena"])
                _Modulation = str(curr_test[str(row_index)]["Modulation"])
                _Frequency = str(curr_test[str(row_index)]["Frequency"])
                _Resource_ID = str(curr_test[str(row_index)]["Resource ID"])
                _RF_PATH = str(curr_test[str(row_index)]["RF PATH"])
                if gui.ex.comboBox_automation_select_mode.currentText() == "TX":
                    _Bandwidth = str(curr_test[str(row_index)]["Bandwidth"])
                    _Tx_Power = str(curr_test[str(row_index)]["Tx_Power"])
                    _Tx_Attenuation_RF = str(curr_test[str(row_index)]["Tx Attenuation (RF)"])
                    _Tx_Attenuation_Navassa = str(curr_test[str(row_index)]["Tx Attenuation (Navassa)"])

                    if len(curr_test) > 100:

                        col_index = 0
                        for i in [_Type, _Antena, _Modulation, _Bandwidth, _Frequency, _Tx_Power, _Tx_Attenuation_RF, _Tx_Attenuation_Navassa, _Resource_ID, _RF_PATH]:
                            item = QtWidgets.QTableWidgetItem(str(i))
                            item.setTextAlignment(Qt.AlignHCenter)
                            gui.ex.tableWidget_Tests.setItem(row_index, col_index, item)
                            col_index += 1
                    else:
                        self.insert_row(row_index=row_index, _Type=_Type, _Antena=_Antena, _Modulation=_Modulation, _Bandwidth=_Bandwidth,
                                        _Frequency=_Frequency, _Tx_Power=_Tx_Power, _Tx_Attenuation_RF=_Tx_Attenuation_RF, _Tx_Attenuation_Navassa=_Tx_Attenuation_Navassa,
                                        _Resource_ID=_Resource_ID, _RF_PATH=_RF_PATH)
                else:
                    _routeMictorTo = str(curr_test[str(row_index)]["Route Mictor To"])
                    _Amplitude = str(curr_test[str(row_index)]["Amplitude"])
                    _FilterAlpha = str(curr_test[str(row_index)]["Filter Alpha"])
                    _SymbolRate = str(curr_test[str(row_index)]["Symbol Rate"])
                    _RecallSetup = str(curr_test[str(row_index)]["Recall Setup"])
                    _txAttenuation = str(curr_test[str(row_index)]["TX Attenuation"])
                    _rxGainIndex = str(curr_test[str(row_index)]["RX Gain Index"])

                    if len(curr_test) > 100:

                        col_index = 0
                        for i in [_Type, _Antena, _Modulation, _Frequency, _Resource_ID, _RF_PATH, _routeMictorTo, _Amplitude, _FilterAlpha, _SymbolRate, _txAttenuation, _rxGainIndex, _RecallSetup]:
                            item = QtWidgets.QTableWidgetItem(str(i))
                            item.setTextAlignment(Qt.AlignHCenter)
                            gui.ex.tableWidget_Tests.setItem(row_index, col_index, item)
                            col_index += 1
                    else:
                        self.insert_row(row_index=row_index, _Type=_Type, _Antena=_Antena, _Modulation=_Modulation, _routeMictorTo=_routeMictorTo,
                                        _Frequency=_Frequency, _Amplitude=_Amplitude, _FilterAlpha=_FilterAlpha, _SymbolRate=_SymbolRate, _RecallSetup=_RecallSetup,
                                        _txAttenuation=_txAttenuation, _RF_PATH=_RF_PATH, _Resource_ID=_Resource_ID, _rxGainIndex=_rxGainIndex)

                row_index += 1

            WriteStream.write(["spinBox_Tests_costum_start.setMaximum", int(gui.ex.tableWidget_Tests.rowCount()) if gui.ex.tableWidget_Tests.rowCount() > 0 else 1])
            WriteStream.write(["spinBox_Tests_costum_end.setMaximum", int(len(curr_test)) if int(len(curr_test)) > 0 else 1])

            WriteStream.write(["spinBox_Tests_costum_start.setValue", 1])
            WriteStream.write(["spinBox_Tests_costum_end.setValue", int(len(curr_test))])

        except Exception as error:
            logger.write("[load_test] error:" + str('{err}'.format(err=error)), status=False)
            gui.ex.tableWidget_Tests.setRowCount(0)

    def load_tests_name(self):
        try:
            self.update_tables_test_columns()

            gui.ex.comboBox_Tests_loadFilesName.clear()
            gui.ex.tableWidget_Tests.hide()

            time.sleep(0.3)

            for name in os.listdir("Files/Automation/Tests/" + gui.ex.comboBox_automation_select_mode.currentText() + "_Mode"):
                if ".json" in name:
                    gui.ex.comboBox_Tests_loadFilesName.addItem(str(name).replace(".json", ""))
            gui.ex.comboBox_Tests_loadFilesName.setCurrentIndex(0)
            gui.ex.tableWidget_Tests.show()

        except Exception as error:
            logger.write("[load_tests_name] error:" + str('{err}'.format(err=error)), status=False)

    def update_tables_test_columns(self):
        try:
            ###### Tests

            gui.ex.tableWidget_Tests.horizontalHeader().setVisible(True)
            gui.ex.tableWidget_Tests.setColumnCount(0)

            if str(gui.ex.comboBox_automation_select_mode.currentText()) == "TX":
                gui.ex.tableWidget_Tests.setColumnCount(10)
                gui.ex.tableWidget_Tests.setHorizontalHeaderLabels(["Type", "Antena", "Modulation", "Bandwidth", "Frequency (MHz)", "Tx_Power", "Tx Attenuation (RF) [dbm]", "Tx Attenuation (Navassa)",
                                                                    "Resource ID", "RF PATH"])
                WriteStream.write(["tableWidget_Tests.horizontalHeader()", 10])
            else:
                gui.ex.tableWidget_Tests.setColumnCount(13)
                gui.ex.tableWidget_Tests.setHorizontalHeaderLabels(["Type", "Antena", "Modulation", "Frequency (MHz)", "Resource ID", "RF PATH", "Route Mictor To", "Amplitude", "Filter Alpha",
                                                                    "Symbol Rate", "TX Attenuation", "RX Gain Index", "Recall Setup"])
                WriteStream.write(["tableWidget_Tests.horizontalHeader()", 13])

            ###### Results

            gui.ex.tableWidget_Results.horizontalHeader().setVisible(True)
            gui.ex.tableWidget_Results.setColumnCount(0)

            if str(gui.ex.comboBox_automation_select_mode.currentText()) == "TX":
                column_count = 5
                header_labels = ["Frequency [MHz]", "Power [dbm]", "Voltage", "Current", "Details"]

                gui.ex.tableWidget_Results.setColumnCount(column_count)
                gui.ex.tableWidget_Results.setHorizontalHeaderLabels(header_labels)
                WriteStream.write(["tableWidget_Results.horizontalHeader()", column_count])

            else:
                column_count = 7
                header_labels = ["Frequency [MHz]", "SNR", "N_F", "Gain", "Voltage", "Current", "Details"]

                gui.ex.tableWidget_Results.setColumnCount(column_count)
                gui.ex.tableWidget_Results.setHorizontalHeaderLabels(header_labels)
                WriteStream.write(["tableWidget_Results.horizontalHeader()", column_count])

            ###### Details

            gui.ex.tableWidget_Details_titles.horizontalHeader().setVisible(True)
            gui.ex.tableWidget_Details_titles.setColumnCount(0)

            if str(gui.ex.comboBox_automation_select_mode.currentText()) == "TX":
                gui.ex.tableWidget_Details_titles.setColumnCount(10)
                gui.ex.tableWidget_Details_titles.setHorizontalHeaderLabels(["Type", "Antena", "Modulation", "Bandwidth", "Frequency", "Tx_Power", "Tx Attenuation (RF)", "Tx Attenuation (Navassa)",
                                                                             "Resource ID", "RF PATH"])
                WriteStream.write(["tableWidget_Details_titles.horizontalHeader()", 10])
            else:
                gui.ex.tableWidget_Details_titles.setColumnCount(13)
                gui.ex.tableWidget_Details_titles.setHorizontalHeaderLabels(["Type", "Antena", "Modulation", "Frequency", "Resource ID", "RF PATH", "Route Mictor To", "Amplitude", "Filter Alpha",
                                                                             "Symbol Rate", "TX Attenuation", "RX Gain Index", "Recall Setup"])
                WriteStream.write(["tableWidget_Details_titles.horizontalHeader()", 13])

        except Exception as error:
            logger.write("[update_tables_test_columns] error: " + str(error), status=False)

    def create_file(self):
        try:
            file_name = str(gui.ex.lineEdit_Tests_createNewFile.text()) + ".json"
            if os.path.isfile("Files/Automation/Tests/" + str(gui.ex.comboBox_automation_select_mode.currentText()) + "_Mode/" + str(file_name)):
                logger.write("Error creating new file: The file name exists")
                return
            file = open("Files/Automation/Tests/" + str(gui.ex.comboBox_automation_select_mode.currentText()) + "_Mode/" + str(file_name), "w")
            file.write("{}")
            file.close()
            logger.write("The file was successfully created. start config..")

            gui.ex.comboBox_Tests_loadFilesName.addItem(str(file_name).replace(".json", ""))
            gui.ex.comboBox_Tests_loadFilesName.setCurrentText(str(file_name).replace(".json", ""))
            self.load_test()

        except Exception as error:
            logger.write("[create_file] error: " + str('{err}'.format(err=error)), status=False)
            return

    def add_row(self):
        try:
            # row_index = gui.ex.tableWidget_Tests.rowCount()
            curr_row = gui.ex.tableWidget_Tests.currentRow()
            if curr_row == -1:
                curr_row = gui.ex.tableWidget_Tests.rowCount() - 1

            gui.ex.tableWidget_Tests.insertRow(curr_row + 1)
            if gui.ex.comboBox_automation_select_mode.currentText() == "TX":
                self.insert_row(row_index=curr_row + 1, _Type="", _Antena="", _Modulation="", _Bandwidth="",
                                _Frequency="230 MHz", _Tx_Power="", _Tx_Attenuation_RF="3F", _Tx_Attenuation_Navassa="30",
                                _Resource_ID="", _RF_PATH="", addRow=True)
            else:
                self.insert_row(row_index=curr_row + 1, _Type="", _Antena="", _Modulation="", _routeMictorTo="",
                                _Frequency="230 MHz", _Amplitude=30, _FilterAlpha="0", _SymbolRate=0.0, _RecallSetup="",
                                _txAttenuation=30, _RF_PATH="", _Resource_ID="", _rxGainIndex="255", addRow=True)

            if gui.ex.tableWidget_Tests.rowCount() - 1 == curr_row + 1:
                gui.ex.tableWidget_Tests.scrollToBottom()
                gui.ex.tableWidget_Tests.setCurrentCell(int(gui.ex.tableWidget_Tests.rowCount() - 1), 0)

            WriteStream.write(["spinBox_Tests_costum_start.setMaximum", int(gui.ex.tableWidget_Tests.rowCount()) if gui.ex.tableWidget_Tests.rowCount() > 0 else 1])
            WriteStream.write(["spinBox_Tests_costum_end.setMaximum", int(gui.ex.tableWidget_Tests.rowCount()) if gui.ex.tableWidget_Tests.rowCount() > 0 else 1])
            WriteStream.write(["spinBox_Tests_costum_end.setValue", int(gui.ex.tableWidget_Tests.rowCount())])

        except Exception as error:
            logger.write("[add_row] error: " + str('{err}'.format(err=error)), status=False)

    def delete_row(self):
        try:
            if gui.ex.tableWidget_Tests.rowCount() == 1:
                logger.write(msg="Delete row error: There must be at least one test")
                return

            curr_row = gui.ex.tableWidget_Tests.currentRow()
            if curr_row == -1:
                curr_row = gui.ex.tableWidget_Tests.rowCount() - 1

            gui.ex.tableWidget_Tests.removeRow(curr_row)
            # gui.ex.tableWidget_Tests.scrollToBottom()

            WriteStream.write(["spinBox_Tests_costum_start.setMaximum", int(gui.ex.tableWidget_Tests.rowCount()) if gui.ex.tableWidget_Tests.rowCount() > 0 else 1])
            WriteStream.write(["spinBox_Tests_costum_end.setMaximum", int(gui.ex.tableWidget_Tests.rowCount()) if gui.ex.tableWidget_Tests.rowCount() > 0 else 1])
            WriteStream.write(["spinBox_Tests_costum_end.setValue", int(gui.ex.tableWidget_Tests.rowCount())])

        except Exception as error:
            logger.write("[delete_row] error: " + str('{err}'.format(err=error)), status=False)

    def copy_row(self):
        try:
            curr_row = gui.ex.tableWidget_Tests.currentRow()
            if curr_row == -1:
                logger.write(msg="Choose test to copy")
                return
            self.copy_row_params = runningView.get_test_params(row=curr_row)
            logger.write(msg="Test " + str(curr_row + 1) + " selected")
        except Exception as error:
            logger.write("[copy_row] error: " + str('{err}'.format(err=error)), status=False)

    def paste_row(self):
        try:
            if len(self.copy_row_params) == 0:
                logger.write(msg="Choose test to paste")
                return
            # row_index = gui.ex.tableWidget_Tests.rowCount()
            curr_row = gui.ex.tableWidget_Tests.currentRow()
            gui.ex.tableWidget_Tests.insertRow(curr_row + 1)

            if gui.ex.comboBox_automation_select_mode.currentText() == "TX":
                self.insert_row(row_index=curr_row + 1, _Type=self.copy_row_params["Type"], _Antena=self.copy_row_params["Antena"], _Modulation=self.copy_row_params["Modulation"], _Bandwidth=self.copy_row_params["Bandwidth"],
                                _Frequency=self.copy_row_params["Frequency"], _Tx_Power=self.copy_row_params["Tx_Power"], _Tx_Attenuation_RF=self.copy_row_params["Tx Attenuation (RF)"],
                                _Tx_Attenuation_Navassa=self.copy_row_params["Tx Attenuation (Navassa)"],
                                _Resource_ID=self.copy_row_params["Resource ID"], _RF_PATH=self.copy_row_params["RF PATH"], addRow=True)
            else:  # RX
                self.insert_row(row_index=curr_row + 1, _Type=self.copy_row_params["Type"], _Antena=self.copy_row_params["Antena"], _Modulation=self.copy_row_params["Modulation"], _routeMictorTo=self.copy_row_params["Route Mictor To"],
                                _Frequency=self.copy_row_params["Frequency"], _Amplitude=self.copy_row_params["Amplitude"], _FilterAlpha=self.copy_row_params["Filter Alpha"], _SymbolRate=self.copy_row_params["Symbol Rate"],
                                _RecallSetup=self.copy_row_params["Recall Setup"], _txAttenuation=self.copy_row_params["TX Attenuation"], _RF_PATH=self.copy_row_params["RF PATH"],
                                _Resource_ID=self.copy_row_params["Resource ID"], _rxGainIndex=self.copy_row_params["RX Gain Index"], addRow=True)
            if gui.ex.tableWidget_Tests.rowCount() - 1 == curr_row + 1:
                gui.ex.tableWidget_Tests.scrollToBottom()
                gui.ex.tableWidget_Tests.setCurrentCell(int(gui.ex.tableWidget_Tests.rowCount() - 1), 0)

        except Exception as error:
            logger.write("[paste_row] error: " + str('{err}'.format(err=error)), status=False)

    def insert_row(self, row_index=-1, _Type="", _Antena="", _Modulation="", _Bandwidth="", _Frequency="", _Tx_Power="", _Tx_Attenuation_RF="",
                   _Tx_Attenuation_Navassa="", _Resource_ID="", _RF_PATH="", _txAttenuation=0, _routeMictorTo="",
                   _FilterAlpha="", _Amplitude=30, _SymbolRate=0.0, _RecallSetup="", _rxGainIndex="", addRow=False):
        try:
            item = QtWidgets.QTableWidgetItem("Test " + str(row_index + 1) + ":" if not addRow else "Test")
            WriteStream.write(["tableWidget_Tests.setVerticalHeaderItem", row_index, item])

            self.insert_type(_Type, row_index)
            self.insert_Antena(_Antena, row_index)
            self.insert_Modulation(_Modulation, row_index)
            self.insert_Frequency(_Frequency, row_index)
            self.insert_Resource_ID(_Resource_ID, row_index)
            self.insert_RF_PATH(_RF_PATH, row_index)
            if gui.ex.comboBox_automation_select_mode.currentText() == "TX":
                self.insert_Tx_Power(_Tx_Power, row_index)
                self.insert_Tx_Attenuation_RF(_Tx_Attenuation_RF, row_index)
                self.insert_Bandwidth(_Bandwidth, row_index)
                self.insert_Tx_Attenuation_Navassa(_Tx_Attenuation_Navassa, row_index)
            else:
                self.insert_Tx_Attenuation(_txAttenuation, row_index)
                self.insert_routeMictorTo(_routeMictorTo, row_index)
                self.insert_FilterAlpha(_FilterAlpha, row_index)
                self.insert_Amplitude(_Amplitude, row_index)
                self.insert_SymbolRate(_SymbolRate, row_index)
                self.insert_RecallSetup(_RecallSetup, row_index)
                self.insert_rxGainIndex(_rxGainIndex, row_index)

        except Exception as error:
            logger.write("[insert_row] error:" + str('{err}'.format(err=error)), status=False)

    def insert_type(self, _Type, row_index):
        try:
            comboBox_Type = QtWidgets.QComboBox()
            if gui.ex.comboBox_automation_select_mode.currentText() == "TX":
                comboBox_Type.addItems(["Tx Power", "ACPR", "Harmonics", "Spurious", "Frequency Accuracy"])
            else:
                comboBox_Type.addItems(["Sensitivity"])
            if row_index % 2 != 0:
                comboBox_Type.setStyleSheet("background-color: rgb(211, 211, 211);")
            comboBox_Type.setCurrentText(_Type)
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 0, comboBox_Type)
        except Exception as error:
            logger.write("[insert_type] error:" + str('{err}'.format(err=error)), status=False)

    def insert_Antena(self, _Antena, row_index):
        try:
            comboBox_Antena = QtWidgets.QComboBox()
            comboBox_Antena.addItems(["1", "2"])
            if row_index % 2 != 0:
                comboBox_Antena.setStyleSheet("background-color: rgb(211, 211, 211);")
            comboBox_Antena.setCurrentText(_Antena)
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 1, comboBox_Antena)
        except Exception as error:
            logger.write("[insert_Combination] error:" + str('{err}'.format(err=error)), status=False)

    def insert_Modulation(self, _Modulation, row_index):
        try:
            comboBox_Modulation = QtWidgets.QComboBox()
            comboBox_Modulation.addItems(["CW", "QAM4"] if gui.ex.comboBox_automation_select_mode.currentText() == "TX" else ["QPSK", "QAM4", "QAM16"])
            if row_index % 2 != 0:
                comboBox_Modulation.setStyleSheet("background-color: rgb(211, 211, 211);")
            comboBox_Modulation.setCurrentText(_Modulation)
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 2, comboBox_Modulation)
        except Exception as error:
            logger.write("[insert_Modulation] error:" + str('{err}'.format(err=error)), status=False)

    def insert_Bandwidth(self, _Bandwidth, row_index):
        try:
            comboBox_Bandwidth = QtWidgets.QComboBox()
            comboBox_Bandwidth.addItems(["1M", "2M", "4M", "0.5M", "25K", "50K", "200K"])
            if row_index % 2 != 0:
                comboBox_Bandwidth.setStyleSheet("background-color: rgb(211, 211, 211);")
            comboBox_Bandwidth.setCurrentText(_Bandwidth)
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 3, comboBox_Bandwidth)
        except Exception as error:
            logger.write("[insert_Bandwidth] error:" + str('{err}'.format(err=error)), status=False)

    def insert_Frequency(self, _Frequency, row_index):
        try:
            doubleSpinBox_Frequency = QtWidgets.QDoubleSpinBox()
            doubleSpinBox_Frequency.setMinimum(180.0)
            doubleSpinBox_Frequency.setMaximum(2801.0)
            doubleSpinBox_Frequency.setDecimals(6)
            doubleSpinBox_Frequency.setFixedWidth(100)
            if row_index % 2 != 0:
                doubleSpinBox_Frequency.setStyleSheet("background-color: rgb(211, 211, 211);")
            doubleSpinBox_Frequency.setValue(float(_Frequency.split(" ")[0]))
            if gui.ex.comboBox_automation_select_mode.currentText() == "TX":
                gui.ex.tableWidget_Tests.setCellWidget(row_index, 4, doubleSpinBox_Frequency)
            else:
                gui.ex.tableWidget_Tests.setCellWidget(row_index, 3, doubleSpinBox_Frequency)
        except Exception as error:
            logger.write("[insert_Frequency] error:" + str('{err}'.format(err=error)), status=False)

    def insert_Tx_Power(self, _Tx_Power, row_index):
        try:
            comboBox_Tx_Power = QtWidgets.QComboBox()
            comboBox_Tx_Power.addItems(["Low", "Medium", "High"])
            if row_index % 2 != 0:
                comboBox_Tx_Power.setStyleSheet("background-color: rgb(211, 211, 211);")
            comboBox_Tx_Power.setCurrentText(_Tx_Power)
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 5, comboBox_Tx_Power)
        except Exception as error:
            logger.write("[insert_Tx_Power] error:" + str('{err}'.format(err=error)), status=False)

    def insert_Tx_Attenuation_RF(self, _Tx_Attenuation_RF, row_index):
        try:
            doubleSpinBox_Tx_Attenuation_RF = QtWidgets.QDoubleSpinBox()
            if row_index % 2 != 0:
                doubleSpinBox_Tx_Attenuation_RF.setStyleSheet("background-color: rgb(211, 211, 211);")
            doubleSpinBox_Tx_Attenuation_RF.setMinimum(0.0)
            doubleSpinBox_Tx_Attenuation_RF.setMaximum(31.5)
            doubleSpinBox_Tx_Attenuation_RF.setSingleStep(0.5)
            doubleSpinBox_Tx_Attenuation_RF.setAlignment(QtCore.Qt.AlignCenter)
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 6, doubleSpinBox_Tx_Attenuation_RF)
        except Exception as error:
            logger.write("[insert_Tx_Attenuation_RF] error:" + str(error), status=False)

    def insert_Tx_Attenuation_Navassa(self, _Tx_Attenuation_Navassa, row_index):
        try:
            spinBox_Tx_Attenuation_Navassa = QtWidgets.QSpinBox()
            spinBox_Tx_Attenuation_Navassa.lineEdit().setAlignment(QtCore.Qt.AlignHCenter)
            spinBox_Tx_Attenuation_Navassa.setMinimum(1)
            spinBox_Tx_Attenuation_Navassa.setMaximum(10000)
            if row_index % 2 != 0:
                spinBox_Tx_Attenuation_Navassa.setStyleSheet("background-color: rgb(211, 211, 211);")
            spinBox_Tx_Attenuation_Navassa.setValue(int(_Tx_Attenuation_Navassa))
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 7, spinBox_Tx_Attenuation_Navassa)
        except Exception as error:
            logger.write("[insert_Tx_Attenuation_Navassa] error:" + str('{err}'.format(err=error)), status=False)

    def insert_Resource_ID(self, _Resource_ID, row_index):
        try:
            comboBox_Resource_ID = QtWidgets.QComboBox()
            os.listdir()
            comboBox_Resource_ID.addItems(["Navassa 1 Tx 1", "Navassa 1 Tx 2", "Navassa 2 Tx 1", "Navassa 2 Tx 2", "Navassa 3 Tx 1", "Navassa 3 Tx 2", "Navassa 4 Tx 1", "Navassa 4 Tx 2"]
                                          if gui.ex.comboBox_automation_select_mode.currentText() == "TX" else ["Navassa 1 Rx 1", "Navassa 1 Rx 2", "Navassa 2 Rx 1", "Navassa 2 Rx 2", "Navassa 3 Rx 1", "Navassa 3 Rx 2", "Navassa 4 Rx 1", "Navassa 4 Rx 2"])
            if row_index % 2 != 0:
                comboBox_Resource_ID.setStyleSheet("background-color: rgb(211, 211, 211);")
            comboBox_Resource_ID.setCurrentText(_Resource_ID)
            if gui.ex.comboBox_automation_select_mode.currentText() == "TX":
                gui.ex.tableWidget_Tests.setCellWidget(row_index, 8, comboBox_Resource_ID)
            else:
                gui.ex.tableWidget_Tests.setCellWidget(row_index, 4, comboBox_Resource_ID)
        except Exception as error:
            logger.write("[insert_Resource_ID] error:" + str('{err}'.format(err=error)), status=False)

    def insert_RF_PATH(self, _RF_PATH, row_index):
        try:
            comboBox_RF_PATH = QtWidgets.QComboBox()
            comboBox_RF_PATH.addItems(os.listdir("Files\\Automation\\RF_PATH_TX\\" if gui.ex.comboBox_automation_select_mode.currentText() == "TX" else "Files\\Automation\\RF_PATH_RX\\"))
            if row_index % 2 != 0:
                comboBox_RF_PATH.setStyleSheet("background-color: rgb(211, 211, 211);")
            comboBox_RF_PATH.setCurrentText(_RF_PATH)
            if gui.ex.comboBox_automation_select_mode.currentText() == "TX":
                gui.ex.tableWidget_Tests.setCellWidget(row_index, 9, comboBox_RF_PATH)
            else:
                gui.ex.tableWidget_Tests.setCellWidget(row_index, 5, comboBox_RF_PATH)
        except Exception as error:
            logger.write("[insert_RF_PATH] error:" + str('{err}'.format(err=error)), status=False)

    def insert_Tx_Attenuation(self, _txAttenuation, row_index):
        try:
            double_spinBox_Tx_Attenuation = QtWidgets.QDoubleSpinBox()
            double_spinBox_Tx_Attenuation.lineEdit().setAlignment(QtCore.Qt.AlignHCenter)
            double_spinBox_Tx_Attenuation.setMinimum(0.0)
            double_spinBox_Tx_Attenuation.setMaximum(31.5)
            double_spinBox_Tx_Attenuation.setSingleStep(0.5)
            if row_index % 2 != 0:
                double_spinBox_Tx_Attenuation.setStyleSheet("background-color: rgb(211, 211, 211);")
            double_spinBox_Tx_Attenuation.setValue(float(_txAttenuation))
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 10, double_spinBox_Tx_Attenuation)
        except Exception as error:
            logger.write("[insert_Tx_Attenuation] error:" + str('{err}'.format(err=error)), status=False)

    def insert_routeMictorTo(self, _routeMictorTo, row_index):
        try:
            comboBox_routeMictorTo = QtWidgets.QComboBox()
            comboBox_routeMictorTo.addItems(os.listdir("Files\\Automation\\Route_Mictor\\"))
            index = 0
            for i in os.listdir("Files\\Automation\\Route_Mictor\\"):
                comboBox_routeMictorTo.setItemData(index, str(i), QtCore.Qt.ToolTipRole)
                index += 1
            comboBox_routeMictorTo.setToolTip(comboBox_routeMictorTo.currentText())
            if row_index % 2 != 0:
                comboBox_routeMictorTo.setStyleSheet("background-color: rgb(211, 211, 211);")
            comboBox_routeMictorTo.setCurrentText(_routeMictorTo)
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 6, comboBox_routeMictorTo)
        except Exception as error:
            logger.write("[insert_routeMictorTo] error:" + str('{err}'.format(err=error)), status=False)

    def insert_FilterAlpha(self, _FilterAlpha, row_index):
        try:
            double_spinBox_FilterAlpha = QtWidgets.QDoubleSpinBox()
            double_spinBox_FilterAlpha.lineEdit().setAlignment(QtCore.Qt.AlignHCenter)
            double_spinBox_FilterAlpha.setMinimum(0.0)
            double_spinBox_FilterAlpha.setMaximum(99.99)
            if row_index % 2 != 0:
                double_spinBox_FilterAlpha.setStyleSheet("background-color: rgb(211, 211, 211);")
            double_spinBox_FilterAlpha.setValue(float(_FilterAlpha))
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 8, double_spinBox_FilterAlpha)
        except Exception as error:
            logger.write("[insert_FilterAlpha] error:" + str('{err}'.format(err=error)), status=False)

    def insert_Amplitude(self, _Amplitude, row_index):
        try:
            double_spinBox_Amplitude = QtWidgets.QDoubleSpinBox()
            double_spinBox_Amplitude.lineEdit().setAlignment(QtCore.Qt.AlignHCenter)
            double_spinBox_Amplitude.setMinimum(-200.0)
            double_spinBox_Amplitude.setMaximum(30.0)
            if row_index % 2 != 0:
                double_spinBox_Amplitude.setStyleSheet("background-color: rgb(211, 211, 211);")
            double_spinBox_Amplitude.setValue(float(_Amplitude))
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 7, double_spinBox_Amplitude)
        except Exception as error:
            logger.write("[insert_Amplitude] error:" + str('{err}'.format(err=error)), status=False)

    def insert_SymbolRate(self, _SymbolRate, row_index):
        try:
            double_spinBox_SymbolRate = QtWidgets.QDoubleSpinBox()
            double_spinBox_SymbolRate.lineEdit().setAlignment(QtCore.Qt.AlignHCenter)
            double_spinBox_SymbolRate.setMinimum(0.0)
            double_spinBox_SymbolRate.setMaximum(99.99)
            if row_index % 2 != 0:
                double_spinBox_SymbolRate.setStyleSheet("background-color: rgb(211, 211, 211);")
            double_spinBox_SymbolRate.setValue(float(_SymbolRate))
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 9, double_spinBox_SymbolRate)
        except Exception as error:
            logger.write("[insert_Amplitude] error:" + str('{err}'.format(err=error)), status=False)

    def insert_RecallSetup(self, _RecallSetup, row_index):
        try:
            comboBox_RecallSetup = QtWidgets.QComboBox()
            comboBox_RecallSetup.addItems(os.listdir("Files\\Automation\\Presets\\VSA_recall_setup\\"))
            index = 0
            for i in os.listdir("Files\\Automation\\Presets\\VSA_recall_setup\\"):
                comboBox_RecallSetup.setItemData(index, str(i), QtCore.Qt.ToolTipRole)
                index += 1
            comboBox_RecallSetup.setToolTip(comboBox_RecallSetup.currentText())
            if row_index % 2 != 0:
                comboBox_RecallSetup.setStyleSheet("background-color: rgb(211, 211, 211);")
            comboBox_RecallSetup.setCurrentText(_RecallSetup)
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 12, comboBox_RecallSetup)
        except Exception as error:
            logger.write("[insert_RecallSetup] error:" + str('{err}'.format(err=error)), status=False)

    def insert_rxGainIndex(self, _rxGainIndex, row_index):
        try:
            spinBox_rxGainIndex = QtWidgets.QSpinBox()
            spinBox_rxGainIndex.lineEdit().setAlignment(QtCore.Qt.AlignHCenter)
            spinBox_rxGainIndex.setMinimum(0)
            spinBox_rxGainIndex.setMaximum(256)
            if row_index % 2 != 0:
                spinBox_rxGainIndex.setStyleSheet("background-color: rgb(211, 211, 211);")
            spinBox_rxGainIndex.setValue(int(_rxGainIndex))
            gui.ex.tableWidget_Tests.setCellWidget(row_index, 11, spinBox_rxGainIndex)
        except Exception as error:
            logger.write("[insert_rxGainIndex] error:" + str('{err}'.format(err=error)), status=False)


files = Files()
logger = Logger()
action = Action()
script_page = Script_Page()
spi = SPI()
home = Home_Page()
va = VA()
lptr1 = LPTR1()
mbtr = MBTR()
hptr = HPTR()
wbn = WBN()
hh = HH()
mp = MP()
navassa = Navassa_Config()
navassa_operation = Navassa_Operation()
navassa_init = Navassa_Init()
registers = Registers_Page()
test_points = Test_Points_Page()
load_file = Load_File_Page()
hw_test = HW_Tests_Page()
automation_rx = Automation_Rx()
automation_tx = Automation_Tx()
test_generator = Test_Generator()
Keysight = Keysight()
signalGenerator = SignalGenerator()
vsa = VSA()
configurations = Configurations_Page()
scan_offset = Scan_Offset()
runningView = RunningView()
table = Table()
module_filter_bank = Module_Filter_Bank_Card()
gui.showAndExit()
